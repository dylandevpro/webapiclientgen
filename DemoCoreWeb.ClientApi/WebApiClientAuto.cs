//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DemoWebApi.Controllers.Client
{
    using System;
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using System.Net.Http;
    using Newtonsoft.Json;
    
    
    public partial class Values
    {
        
        private System.Net.Http.HttpClient client;
        
        private System.Uri baseUri;
        
        public Values(System.Net.Http.HttpClient client, System.Uri baseUri)
        {
            if (client == null)
                throw new ArgumentNullException("client", "Null HttpClient.");

            if (baseUri == null)
                throw new ArgumentNullException("baseUri", "Null baseUri");

            this.client = client;
            this.baseUri = baseUri;
        }
        
        /// <summary>
        /// GET api/Values
        /// </summary>
        public async Task<string[]> GetAsync()
        {
            var requestUri = new Uri(this.baseUri, "api/Values");
            var responseMessage = await client.GetAsync(requestUri);
            responseMessage.EnsureSuccessStatusCode();
            var stream = await responseMessage.Content.ReadAsStreamAsync();
            using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
            {
            var serializer = new JsonSerializer();
            return serializer.Deserialize<string[]>(jsonReader);
            }
        }
        
        /// <summary>
        /// GET api/Values
        /// </summary>
        public string[] Get()
        {
            var requestUri = new Uri(this.baseUri, "api/Values");
            var responseMessage = this.client.GetAsync(requestUri).Result;
            responseMessage.EnsureSuccessStatusCode();
            var stream = responseMessage.Content.ReadAsStreamAsync().Result;
            using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
            {
            var serializer = new JsonSerializer();
            return serializer.Deserialize<string[]>(jsonReader);
            }
        }
        
        /// <summary>
        /// GET api/Values/{id}
        /// </summary>
        public async Task<string> GetAsync(int id)
        {
            var requestUri = new Uri(this.baseUri, "api/Values/"+id);
            var responseMessage = await client.GetAsync(requestUri);
            responseMessage.EnsureSuccessStatusCode();
            var stream = await responseMessage.Content.ReadAsStreamAsync();
            using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
            {
            var serializer = new JsonSerializer();
            return serializer.Deserialize<string>(jsonReader);
            }
        }
        
        /// <summary>
        /// GET api/Values/{id}
        /// </summary>
        public string Get(int id)
        {
            var requestUri = new Uri(this.baseUri, "api/Values/"+id);
            var responseMessage = this.client.GetAsync(requestUri).Result;
            responseMessage.EnsureSuccessStatusCode();
            var stream = responseMessage.Content.ReadAsStreamAsync().Result;
            using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
            {
            var serializer = new JsonSerializer();
            return serializer.Deserialize<string>(jsonReader);
            }
        }
        
        /// <summary>
        /// POST api/Values
        /// </summary>
        public async Task PostAsync(string value)
        {
            var requestUri = new Uri(this.baseUri, "api/Values");
            using (var requestWriter = new System.IO.StringWriter())
            {
            var requestSerializer = JsonSerializer.Create();
            requestSerializer.Serialize(requestWriter, value);
            var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
            var responseMessage = await client.PostAsync(requestUri, content);
            responseMessage.EnsureSuccessStatusCode();
            }
        }
        
        /// <summary>
        /// POST api/Values
        /// </summary>
        public void Post(string value)
        {
            var requestUri = new Uri(this.baseUri, "api/Values");
            using (var requestWriter = new System.IO.StringWriter())
            {
            var requestSerializer = JsonSerializer.Create();
            requestSerializer.Serialize(requestWriter, value);
            var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
            var responseMessage = this.client.PostAsync(requestUri, content).Result;
            responseMessage.EnsureSuccessStatusCode();
            }
        }
        
        /// <summary>
        /// PUT api/Values/{id}
        /// </summary>
        public async Task PutAsync(int id, string value)
        {
            var requestUri = new Uri(this.baseUri, "api/Values/"+id);
            using (var requestWriter = new System.IO.StringWriter())
            {
            var requestSerializer = JsonSerializer.Create();
            requestSerializer.Serialize(requestWriter, value);
            var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
            var responseMessage = await client.PutAsync(requestUri, content);
            responseMessage.EnsureSuccessStatusCode();
            }
        }
        
        /// <summary>
        /// PUT api/Values/{id}
        /// </summary>
        public void Put(int id, string value)
        {
            var requestUri = new Uri(this.baseUri, "api/Values/"+id);
            using (var requestWriter = new System.IO.StringWriter())
            {
            var requestSerializer = JsonSerializer.Create();
            requestSerializer.Serialize(requestWriter, value);
            var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
            var responseMessage = this.client.PutAsync(requestUri, content).Result;
            responseMessage.EnsureSuccessStatusCode();
            }
        }
        
        /// <summary>
        /// DELETE api/Values/{id}
        /// </summary>
        public async Task DeleteAsync(int id)
        {
            var requestUri = new Uri(this.baseUri, "api/Values/"+id);
            var responseMessage = await client.DeleteAsync(requestUri);
            responseMessage.EnsureSuccessStatusCode();
        }
        
        /// <summary>
        /// DELETE api/Values/{id}
        /// </summary>
        public void Delete(int id)
        {
            var requestUri = new Uri(this.baseUri, "api/Values/"+id);
            var responseMessage = this.client.DeleteAsync(requestUri).Result;
            responseMessage.EnsureSuccessStatusCode();
        }
    }
}
