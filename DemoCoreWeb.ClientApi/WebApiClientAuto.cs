//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DemoWebApi.Controllers.Client
{
    
    
    public class Hero : object
    {
        
        private long _Id;
        
        private string _Name;
        
        public long Id
        {
            get
            {
                return _Id;
            }
            set
            {
                _Id = value;
            }
        }
        
        public string Name
        {
            get
            {
                return _Name;
            }
            set
            {
                _Name = value;
            }
        }
    }
}
namespace DemoWebApi.DemoData.Client
{
    
    
    public enum AddressType
    {
        
        Postal,
        
        Residential,
    }
    
    public enum Days
    {
        
        Sat = 1,
        
        Sun = 2,
        
        Mon = 3,
        
        Tue = 4,
        
        Wed = 5,
        
        Thu = 6,
        
        Fri = 7,
    }
    
    public class PhoneNumber : object
    {
        
        private System.Guid _Id;
        
        private string _FullNumber;
        
        private DemoWebApi.DemoData.Client.PhoneType _PhoneType;
        
        private System.Guid _EntityId;
        
        public System.Guid Id
        {
            get
            {
                return _Id;
            }
            set
            {
                _Id = value;
            }
        }
        
        public string FullNumber
        {
            get
            {
                return _FullNumber;
            }
            set
            {
                _FullNumber = value;
            }
        }
        
        public DemoWebApi.DemoData.Client.PhoneType PhoneType
        {
            get
            {
                return _PhoneType;
            }
            set
            {
                _PhoneType = value;
            }
        }
        
        public System.Guid EntityId
        {
            get
            {
                return _EntityId;
            }
            set
            {
                _EntityId = value;
            }
        }
    }
    
    public enum PhoneType
    {
        
        Tel,
        
        Mobile,
        
        Skype,
        
        Fax,
    }
    
    public class Address : object
    {
        
        private System.Guid _Id;
        
        private DemoWebApi.DemoData.Client.Entity _Entity;
        
        private System.Guid _EntityId;
        
        private string _Street1;
        
        private string _Street2;
        
        private string _City;
        
        private string _State;
        
        private string _PostalCode;
        
        private string _Country;
        
        private DemoWebApi.DemoData.Client.AddressType _Type;
        
        private DemoWebApi.DemoData.Another.Client.MyPoint _Location;
        
        public System.Guid Id
        {
            get
            {
                return _Id;
            }
            set
            {
                _Id = value;
            }
        }
        
        public DemoWebApi.DemoData.Client.Entity Entity
        {
            get
            {
                return _Entity;
            }
            set
            {
                _Entity = value;
            }
        }
        
        public System.Guid EntityId
        {
            get
            {
                return _EntityId;
            }
            set
            {
                _EntityId = value;
            }
        }
        
        public string Street1
        {
            get
            {
                return _Street1;
            }
            set
            {
                _Street1 = value;
            }
        }
        
        public string Street2
        {
            get
            {
                return _Street2;
            }
            set
            {
                _Street2 = value;
            }
        }
        
        public string City
        {
            get
            {
                return _City;
            }
            set
            {
                _City = value;
            }
        }
        
        public string State
        {
            get
            {
                return _State;
            }
            set
            {
                _State = value;
            }
        }
        
        public string PostalCode
        {
            get
            {
                return _PostalCode;
            }
            set
            {
                _PostalCode = value;
            }
        }
        
        public string Country
        {
            get
            {
                return _Country;
            }
            set
            {
                _Country = value;
            }
        }
        
        public DemoWebApi.DemoData.Client.AddressType Type
        {
            get
            {
                return _Type;
            }
            set
            {
                _Type = value;
            }
        }
        
        public DemoWebApi.DemoData.Another.Client.MyPoint Location
        {
            get
            {
                return _Location;
            }
            set
            {
                _Location = value;
            }
        }
    }
    
    public class Entity : object
    {
        
        private System.Guid _Id;
        
        private string _Name;
        
        private DemoWebApi.DemoData.Client.Address[] _Addresses;
        
        private DemoWebApi.DemoData.Client.PhoneNumber[] _PhoneNumbers;
        
        private System.Uri _Web;
        
        public System.Guid Id
        {
            get
            {
                return _Id;
            }
            set
            {
                _Id = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        public string Name
        {
            get
            {
                return _Name;
            }
            set
            {
                _Name = value;
            }
        }
        
        public DemoWebApi.DemoData.Client.Address[] Addresses
        {
            get
            {
                return _Addresses;
            }
            set
            {
                _Addresses = value;
            }
        }
        
        public DemoWebApi.DemoData.Client.PhoneNumber[] PhoneNumbers
        {
            get
            {
                return _PhoneNumbers;
            }
            set
            {
                _PhoneNumbers = value;
            }
        }
        
        public System.Uri Web
        {
            get
            {
                return _Web;
            }
            set
            {
                _Web = value;
            }
        }
    }
    
    public class Person : DemoWebApi.DemoData.Client.Entity
    {
        
        private string _Surname;
        
        private string _GivenName;
        
        private System.Nullable<System.DateTime> _DOB;
        
        public string Surname
        {
            get
            {
                return _Surname;
            }
            set
            {
                _Surname = value;
            }
        }
        
        public string GivenName
        {
            get
            {
                return _GivenName;
            }
            set
            {
                _GivenName = value;
            }
        }
        
        public System.Nullable<System.DateTime> DOB
        {
            get
            {
                return _DOB;
            }
            set
            {
                _DOB = value;
            }
        }
    }
    
    public class Company : DemoWebApi.DemoData.Client.Entity
    {
        
        private string _BusinessNumber;
        
        private string _BusinessNumberType;
        
        private string[][] _TextMatrix;
        
        private int[][] _Int2DJagged;
        
        private int[,] _Int2D;
        
        private string[] _Lines;
        
        public string BusinessNumber
        {
            get
            {
                return _BusinessNumber;
            }
            set
            {
                _BusinessNumber = value;
            }
        }
        
        public string BusinessNumberType
        {
            get
            {
                return _BusinessNumberType;
            }
            set
            {
                _BusinessNumberType = value;
            }
        }
        
        public string[][] TextMatrix
        {
            get
            {
                return _TextMatrix;
            }
            set
            {
                _TextMatrix = value;
            }
        }
        
        public int[][] Int2DJagged
        {
            get
            {
                return _Int2DJagged;
            }
            set
            {
                _Int2DJagged = value;
            }
        }
        
        public int[,] Int2D
        {
            get
            {
                return _Int2D;
            }
            set
            {
                _Int2D = value;
            }
        }
        
        public string[] Lines
        {
            get
            {
                return _Lines;
            }
            set
            {
                _Lines = value;
            }
        }
    }
    
    public class MyPeopleDic : object
    {
        
        private System.Collections.Generic.Dictionary<string, DemoWebApi.DemoData.Client.Person> _Dic;
        
        private System.Collections.Generic.Dictionary<string, string> _AnotherDic;
        
        private System.Collections.Generic.Dictionary<int, string> _IntDic;
        
        public System.Collections.Generic.Dictionary<string, DemoWebApi.DemoData.Client.Person> Dic
        {
            get
            {
                return _Dic;
            }
            set
            {
                _Dic = value;
            }
        }
        
        public System.Collections.Generic.Dictionary<string, string> AnotherDic
        {
            get
            {
                return _AnotherDic;
            }
            set
            {
                _AnotherDic = value;
            }
        }
        
        public System.Collections.Generic.Dictionary<int, string> IntDic
        {
            get
            {
                return _IntDic;
            }
            set
            {
                _IntDic = value;
            }
        }
    }
}
namespace DemoWebApi.DemoData.Another.Client
{
    
    
    public struct MyPoint
    {
        
        public double X;
        
        public double Y;
    }
}
namespace DemoWebApi.Models.Client
{
    
    
    public class AddExternalLoginBindingModel : object
    {
        
        private string _ExternalAccessToken;
        
        public string ExternalAccessToken
        {
            get
            {
                return _ExternalAccessToken;
            }
            set
            {
                _ExternalAccessToken = value;
            }
        }
    }
    
    public class ChangePasswordBindingModel : object
    {
        
        private string _OldPassword;
        
        private string _NewPassword;
        
        private string _ConfirmPassword;
        
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        public string OldPassword
        {
            get
            {
                return _OldPassword;
            }
            set
            {
                _OldPassword = value;
            }
        }
        
        public string NewPassword
        {
            get
            {
                return _NewPassword;
            }
            set
            {
                _NewPassword = value;
            }
        }
        
        public string ConfirmPassword
        {
            get
            {
                return _ConfirmPassword;
            }
            set
            {
                _ConfirmPassword = value;
            }
        }
    }
    
    public class RegisterBindingModel : object
    {
        
        private string _Email;
        
        private string _Password;
        
        private string _ConfirmPassword;
        
        public string Email
        {
            get
            {
                return _Email;
            }
            set
            {
                _Email = value;
            }
        }
        
        public string Password
        {
            get
            {
                return _Password;
            }
            set
            {
                _Password = value;
            }
        }
        
        public string ConfirmPassword
        {
            get
            {
                return _ConfirmPassword;
            }
            set
            {
                _ConfirmPassword = value;
            }
        }
    }
    
    public class RegisterExternalBindingModel : object
    {
        
        private string _Email;
        
        public string Email
        {
            get
            {
                return _Email;
            }
            set
            {
                _Email = value;
            }
        }
    }
    
    public class RemoveLoginBindingModel : object
    {
        
        private string _LoginProvider;
        
        private string _ProviderKey;
        
        public string LoginProvider
        {
            get
            {
                return _LoginProvider;
            }
            set
            {
                _LoginProvider = value;
            }
        }
        
        public string ProviderKey
        {
            get
            {
                return _ProviderKey;
            }
            set
            {
                _ProviderKey = value;
            }
        }
    }
    
    public class SetPasswordBindingModel : object
    {
        
        private string _NewPassword;
        
        private string _ConfirmPassword;
        
        public string NewPassword
        {
            get
            {
                return _NewPassword;
            }
            set
            {
                _NewPassword = value;
            }
        }
        
        public string ConfirmPassword
        {
            get
            {
                return _ConfirmPassword;
            }
            set
            {
                _ConfirmPassword = value;
            }
        }
    }
}
namespace DemoCoreWeb.Controllers.Client
{
    using System;
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using System.Net.Http;
    using Newtonsoft.Json;
    
    
    public partial class Values
    {
        
        private System.Net.Http.HttpClient client;
        
        private System.Uri baseUri;
        
        public Values(System.Net.Http.HttpClient client, System.Uri baseUri)
        {
            if (client == null)
                throw new ArgumentNullException("client", "Null HttpClient.");

            if (baseUri == null)
                throw new ArgumentNullException("baseUri", "Null baseUri");

            this.client = client;
            this.baseUri = baseUri;
        }
        
        /// <summary>
        /// GET api/Values
        /// </summary>
        public async Task<string[]> DemoCoreWeb.Controllers.ValuesController.Get (DemoCoreWeb)Async()
        {
            var requestUri = new Uri(this.baseUri, "api/Values");
            var responseMessage = await client.GetAsync(requestUri);
            responseMessage.EnsureSuccessStatusCode();
            var stream = await responseMessage.Content.ReadAsStreamAsync();
            using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
            {
            var serializer = new JsonSerializer();
            return serializer.Deserialize<string[]>(jsonReader);
            }
        }
        
        /// <summary>
        /// GET api/Values
        /// </summary>
        public string[] DemoCoreWeb.Controllers.ValuesController.Get (DemoCoreWeb)()
        {
            var requestUri = new Uri(this.baseUri, "api/Values");
            var responseMessage = this.client.GetAsync(requestUri).Result;
            responseMessage.EnsureSuccessStatusCode();
            var stream = responseMessage.Content.ReadAsStreamAsync().Result;
            using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
            {
            var serializer = new JsonSerializer();
            return serializer.Deserialize<string[]>(jsonReader);
            }
        }
        
        /// <summary>
        /// GET api/Values/{id}
        /// </summary>
        public async Task<string> DemoCoreWeb.Controllers.ValuesController.Get (DemoCoreWeb)Async(int id)
        {
            var requestUri = new Uri(this.baseUri, "api/Values/"+id);
            var responseMessage = await client.GetAsync(requestUri);
            responseMessage.EnsureSuccessStatusCode();
            var stream = await responseMessage.Content.ReadAsStreamAsync();
            using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
            {
            var serializer = new JsonSerializer();
            return serializer.Deserialize<string>(jsonReader);
            }
        }
        
        /// <summary>
        /// GET api/Values/{id}
        /// </summary>
        public string DemoCoreWeb.Controllers.ValuesController.Get (DemoCoreWeb)(int id)
        {
            var requestUri = new Uri(this.baseUri, "api/Values/"+id);
            var responseMessage = this.client.GetAsync(requestUri).Result;
            responseMessage.EnsureSuccessStatusCode();
            var stream = responseMessage.Content.ReadAsStreamAsync().Result;
            using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
            {
            var serializer = new JsonSerializer();
            return serializer.Deserialize<string>(jsonReader);
            }
        }
        
        /// <summary>
        /// POST api/Values
        /// </summary>
        public async Task<void> DemoCoreWeb.Controllers.ValuesController.Post (DemoCoreWeb)Async(string value)
        {
            var requestUri = new Uri(this.baseUri, "api/Values");
            using (var requestWriter = new System.IO.StringWriter())
            {
            var requestSerializer = JsonSerializer.Create();
            requestSerializer.Serialize(requestWriter, value);
            var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
            var responseMessage = await client.PostAsync(requestUri, content);
            responseMessage.EnsureSuccessStatusCode();
            var stream = await responseMessage.Content.ReadAsStreamAsync();
            using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
            {
            var serializer = new JsonSerializer();
            return serializer.Deserialize<void>(jsonReader);
            }
            }
        }
        
        /// <summary>
        /// POST api/Values
        /// </summary>
        public void DemoCoreWeb.Controllers.ValuesController.Post (DemoCoreWeb)(string value)
        {
            var requestUri = new Uri(this.baseUri, "api/Values");
            using (var requestWriter = new System.IO.StringWriter())
            {
            var requestSerializer = JsonSerializer.Create();
            requestSerializer.Serialize(requestWriter, value);
            var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
            var responseMessage = this.client.PostAsync(requestUri, content).Result;
            responseMessage.EnsureSuccessStatusCode();
            var stream = responseMessage.Content.ReadAsStreamAsync().Result;
            using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
            {
            var serializer = new JsonSerializer();
            return serializer.Deserialize<void>(jsonReader);
            }
            }
        }
        
        /// <summary>
        /// PUT api/Values/{id}
        /// </summary>
        public async Task<void> DemoCoreWeb.Controllers.ValuesController.Put (DemoCoreWeb)Async(int id, string value)
        {
            var requestUri = new Uri(this.baseUri, "api/Values/"+id);
            using (var requestWriter = new System.IO.StringWriter())
            {
            var requestSerializer = JsonSerializer.Create();
            requestSerializer.Serialize(requestWriter, value);
            var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
            var responseMessage = await client.PutAsync(requestUri, content);
            responseMessage.EnsureSuccessStatusCode();
            var stream = await responseMessage.Content.ReadAsStreamAsync();
            using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
            {
            var serializer = new JsonSerializer();
            return serializer.Deserialize<void>(jsonReader);
            }
            }
        }
        
        /// <summary>
        /// PUT api/Values/{id}
        /// </summary>
        public void DemoCoreWeb.Controllers.ValuesController.Put (DemoCoreWeb)(int id, string value)
        {
            var requestUri = new Uri(this.baseUri, "api/Values/"+id);
            using (var requestWriter = new System.IO.StringWriter())
            {
            var requestSerializer = JsonSerializer.Create();
            requestSerializer.Serialize(requestWriter, value);
            var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
            var responseMessage = this.client.PutAsync(requestUri, content).Result;
            responseMessage.EnsureSuccessStatusCode();
            var stream = responseMessage.Content.ReadAsStreamAsync().Result;
            using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
            {
            var serializer = new JsonSerializer();
            return serializer.Deserialize<void>(jsonReader);
            }
            }
        }
        
        /// <summary>
        /// DELETE api/Values/{id}
        /// </summary>
        public async Task<void> DemoCoreWeb.Controllers.ValuesController.Delete (DemoCoreWeb)Async(int id)
        {
            var requestUri = new Uri(this.baseUri, "api/Values/"+id);
            var responseMessage = await client.DeleteAsync(requestUri);
            responseMessage.EnsureSuccessStatusCode();
            var stream = await responseMessage.Content.ReadAsStreamAsync();
            using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
            {
            var serializer = new JsonSerializer();
            return serializer.Deserialize<void>(jsonReader);
            }
        }
        
        /// <summary>
        /// DELETE api/Values/{id}
        /// </summary>
        public void DemoCoreWeb.Controllers.ValuesController.Delete (DemoCoreWeb)(int id)
        {
            var requestUri = new Uri(this.baseUri, "api/Values/"+id);
            var responseMessage = this.client.DeleteAsync(requestUri).Result;
            responseMessage.EnsureSuccessStatusCode();
            var stream = responseMessage.Content.ReadAsStreamAsync().Result;
            using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
            {
            var serializer = new JsonSerializer();
            return serializer.Deserialize<void>(jsonReader);
            }
        }
    }
}
namespace DemoWebApi.Controllers.Client
{
    using System;
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using System.Net.Http;
    using Newtonsoft.Json;
    
    
    public partial class Entities
    {
        
        private System.Net.Http.HttpClient client;
        
        private System.Uri baseUri;
        
        public Entities(System.Net.Http.HttpClient client, System.Uri baseUri)
        {
            if (client == null)
                throw new ArgumentNullException("client", "Null HttpClient.");

            if (baseUri == null)
                throw new ArgumentNullException("baseUri", "Null baseUri");

            this.client = client;
            this.baseUri = baseUri;
        }
        
        /// <summary>
        /// GET api/Entities/getPerson
        /// </summary>
        public async Task<DemoWebApi.DemoData.Client.Person> DemoWebApi.Controllers.EntitiesController.GetPerson (DemoCoreWeb)Async(long id)
        {
            var requestUri = new Uri(this.baseUri, "api/Entities/getPerson");
            var responseMessage = await client.GetAsync(requestUri);
            responseMessage.EnsureSuccessStatusCode();
            var stream = await responseMessage.Content.ReadAsStreamAsync();
            using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
            {
            var serializer = new JsonSerializer();
            return serializer.Deserialize<DemoWebApi.DemoData.Client.Person>(jsonReader);
            }
        }
        
        /// <summary>
        /// GET api/Entities/getPerson
        /// </summary>
        public DemoWebApi.DemoData.Client.Person DemoWebApi.Controllers.EntitiesController.GetPerson (DemoCoreWeb)(long id)
        {
            var requestUri = new Uri(this.baseUri, "api/Entities/getPerson");
            var responseMessage = this.client.GetAsync(requestUri).Result;
            responseMessage.EnsureSuccessStatusCode();
            var stream = responseMessage.Content.ReadAsStreamAsync().Result;
            using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
            {
            var serializer = new JsonSerializer();
            return serializer.Deserialize<DemoWebApi.DemoData.Client.Person>(jsonReader);
            }
        }
        
        /// <summary>
        /// POST api/Entities/createPerson
        /// </summary>
        public async Task<long> DemoWebApi.Controllers.EntitiesController.CreatePerson (DemoCoreWeb)Async(DemoWebApi.DemoData.Client.Person p)
        {
            var requestUri = new Uri(this.baseUri, "api/Entities/createPerson");
            using (var requestWriter = new System.IO.StringWriter())
            {
            var requestSerializer = JsonSerializer.Create();
            requestSerializer.Serialize(requestWriter, p);
            var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
            var responseMessage = await client.PostAsync(requestUri, content);
            responseMessage.EnsureSuccessStatusCode();
            var stream = await responseMessage.Content.ReadAsStreamAsync();
            using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
            {
            var serializer = new JsonSerializer();
            return System.Int64.Parse(jsonReader.ReadAsString());
            }
            }
        }
        
        /// <summary>
        /// POST api/Entities/createPerson
        /// </summary>
        public long DemoWebApi.Controllers.EntitiesController.CreatePerson (DemoCoreWeb)(DemoWebApi.DemoData.Client.Person p)
        {
            var requestUri = new Uri(this.baseUri, "api/Entities/createPerson");
            using (var requestWriter = new System.IO.StringWriter())
            {
            var requestSerializer = JsonSerializer.Create();
            requestSerializer.Serialize(requestWriter, p);
            var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
            var responseMessage = this.client.PostAsync(requestUri, content).Result;
            responseMessage.EnsureSuccessStatusCode();
            var stream = responseMessage.Content.ReadAsStreamAsync().Result;
            using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
            {
            var serializer = new JsonSerializer();
            return System.Int64.Parse(jsonReader.ReadAsString());
            }
            }
        }
        
        /// <summary>
        /// PUT api/Entities/updatePerson
        /// </summary>
        public async Task<void> DemoWebApi.Controllers.EntitiesController.UpdatePerson (DemoCoreWeb)Async(DemoWebApi.DemoData.Client.Person person)
        {
            var requestUri = new Uri(this.baseUri, "api/Entities/updatePerson");
            using (var requestWriter = new System.IO.StringWriter())
            {
            var requestSerializer = JsonSerializer.Create();
            requestSerializer.Serialize(requestWriter, person);
            var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
            var responseMessage = await client.PutAsync(requestUri, content);
            responseMessage.EnsureSuccessStatusCode();
            var stream = await responseMessage.Content.ReadAsStreamAsync();
            using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
            {
            var serializer = new JsonSerializer();
            return serializer.Deserialize<void>(jsonReader);
            }
            }
        }
        
        /// <summary>
        /// PUT api/Entities/updatePerson
        /// </summary>
        public void DemoWebApi.Controllers.EntitiesController.UpdatePerson (DemoCoreWeb)(DemoWebApi.DemoData.Client.Person person)
        {
            var requestUri = new Uri(this.baseUri, "api/Entities/updatePerson");
            using (var requestWriter = new System.IO.StringWriter())
            {
            var requestSerializer = JsonSerializer.Create();
            requestSerializer.Serialize(requestWriter, person);
            var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
            var responseMessage = this.client.PutAsync(requestUri, content).Result;
            responseMessage.EnsureSuccessStatusCode();
            var stream = responseMessage.Content.ReadAsStreamAsync().Result;
            using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
            {
            var serializer = new JsonSerializer();
            return serializer.Deserialize<void>(jsonReader);
            }
            }
        }
        
        /// <summary>
        /// PUT api/Entities/link
        /// </summary>
        public async Task<bool> DemoWebApi.Controllers.EntitiesController.LinkPerson (DemoCoreWeb)Async(long id, string relationship, DemoWebApi.DemoData.Client.Person person)
        {
            var requestUri = new Uri(this.baseUri, "api/Entities/link");
            using (var requestWriter = new System.IO.StringWriter())
            {
            var requestSerializer = JsonSerializer.Create();
            requestSerializer.Serialize(requestWriter, person);
            var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
            var responseMessage = await client.PutAsync(requestUri, content);
            responseMessage.EnsureSuccessStatusCode();
            var stream = await responseMessage.Content.ReadAsStreamAsync();
            using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
            {
            var serializer = new JsonSerializer();
            return System.Boolean.Parse(jsonReader.ReadAsString());
            }
            }
        }
        
        /// <summary>
        /// PUT api/Entities/link
        /// </summary>
        public bool DemoWebApi.Controllers.EntitiesController.LinkPerson (DemoCoreWeb)(long id, string relationship, DemoWebApi.DemoData.Client.Person person)
        {
            var requestUri = new Uri(this.baseUri, "api/Entities/link");
            using (var requestWriter = new System.IO.StringWriter())
            {
            var requestSerializer = JsonSerializer.Create();
            requestSerializer.Serialize(requestWriter, person);
            var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
            var responseMessage = this.client.PutAsync(requestUri, content).Result;
            responseMessage.EnsureSuccessStatusCode();
            var stream = responseMessage.Content.ReadAsStreamAsync().Result;
            using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
            {
            var serializer = new JsonSerializer();
            return System.Boolean.Parse(jsonReader.ReadAsString());
            }
            }
        }
        
        /// <summary>
        /// DELETE api/Entities
        /// </summary>
        public async Task<void> DemoWebApi.Controllers.EntitiesController.Delete (DemoCoreWeb)Async(long id)
        {
            var requestUri = new Uri(this.baseUri, "api/Entities");
            var responseMessage = await client.DeleteAsync(requestUri);
            responseMessage.EnsureSuccessStatusCode();
            var stream = await responseMessage.Content.ReadAsStreamAsync();
            using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
            {
            var serializer = new JsonSerializer();
            return serializer.Deserialize<void>(jsonReader);
            }
        }
        
        /// <summary>
        /// DELETE api/Entities
        /// </summary>
        public void DemoWebApi.Controllers.EntitiesController.Delete (DemoCoreWeb)(long id)
        {
            var requestUri = new Uri(this.baseUri, "api/Entities");
            var responseMessage = this.client.DeleteAsync(requestUri).Result;
            responseMessage.EnsureSuccessStatusCode();
            var stream = responseMessage.Content.ReadAsStreamAsync().Result;
            using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
            {
            var serializer = new JsonSerializer();
            return serializer.Deserialize<void>(jsonReader);
            }
        }
        
        /// <summary>
        /// GET api/Entities/Company
        /// </summary>
        public async Task<DemoWebApi.DemoData.Client.Company> DemoWebApi.Controllers.EntitiesController.GetCompany (DemoCoreWeb)Async(long id)
        {
            var requestUri = new Uri(this.baseUri, "api/Entities/Company");
            var responseMessage = await client.GetAsync(requestUri);
            responseMessage.EnsureSuccessStatusCode();
            var stream = await responseMessage.Content.ReadAsStreamAsync();
            using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
            {
            var serializer = new JsonSerializer();
            return serializer.Deserialize<DemoWebApi.DemoData.Client.Company>(jsonReader);
            }
        }
        
        /// <summary>
        /// GET api/Entities/Company
        /// </summary>
        public DemoWebApi.DemoData.Client.Company DemoWebApi.Controllers.EntitiesController.GetCompany (DemoCoreWeb)(long id)
        {
            var requestUri = new Uri(this.baseUri, "api/Entities/Company");
            var responseMessage = this.client.GetAsync(requestUri).Result;
            responseMessage.EnsureSuccessStatusCode();
            var stream = responseMessage.Content.ReadAsStreamAsync().Result;
            using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
            {
            var serializer = new JsonSerializer();
            return serializer.Deserialize<DemoWebApi.DemoData.Client.Company>(jsonReader);
            }
        }
    }
    
    public partial class Heroes
    {
        
        private System.Net.Http.HttpClient client;
        
        private System.Uri baseUri;
        
        public Heroes(System.Net.Http.HttpClient client, System.Uri baseUri)
        {
            if (client == null)
                throw new ArgumentNullException("client", "Null HttpClient.");

            if (baseUri == null)
                throw new ArgumentNullException("baseUri", "Null baseUri");

            this.client = client;
            this.baseUri = baseUri;
        }
        
        /// <summary>
        /// GET api/Heroes
        /// </summary>
        public async Task<DemoWebApi.Controllers.Client.Hero[]> DemoWebApi.Controllers.HeroesController.Get (DemoCoreWeb)Async()
        {
            var requestUri = new Uri(this.baseUri, "api/Heroes");
            var responseMessage = await client.GetAsync(requestUri);
            responseMessage.EnsureSuccessStatusCode();
            var stream = await responseMessage.Content.ReadAsStreamAsync();
            using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
            {
            var serializer = new JsonSerializer();
            return serializer.Deserialize<DemoWebApi.Controllers.Client.Hero[]>(jsonReader);
            }
        }
        
        /// <summary>
        /// GET api/Heroes
        /// </summary>
        public DemoWebApi.Controllers.Client.Hero[] DemoWebApi.Controllers.HeroesController.Get (DemoCoreWeb)()
        {
            var requestUri = new Uri(this.baseUri, "api/Heroes");
            var responseMessage = this.client.GetAsync(requestUri).Result;
            responseMessage.EnsureSuccessStatusCode();
            var stream = responseMessage.Content.ReadAsStreamAsync().Result;
            using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
            {
            var serializer = new JsonSerializer();
            return serializer.Deserialize<DemoWebApi.Controllers.Client.Hero[]>(jsonReader);
            }
        }
        
        /// <summary>
        /// GET api/Heroes/{id}
        /// </summary>
        public async Task<DemoWebApi.Controllers.Client.Hero> DemoWebApi.Controllers.HeroesController.Get (DemoCoreWeb)Async(long id)
        {
            var requestUri = new Uri(this.baseUri, "api/Heroes/"+id);
            var responseMessage = await client.GetAsync(requestUri);
            responseMessage.EnsureSuccessStatusCode();
            var stream = await responseMessage.Content.ReadAsStreamAsync();
            using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
            {
            var serializer = new JsonSerializer();
            return serializer.Deserialize<DemoWebApi.Controllers.Client.Hero>(jsonReader);
            }
        }
        
        /// <summary>
        /// GET api/Heroes/{id}
        /// </summary>
        public DemoWebApi.Controllers.Client.Hero DemoWebApi.Controllers.HeroesController.Get (DemoCoreWeb)(long id)
        {
            var requestUri = new Uri(this.baseUri, "api/Heroes/"+id);
            var responseMessage = this.client.GetAsync(requestUri).Result;
            responseMessage.EnsureSuccessStatusCode();
            var stream = responseMessage.Content.ReadAsStreamAsync().Result;
            using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
            {
            var serializer = new JsonSerializer();
            return serializer.Deserialize<DemoWebApi.Controllers.Client.Hero>(jsonReader);
            }
        }
        
        /// <summary>
        /// DELETE api/Heroes/{id}
        /// </summary>
        public async Task<void> DemoWebApi.Controllers.HeroesController.Delete (DemoCoreWeb)Async(long id)
        {
            var requestUri = new Uri(this.baseUri, "api/Heroes/"+id);
            var responseMessage = await client.DeleteAsync(requestUri);
            responseMessage.EnsureSuccessStatusCode();
            var stream = await responseMessage.Content.ReadAsStreamAsync();
            using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
            {
            var serializer = new JsonSerializer();
            return serializer.Deserialize<void>(jsonReader);
            }
        }
        
        /// <summary>
        /// DELETE api/Heroes/{id}
        /// </summary>
        public void DemoWebApi.Controllers.HeroesController.Delete (DemoCoreWeb)(long id)
        {
            var requestUri = new Uri(this.baseUri, "api/Heroes/"+id);
            var responseMessage = this.client.DeleteAsync(requestUri).Result;
            responseMessage.EnsureSuccessStatusCode();
            var stream = responseMessage.Content.ReadAsStreamAsync().Result;
            using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
            {
            var serializer = new JsonSerializer();
            return serializer.Deserialize<void>(jsonReader);
            }
        }
        
        /// <summary>
        /// POST api/Heroes
        /// </summary>
        public async Task<DemoWebApi.Controllers.Client.Hero> DemoWebApi.Controllers.HeroesController.Post (DemoCoreWeb)Async(string name)
        {
            var requestUri = new Uri(this.baseUri, "api/Heroes");
            using (var requestWriter = new System.IO.StringWriter())
            {
            var requestSerializer = JsonSerializer.Create();
            requestSerializer.Serialize(requestWriter, name);
            var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
            var responseMessage = await client.PostAsync(requestUri, content);
            responseMessage.EnsureSuccessStatusCode();
            var stream = await responseMessage.Content.ReadAsStreamAsync();
            using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
            {
            var serializer = new JsonSerializer();
            return serializer.Deserialize<DemoWebApi.Controllers.Client.Hero>(jsonReader);
            }
            }
        }
        
        /// <summary>
        /// POST api/Heroes
        /// </summary>
        public DemoWebApi.Controllers.Client.Hero DemoWebApi.Controllers.HeroesController.Post (DemoCoreWeb)(string name)
        {
            var requestUri = new Uri(this.baseUri, "api/Heroes");
            using (var requestWriter = new System.IO.StringWriter())
            {
            var requestSerializer = JsonSerializer.Create();
            requestSerializer.Serialize(requestWriter, name);
            var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
            var responseMessage = this.client.PostAsync(requestUri, content).Result;
            responseMessage.EnsureSuccessStatusCode();
            var stream = responseMessage.Content.ReadAsStreamAsync().Result;
            using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
            {
            var serializer = new JsonSerializer();
            return serializer.Deserialize<DemoWebApi.Controllers.Client.Hero>(jsonReader);
            }
            }
        }
        
        /// <summary>
        /// PUT api/Heroes
        /// </summary>
        public async Task<DemoWebApi.Controllers.Client.Hero> DemoWebApi.Controllers.HeroesController.Put (DemoCoreWeb)Async(DemoWebApi.Controllers.Client.Hero hero)
        {
            var requestUri = new Uri(this.baseUri, "api/Heroes");
            using (var requestWriter = new System.IO.StringWriter())
            {
            var requestSerializer = JsonSerializer.Create();
            requestSerializer.Serialize(requestWriter, hero);
            var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
            var responseMessage = await client.PutAsync(requestUri, content);
            responseMessage.EnsureSuccessStatusCode();
            var stream = await responseMessage.Content.ReadAsStreamAsync();
            using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
            {
            var serializer = new JsonSerializer();
            return serializer.Deserialize<DemoWebApi.Controllers.Client.Hero>(jsonReader);
            }
            }
        }
        
        /// <summary>
        /// PUT api/Heroes
        /// </summary>
        public DemoWebApi.Controllers.Client.Hero DemoWebApi.Controllers.HeroesController.Put (DemoCoreWeb)(DemoWebApi.Controllers.Client.Hero hero)
        {
            var requestUri = new Uri(this.baseUri, "api/Heroes");
            using (var requestWriter = new System.IO.StringWriter())
            {
            var requestSerializer = JsonSerializer.Create();
            requestSerializer.Serialize(requestWriter, hero);
            var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
            var responseMessage = this.client.PutAsync(requestUri, content).Result;
            responseMessage.EnsureSuccessStatusCode();
            var stream = responseMessage.Content.ReadAsStreamAsync().Result;
            using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
            {
            var serializer = new JsonSerializer();
            return serializer.Deserialize<DemoWebApi.Controllers.Client.Hero>(jsonReader);
            }
            }
        }
        
        /// <summary>
        /// GET api/Heroes/{name}
        /// </summary>
        public async Task<DemoWebApi.Controllers.Client.Hero[]> DemoWebApi.Controllers.HeroesController.Search (DemoCoreWeb)Async(string name)
        {
            var requestUri = new Uri(this.baseUri, "api/Heroes/"+Uri.EscapeDataString(name));
            var responseMessage = await client.GetAsync(requestUri);
            responseMessage.EnsureSuccessStatusCode();
            var stream = await responseMessage.Content.ReadAsStreamAsync();
            using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
            {
            var serializer = new JsonSerializer();
            return serializer.Deserialize<DemoWebApi.Controllers.Client.Hero[]>(jsonReader);
            }
        }
        
        /// <summary>
        /// GET api/Heroes/{name}
        /// </summary>
        public DemoWebApi.Controllers.Client.Hero[] DemoWebApi.Controllers.HeroesController.Search (DemoCoreWeb)(string name)
        {
            var requestUri = new Uri(this.baseUri, "api/Heroes/"+Uri.EscapeDataString(name));
            var responseMessage = this.client.GetAsync(requestUri).Result;
            responseMessage.EnsureSuccessStatusCode();
            var stream = responseMessage.Content.ReadAsStreamAsync().Result;
            using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
            {
            var serializer = new JsonSerializer();
            return serializer.Deserialize<DemoWebApi.Controllers.Client.Hero[]>(jsonReader);
            }
        }
        
        /// <summary>
        /// GET api/Heroes
        /// </summary>
        public async Task<DemoWebApi.Controllers.Client.Hero[]> DemoWebApi.Controllers.HeroesController.Search (DemoCoreWeb)Async(string name)
        {
            var requestUri = new Uri(this.baseUri, "api/Heroes");
            var responseMessage = await client.GetAsync(requestUri);
            responseMessage.EnsureSuccessStatusCode();
            var stream = await responseMessage.Content.ReadAsStreamAsync();
            using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
            {
            var serializer = new JsonSerializer();
            return serializer.Deserialize<DemoWebApi.Controllers.Client.Hero[]>(jsonReader);
            }
        }
        
        /// <summary>
        /// GET api/Heroes
        /// </summary>
        public DemoWebApi.Controllers.Client.Hero[] DemoWebApi.Controllers.HeroesController.Search (DemoCoreWeb)(string name)
        {
            var requestUri = new Uri(this.baseUri, "api/Heroes");
            var responseMessage = this.client.GetAsync(requestUri).Result;
            responseMessage.EnsureSuccessStatusCode();
            var stream = responseMessage.Content.ReadAsStreamAsync().Result;
            using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
            {
            var serializer = new JsonSerializer();
            return serializer.Deserialize<DemoWebApi.Controllers.Client.Hero[]>(jsonReader);
            }
        }
    }
    
    public partial class Home
    {
        
        private System.Net.Http.HttpClient client;
        
        private System.Uri baseUri;
        
        public Home(System.Net.Http.HttpClient client, System.Uri baseUri)
        {
            if (client == null)
                throw new ArgumentNullException("client", "Null HttpClient.");

            if (baseUri == null)
                throw new ArgumentNullException("baseUri", "Null baseUri");

            this.client = client;
            this.baseUri = baseUri;
        }
        
        /// <summary>
        /// GET api/Home
        /// </summary>
        public async Task DemoWebApi.Controllers.HomeController.Index (DemoCoreWeb)Async()
        {
            var requestUri = new Uri(this.baseUri, "api/Home");
            var responseMessage = await client.GetAsync(requestUri);
            responseMessage.EnsureSuccessStatusCode();
        }
        
        /// <summary>
        /// GET api/Home
        /// </summary>
        public void DemoWebApi.Controllers.HomeController.Index (DemoCoreWeb)()
        {
            var requestUri = new Uri(this.baseUri, "api/Home");
            var responseMessage = this.client.GetAsync(requestUri).Result;
            responseMessage.EnsureSuccessStatusCode();
        }
    }
    
    public partial class SuperDemo
    {
        
        private System.Net.Http.HttpClient client;
        
        private System.Uri baseUri;
        
        public SuperDemo(System.Net.Http.HttpClient client, System.Uri baseUri)
        {
            if (client == null)
                throw new ArgumentNullException("client", "Null HttpClient.");

            if (baseUri == null)
                throw new ArgumentNullException("baseUri", "Null baseUri");

            this.client = client;
            this.baseUri = baseUri;
        }
        
        /// <summary>
        /// GET api/SuperDemo/int
        /// </summary>
        public async Task<int> DemoWebApi.Controllers.SuperDemoController.GetIntSquareAsync (DemoCoreWeb)Async(int d)
        {
            var requestUri = new Uri(this.baseUri, "api/SuperDemo/int");
            var responseMessage = await client.GetAsync(requestUri);
            responseMessage.EnsureSuccessStatusCode();
            var stream = await responseMessage.Content.ReadAsStreamAsync();
            using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
            {
            var serializer = new JsonSerializer();
            return System.Int32.Parse(jsonReader.ReadAsString());
            }
        }
        
        /// <summary>
        /// GET api/SuperDemo/int
        /// </summary>
        public int DemoWebApi.Controllers.SuperDemoController.GetIntSquareAsync (DemoCoreWeb)(int d)
        {
            var requestUri = new Uri(this.baseUri, "api/SuperDemo/int");
            var responseMessage = this.client.GetAsync(requestUri).Result;
            responseMessage.EnsureSuccessStatusCode();
            var stream = responseMessage.Content.ReadAsStreamAsync().Result;
            using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
            {
            var serializer = new JsonSerializer();
            return System.Int32.Parse(jsonReader.ReadAsString());
            }
        }
        
        /// <summary>
        /// GET api/SuperDemo/decimal
        /// </summary>
        public async Task<decimal> DemoWebApi.Controllers.SuperDemoController.GetDecimalSquare (DemoCoreWeb)Async(decimal d)
        {
            var requestUri = new Uri(this.baseUri, "api/SuperDemo/decimal");
            var responseMessage = await client.GetAsync(requestUri);
            responseMessage.EnsureSuccessStatusCode();
            var stream = await responseMessage.Content.ReadAsStreamAsync();
            using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
            {
            var serializer = new JsonSerializer();
            return serializer.Deserialize<decimal>(jsonReader);
            }
        }
        
        /// <summary>
        /// GET api/SuperDemo/decimal
        /// </summary>
        public decimal DemoWebApi.Controllers.SuperDemoController.GetDecimalSquare (DemoCoreWeb)(decimal d)
        {
            var requestUri = new Uri(this.baseUri, "api/SuperDemo/decimal");
            var responseMessage = this.client.GetAsync(requestUri).Result;
            responseMessage.EnsureSuccessStatusCode();
            var stream = responseMessage.Content.ReadAsStreamAsync().Result;
            using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
            {
            var serializer = new JsonSerializer();
            return serializer.Deserialize<decimal>(jsonReader);
            }
        }
        
        /// <summary>
        /// GET api/SuperDemo/NullableDatetime
        /// </summary>
        public async Task<System.Nullable<System.DateTime>> DemoWebApi.Controllers.SuperDemoController.GetDateTime (DemoCoreWeb)Async(bool hasValue)
        {
            var requestUri = new Uri(this.baseUri, "api/SuperDemo/NullableDatetime");
            var responseMessage = await client.GetAsync(requestUri);
            responseMessage.EnsureSuccessStatusCode();
            var stream = await responseMessage.Content.ReadAsStreamAsync();
            using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
            {
            var serializer = new JsonSerializer();
            return serializer.Deserialize<System.Nullable<System.DateTime>>(jsonReader);
            }
        }
        
        /// <summary>
        /// GET api/SuperDemo/NullableDatetime
        /// </summary>
        public System.Nullable<System.DateTime> DemoWebApi.Controllers.SuperDemoController.GetDateTime (DemoCoreWeb)(bool hasValue)
        {
            var requestUri = new Uri(this.baseUri, "api/SuperDemo/NullableDatetime");
            var responseMessage = this.client.GetAsync(requestUri).Result;
            responseMessage.EnsureSuccessStatusCode();
            var stream = responseMessage.Content.ReadAsStreamAsync().Result;
            using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
            {
            var serializer = new JsonSerializer();
            return serializer.Deserialize<System.Nullable<System.DateTime>>(jsonReader);
            }
        }
        
        /// <summary>
        /// GET api/SuperDemo/NextYear
        /// </summary>
        public async Task<System.DateTime> DemoWebApi.Controllers.SuperDemoController.GetNextYear (DemoCoreWeb)Async(System.DateTime dt)
        {
            var requestUri = new Uri(this.baseUri, "api/SuperDemo/NextYear");
            var responseMessage = await client.GetAsync(requestUri);
            responseMessage.EnsureSuccessStatusCode();
            var stream = await responseMessage.Content.ReadAsStreamAsync();
            using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
            {
            var serializer = new JsonSerializer();
            return serializer.Deserialize<System.DateTime>(jsonReader);
            }
        }
        
        /// <summary>
        /// GET api/SuperDemo/NextYear
        /// </summary>
        public System.DateTime DemoWebApi.Controllers.SuperDemoController.GetNextYear (DemoCoreWeb)(System.DateTime dt)
        {
            var requestUri = new Uri(this.baseUri, "api/SuperDemo/NextYear");
            var responseMessage = this.client.GetAsync(requestUri).Result;
            responseMessage.EnsureSuccessStatusCode();
            var stream = responseMessage.Content.ReadAsStreamAsync().Result;
            using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
            {
            var serializer = new JsonSerializer();
            return serializer.Deserialize<System.DateTime>(jsonReader);
            }
        }
        
        /// <summary>
        /// GET api/SuperDemo/NextHour
        /// </summary>
        public async Task<System.DateTimeOffset> DemoWebApi.Controllers.SuperDemoController.GetNextHour (DemoCoreWeb)Async(System.DateTimeOffset dt)
        {
            var requestUri = new Uri(this.baseUri, "api/SuperDemo/NextHour");
            var responseMessage = await client.GetAsync(requestUri);
            responseMessage.EnsureSuccessStatusCode();
            var stream = await responseMessage.Content.ReadAsStreamAsync();
            using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
            {
            var serializer = new JsonSerializer();
            return serializer.Deserialize<System.DateTimeOffset>(jsonReader);
            }
        }
        
        /// <summary>
        /// GET api/SuperDemo/NextHour
        /// </summary>
        public System.DateTimeOffset DemoWebApi.Controllers.SuperDemoController.GetNextHour (DemoCoreWeb)(System.DateTimeOffset dt)
        {
            var requestUri = new Uri(this.baseUri, "api/SuperDemo/NextHour");
            var responseMessage = this.client.GetAsync(requestUri).Result;
            responseMessage.EnsureSuccessStatusCode();
            var stream = responseMessage.Content.ReadAsStreamAsync().Result;
            using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
            {
            var serializer = new JsonSerializer();
            return serializer.Deserialize<System.DateTimeOffset>(jsonReader);
            }
        }
        
        /// <summary>
        /// POST api/SuperDemo/NextYear
        /// </summary>
        public async Task<System.DateTime> DemoWebApi.Controllers.SuperDemoController.PostNextYear (DemoCoreWeb)Async(System.DateTime dt)
        {
            var requestUri = new Uri(this.baseUri, "api/SuperDemo/NextYear");
            using (var requestWriter = new System.IO.StringWriter())
            {
            var requestSerializer = JsonSerializer.Create();
            requestSerializer.Serialize(requestWriter, dt);
            var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
            var responseMessage = await client.PostAsync(requestUri, content);
            responseMessage.EnsureSuccessStatusCode();
            var stream = await responseMessage.Content.ReadAsStreamAsync();
            using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
            {
            var serializer = new JsonSerializer();
            return serializer.Deserialize<System.DateTime>(jsonReader);
            }
            }
        }
        
        /// <summary>
        /// POST api/SuperDemo/NextYear
        /// </summary>
        public System.DateTime DemoWebApi.Controllers.SuperDemoController.PostNextYear (DemoCoreWeb)(System.DateTime dt)
        {
            var requestUri = new Uri(this.baseUri, "api/SuperDemo/NextYear");
            using (var requestWriter = new System.IO.StringWriter())
            {
            var requestSerializer = JsonSerializer.Create();
            requestSerializer.Serialize(requestWriter, dt);
            var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
            var responseMessage = this.client.PostAsync(requestUri, content).Result;
            responseMessage.EnsureSuccessStatusCode();
            var stream = responseMessage.Content.ReadAsStreamAsync().Result;
            using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
            {
            var serializer = new JsonSerializer();
            return serializer.Deserialize<System.DateTime>(jsonReader);
            }
            }
        }
        
        /// <summary>
        /// GET api/SuperDemo/DateTimeOffset
        /// </summary>
        public async Task<System.DateTimeOffset> DemoWebApi.Controllers.SuperDemoController.GetDateTimeOffset (DemoCoreWeb)Async()
        {
            var requestUri = new Uri(this.baseUri, "api/SuperDemo/DateTimeOffset");
            var responseMessage = await client.GetAsync(requestUri);
            responseMessage.EnsureSuccessStatusCode();
            var stream = await responseMessage.Content.ReadAsStreamAsync();
            using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
            {
            var serializer = new JsonSerializer();
            return serializer.Deserialize<System.DateTimeOffset>(jsonReader);
            }
        }
        
        /// <summary>
        /// GET api/SuperDemo/DateTimeOffset
        /// </summary>
        public System.DateTimeOffset DemoWebApi.Controllers.SuperDemoController.GetDateTimeOffset (DemoCoreWeb)()
        {
            var requestUri = new Uri(this.baseUri, "api/SuperDemo/DateTimeOffset");
            var responseMessage = this.client.GetAsync(requestUri).Result;
            responseMessage.EnsureSuccessStatusCode();
            var stream = responseMessage.Content.ReadAsStreamAsync().Result;
            using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
            {
            var serializer = new JsonSerializer();
            return serializer.Deserialize<System.DateTimeOffset>(jsonReader);
            }
        }
        
        /// <summary>
        /// POST api/SuperDemo/DateTimeOffset
        /// </summary>
        public async Task<bool> DemoWebApi.Controllers.SuperDemoController.PostDateTimeOffset (DemoCoreWeb)Async(System.DateTimeOffset d)
        {
            var requestUri = new Uri(this.baseUri, "api/SuperDemo/DateTimeOffset");
            using (var requestWriter = new System.IO.StringWriter())
            {
            var requestSerializer = JsonSerializer.Create();
            requestSerializer.Serialize(requestWriter, d);
            var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
            var responseMessage = await client.PostAsync(requestUri, content);
            responseMessage.EnsureSuccessStatusCode();
            var stream = await responseMessage.Content.ReadAsStreamAsync();
            using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
            {
            var serializer = new JsonSerializer();
            return System.Boolean.Parse(jsonReader.ReadAsString());
            }
            }
        }
        
        /// <summary>
        /// POST api/SuperDemo/DateTimeOffset
        /// </summary>
        public bool DemoWebApi.Controllers.SuperDemoController.PostDateTimeOffset (DemoCoreWeb)(System.DateTimeOffset d)
        {
            var requestUri = new Uri(this.baseUri, "api/SuperDemo/DateTimeOffset");
            using (var requestWriter = new System.IO.StringWriter())
            {
            var requestSerializer = JsonSerializer.Create();
            requestSerializer.Serialize(requestWriter, d);
            var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
            var responseMessage = this.client.PostAsync(requestUri, content).Result;
            responseMessage.EnsureSuccessStatusCode();
            var stream = responseMessage.Content.ReadAsStreamAsync().Result;
            using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
            {
            var serializer = new JsonSerializer();
            return System.Boolean.Parse(jsonReader.ReadAsString());
            }
            }
        }
        
        /// <summary>
        /// POST api/SuperDemo/DateTimeOffsetNullable
        /// </summary>
        public async Task<bool> DemoWebApi.Controllers.SuperDemoController.PostDateTimeOffsetNullable (DemoCoreWeb)Async(System.Nullable<System.DateTimeOffset> d)
        {
            var requestUri = new Uri(this.baseUri, "api/SuperDemo/DateTimeOffsetNullable");
            using (var requestWriter = new System.IO.StringWriter())
            {
            var requestSerializer = JsonSerializer.Create();
            requestSerializer.Serialize(requestWriter, d);
            var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
            var responseMessage = await client.PostAsync(requestUri, content);
            responseMessage.EnsureSuccessStatusCode();
            var stream = await responseMessage.Content.ReadAsStreamAsync();
            using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
            {
            var serializer = new JsonSerializer();
            return System.Boolean.Parse(jsonReader.ReadAsString());
            }
            }
        }
        
        /// <summary>
        /// POST api/SuperDemo/DateTimeOffsetNullable
        /// </summary>
        public bool DemoWebApi.Controllers.SuperDemoController.PostDateTimeOffsetNullable (DemoCoreWeb)(System.Nullable<System.DateTimeOffset> d)
        {
            var requestUri = new Uri(this.baseUri, "api/SuperDemo/DateTimeOffsetNullable");
            using (var requestWriter = new System.IO.StringWriter())
            {
            var requestSerializer = JsonSerializer.Create();
            requestSerializer.Serialize(requestWriter, d);
            var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
            var responseMessage = this.client.PostAsync(requestUri, content).Result;
            responseMessage.EnsureSuccessStatusCode();
            var stream = responseMessage.Content.ReadAsStreamAsync().Result;
            using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
            {
            var serializer = new JsonSerializer();
            return System.Boolean.Parse(jsonReader.ReadAsString());
            }
            }
        }
        
        /// <summary>
        /// GET api/SuperDemo/NullableDecimal
        /// </summary>
        public async Task<System.Nullable<decimal>> DemoWebApi.Controllers.SuperDemoController.GetNullableDecimal (DemoCoreWeb)Async(bool hasValue)
        {
            var requestUri = new Uri(this.baseUri, "api/SuperDemo/NullableDecimal");
            var responseMessage = await client.GetAsync(requestUri);
            responseMessage.EnsureSuccessStatusCode();
            var stream = await responseMessage.Content.ReadAsStreamAsync();
            using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
            {
            var serializer = new JsonSerializer();
            return serializer.Deserialize<System.Nullable<decimal>>(jsonReader);
            }
        }
        
        /// <summary>
        /// GET api/SuperDemo/NullableDecimal
        /// </summary>
        public System.Nullable<decimal> DemoWebApi.Controllers.SuperDemoController.GetNullableDecimal (DemoCoreWeb)(bool hasValue)
        {
            var requestUri = new Uri(this.baseUri, "api/SuperDemo/NullableDecimal");
            var responseMessage = this.client.GetAsync(requestUri).Result;
            responseMessage.EnsureSuccessStatusCode();
            var stream = responseMessage.Content.ReadAsStreamAsync().Result;
            using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
            {
            var serializer = new JsonSerializer();
            return serializer.Deserialize<System.Nullable<decimal>>(jsonReader);
            }
        }
        
        /// <summary>
        /// GET api/SuperDemo/FloatZero
        /// </summary>
        public async Task<float> DemoWebApi.Controllers.SuperDemoController.GetFloatZero (DemoCoreWeb)Async()
        {
            var requestUri = new Uri(this.baseUri, "api/SuperDemo/FloatZero");
            var responseMessage = await client.GetAsync(requestUri);
            responseMessage.EnsureSuccessStatusCode();
            var stream = await responseMessage.Content.ReadAsStreamAsync();
            using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
            {
            var serializer = new JsonSerializer();
            return System.Single.Parse(jsonReader.ReadAsString());
            }
        }
        
        /// <summary>
        /// GET api/SuperDemo/FloatZero
        /// </summary>
        public float DemoWebApi.Controllers.SuperDemoController.GetFloatZero (DemoCoreWeb)()
        {
            var requestUri = new Uri(this.baseUri, "api/SuperDemo/FloatZero");
            var responseMessage = this.client.GetAsync(requestUri).Result;
            responseMessage.EnsureSuccessStatusCode();
            var stream = responseMessage.Content.ReadAsStreamAsync().Result;
            using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
            {
            var serializer = new JsonSerializer();
            return System.Single.Parse(jsonReader.ReadAsString());
            }
        }
        
        /// <summary>
        /// GET api/SuperDemo/DoubleZero
        /// </summary>
        public async Task<double> DemoWebApi.Controllers.SuperDemoController.GetDoubleZero (DemoCoreWeb)Async()
        {
            var requestUri = new Uri(this.baseUri, "api/SuperDemo/DoubleZero");
            var responseMessage = await client.GetAsync(requestUri);
            responseMessage.EnsureSuccessStatusCode();
            var stream = await responseMessage.Content.ReadAsStreamAsync();
            using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
            {
            var serializer = new JsonSerializer();
            return System.Double.Parse(jsonReader.ReadAsString());
            }
        }
        
        /// <summary>
        /// GET api/SuperDemo/DoubleZero
        /// </summary>
        public double DemoWebApi.Controllers.SuperDemoController.GetDoubleZero (DemoCoreWeb)()
        {
            var requestUri = new Uri(this.baseUri, "api/SuperDemo/DoubleZero");
            var responseMessage = this.client.GetAsync(requestUri).Result;
            responseMessage.EnsureSuccessStatusCode();
            var stream = responseMessage.Content.ReadAsStreamAsync().Result;
            using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
            {
            var serializer = new JsonSerializer();
            return System.Double.Parse(jsonReader.ReadAsString());
            }
        }
        
        /// <summary>
        /// GET api/SuperDemo/DecimalZero
        /// </summary>
        public async Task<decimal> DemoWebApi.Controllers.SuperDemoController.GetDecimalZero (DemoCoreWeb)Async()
        {
            var requestUri = new Uri(this.baseUri, "api/SuperDemo/DecimalZero");
            var responseMessage = await client.GetAsync(requestUri);
            responseMessage.EnsureSuccessStatusCode();
            var stream = await responseMessage.Content.ReadAsStreamAsync();
            using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
            {
            var serializer = new JsonSerializer();
            return serializer.Deserialize<decimal>(jsonReader);
            }
        }
        
        /// <summary>
        /// GET api/SuperDemo/DecimalZero
        /// </summary>
        public decimal DemoWebApi.Controllers.SuperDemoController.GetDecimalZero (DemoCoreWeb)()
        {
            var requestUri = new Uri(this.baseUri, "api/SuperDemo/DecimalZero");
            var responseMessage = this.client.GetAsync(requestUri).Result;
            responseMessage.EnsureSuccessStatusCode();
            var stream = responseMessage.Content.ReadAsStreamAsync().Result;
            using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
            {
            var serializer = new JsonSerializer();
            return serializer.Deserialize<decimal>(jsonReader);
            }
        }
        
        /// <summary>
        /// GET api/SuperDemo/NullString
        /// </summary>
        public async Task<string> DemoWebApi.Controllers.SuperDemoController.GetNullString (DemoCoreWeb)Async()
        {
            var requestUri = new Uri(this.baseUri, "api/SuperDemo/NullString");
            var responseMessage = await client.GetAsync(requestUri);
            responseMessage.EnsureSuccessStatusCode();
            var stream = await responseMessage.Content.ReadAsStreamAsync();
            using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
            {
            var serializer = new JsonSerializer();
            return serializer.Deserialize<string>(jsonReader);
            }
        }
        
        /// <summary>
        /// GET api/SuperDemo/NullString
        /// </summary>
        public string DemoWebApi.Controllers.SuperDemoController.GetNullString (DemoCoreWeb)()
        {
            var requestUri = new Uri(this.baseUri, "api/SuperDemo/NullString");
            var responseMessage = this.client.GetAsync(requestUri).Result;
            responseMessage.EnsureSuccessStatusCode();
            var stream = responseMessage.Content.ReadAsStreamAsync().Result;
            using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
            {
            var serializer = new JsonSerializer();
            return serializer.Deserialize<string>(jsonReader);
            }
        }
        
        /// <summary>
        /// GET api/SuperDemo/EmptyString
        /// </summary>
        public async Task<string> DemoWebApi.Controllers.SuperDemoController.GetEmptyString (DemoCoreWeb)Async()
        {
            var requestUri = new Uri(this.baseUri, "api/SuperDemo/EmptyString");
            var responseMessage = await client.GetAsync(requestUri);
            responseMessage.EnsureSuccessStatusCode();
            var stream = await responseMessage.Content.ReadAsStreamAsync();
            using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
            {
            var serializer = new JsonSerializer();
            return serializer.Deserialize<string>(jsonReader);
            }
        }
        
        /// <summary>
        /// GET api/SuperDemo/EmptyString
        /// </summary>
        public string DemoWebApi.Controllers.SuperDemoController.GetEmptyString (DemoCoreWeb)()
        {
            var requestUri = new Uri(this.baseUri, "api/SuperDemo/EmptyString");
            var responseMessage = this.client.GetAsync(requestUri).Result;
            responseMessage.EnsureSuccessStatusCode();
            var stream = responseMessage.Content.ReadAsStreamAsync().Result;
            using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
            {
            var serializer = new JsonSerializer();
            return serializer.Deserialize<string>(jsonReader);
            }
        }
        
        /// <summary>
        /// GET api/SuperDemo/NullObject
        /// </summary>
        public async Task<DemoWebApi.DemoData.Client.Person> DemoWebApi.Controllers.SuperDemoController.GetNullPerson (DemoCoreWeb)Async()
        {
            var requestUri = new Uri(this.baseUri, "api/SuperDemo/NullObject");
            var responseMessage = await client.GetAsync(requestUri);
            responseMessage.EnsureSuccessStatusCode();
            var stream = await responseMessage.Content.ReadAsStreamAsync();
            using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
            {
            var serializer = new JsonSerializer();
            return serializer.Deserialize<DemoWebApi.DemoData.Client.Person>(jsonReader);
            }
        }
        
        /// <summary>
        /// GET api/SuperDemo/NullObject
        /// </summary>
        public DemoWebApi.DemoData.Client.Person DemoWebApi.Controllers.SuperDemoController.GetNullPerson (DemoCoreWeb)()
        {
            var requestUri = new Uri(this.baseUri, "api/SuperDemo/NullObject");
            var responseMessage = this.client.GetAsync(requestUri).Result;
            responseMessage.EnsureSuccessStatusCode();
            var stream = responseMessage.Content.ReadAsStreamAsync().Result;
            using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
            {
            var serializer = new JsonSerializer();
            return serializer.Deserialize<DemoWebApi.DemoData.Client.Person>(jsonReader);
            }
        }
        
        /// <summary>
        /// GET api/SuperDemo/TextStream
        /// </summary>
        public async Task<System.Net.Http.HttpResponseMessage> DemoWebApi.Controllers.SuperDemoController.GetTextStream (DemoCoreWeb)Async()
        {
            var requestUri = new Uri(this.baseUri, "api/SuperDemo/TextStream");
            var responseMessage = await client.GetAsync(requestUri);
            responseMessage.EnsureSuccessStatusCode();
            return responseMessage;
        }
        
        /// <summary>
        /// GET api/SuperDemo/TextStream
        /// </summary>
        public System.Net.Http.HttpResponseMessage DemoWebApi.Controllers.SuperDemoController.GetTextStream (DemoCoreWeb)()
        {
            var requestUri = new Uri(this.baseUri, "api/SuperDemo/TextStream");
            var responseMessage = this.client.GetAsync(requestUri).Result;
            responseMessage.EnsureSuccessStatusCode();
            return responseMessage;
        }
        
        /// <summary>
        /// GET api/SuperDemo/ByteArray
        /// </summary>
        public async Task<byte[]> DemoWebApi.Controllers.SuperDemoController.GetByteArray (DemoCoreWeb)Async()
        {
            var requestUri = new Uri(this.baseUri, "api/SuperDemo/ByteArray");
            var responseMessage = await client.GetAsync(requestUri);
            responseMessage.EnsureSuccessStatusCode();
            var stream = await responseMessage.Content.ReadAsStreamAsync();
            using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
            {
            var serializer = new JsonSerializer();
            return serializer.Deserialize<byte[]>(jsonReader);
            }
        }
        
        /// <summary>
        /// GET api/SuperDemo/ByteArray
        /// </summary>
        public byte[] DemoWebApi.Controllers.SuperDemoController.GetByteArray (DemoCoreWeb)()
        {
            var requestUri = new Uri(this.baseUri, "api/SuperDemo/ByteArray");
            var responseMessage = this.client.GetAsync(requestUri).Result;
            responseMessage.EnsureSuccessStatusCode();
            var stream = responseMessage.Content.ReadAsStreamAsync().Result;
            using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
            {
            var serializer = new JsonSerializer();
            return serializer.Deserialize<byte[]>(jsonReader);
            }
        }
        
        /// <summary>
        /// GET api/SuperDemo/ActionResult
        /// </summary>
        public async Task DemoWebApi.Controllers.SuperDemoController.GetActionResult (DemoCoreWeb)Async()
        {
            var requestUri = new Uri(this.baseUri, "api/SuperDemo/ActionResult");
            var responseMessage = await client.GetAsync(requestUri);
            responseMessage.EnsureSuccessStatusCode();
        }
        
        /// <summary>
        /// GET api/SuperDemo/ActionResult
        /// </summary>
        public void DemoWebApi.Controllers.SuperDemoController.GetActionResult (DemoCoreWeb)()
        {
            var requestUri = new Uri(this.baseUri, "api/SuperDemo/ActionResult");
            var responseMessage = this.client.GetAsync(requestUri).Result;
            responseMessage.EnsureSuccessStatusCode();
        }
        
        /// <summary>
        /// GET api/SuperDemo/byte
        /// </summary>
        public async Task<byte> DemoWebApi.Controllers.SuperDemoController.Getbyte (DemoCoreWeb)Async()
        {
            var requestUri = new Uri(this.baseUri, "api/SuperDemo/byte");
            var responseMessage = await client.GetAsync(requestUri);
            responseMessage.EnsureSuccessStatusCode();
            var stream = await responseMessage.Content.ReadAsStreamAsync();
            using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
            {
            var serializer = new JsonSerializer();
            return System.Byte.Parse(jsonReader.ReadAsString());
            }
        }
        
        /// <summary>
        /// GET api/SuperDemo/byte
        /// </summary>
        public byte DemoWebApi.Controllers.SuperDemoController.Getbyte (DemoCoreWeb)()
        {
            var requestUri = new Uri(this.baseUri, "api/SuperDemo/byte");
            var responseMessage = this.client.GetAsync(requestUri).Result;
            responseMessage.EnsureSuccessStatusCode();
            var stream = responseMessage.Content.ReadAsStreamAsync().Result;
            using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
            {
            var serializer = new JsonSerializer();
            return System.Byte.Parse(jsonReader.ReadAsString());
            }
        }
        
        /// <summary>
        /// GET api/SuperDemo/sbyte
        /// </summary>
        public async Task<sbyte> DemoWebApi.Controllers.SuperDemoController.Getsbyte (DemoCoreWeb)Async()
        {
            var requestUri = new Uri(this.baseUri, "api/SuperDemo/sbyte");
            var responseMessage = await client.GetAsync(requestUri);
            responseMessage.EnsureSuccessStatusCode();
            var stream = await responseMessage.Content.ReadAsStreamAsync();
            using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
            {
            var serializer = new JsonSerializer();
            return System.SByte.Parse(jsonReader.ReadAsString());
            }
        }
        
        /// <summary>
        /// GET api/SuperDemo/sbyte
        /// </summary>
        public sbyte DemoWebApi.Controllers.SuperDemoController.Getsbyte (DemoCoreWeb)()
        {
            var requestUri = new Uri(this.baseUri, "api/SuperDemo/sbyte");
            var responseMessage = this.client.GetAsync(requestUri).Result;
            responseMessage.EnsureSuccessStatusCode();
            var stream = responseMessage.Content.ReadAsStreamAsync().Result;
            using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
            {
            var serializer = new JsonSerializer();
            return System.SByte.Parse(jsonReader.ReadAsString());
            }
        }
        
        /// <summary>
        /// GET api/SuperDemo/short
        /// </summary>
        public async Task<short> DemoWebApi.Controllers.SuperDemoController.GetShort (DemoCoreWeb)Async()
        {
            var requestUri = new Uri(this.baseUri, "api/SuperDemo/short");
            var responseMessage = await client.GetAsync(requestUri);
            responseMessage.EnsureSuccessStatusCode();
            var stream = await responseMessage.Content.ReadAsStreamAsync();
            using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
            {
            var serializer = new JsonSerializer();
            return System.Int16.Parse(jsonReader.ReadAsString());
            }
        }
        
        /// <summary>
        /// GET api/SuperDemo/short
        /// </summary>
        public short DemoWebApi.Controllers.SuperDemoController.GetShort (DemoCoreWeb)()
        {
            var requestUri = new Uri(this.baseUri, "api/SuperDemo/short");
            var responseMessage = this.client.GetAsync(requestUri).Result;
            responseMessage.EnsureSuccessStatusCode();
            var stream = responseMessage.Content.ReadAsStreamAsync().Result;
            using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
            {
            var serializer = new JsonSerializer();
            return System.Int16.Parse(jsonReader.ReadAsString());
            }
        }
        
        /// <summary>
        /// GET api/SuperDemo/ushort
        /// </summary>
        public async Task<ushort> DemoWebApi.Controllers.SuperDemoController.GetUShort (DemoCoreWeb)Async()
        {
            var requestUri = new Uri(this.baseUri, "api/SuperDemo/ushort");
            var responseMessage = await client.GetAsync(requestUri);
            responseMessage.EnsureSuccessStatusCode();
            var stream = await responseMessage.Content.ReadAsStreamAsync();
            using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
            {
            var serializer = new JsonSerializer();
            return System.UInt16.Parse(jsonReader.ReadAsString());
            }
        }
        
        /// <summary>
        /// GET api/SuperDemo/ushort
        /// </summary>
        public ushort DemoWebApi.Controllers.SuperDemoController.GetUShort (DemoCoreWeb)()
        {
            var requestUri = new Uri(this.baseUri, "api/SuperDemo/ushort");
            var responseMessage = this.client.GetAsync(requestUri).Result;
            responseMessage.EnsureSuccessStatusCode();
            var stream = responseMessage.Content.ReadAsStreamAsync().Result;
            using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
            {
            var serializer = new JsonSerializer();
            return System.UInt16.Parse(jsonReader.ReadAsString());
            }
        }
        
        /// <summary>
        /// GET api/SuperDemo/uint
        /// </summary>
        public async Task<uint> DemoWebApi.Controllers.SuperDemoController.GetUint (DemoCoreWeb)Async()
        {
            var requestUri = new Uri(this.baseUri, "api/SuperDemo/uint");
            var responseMessage = await client.GetAsync(requestUri);
            responseMessage.EnsureSuccessStatusCode();
            var stream = await responseMessage.Content.ReadAsStreamAsync();
            using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
            {
            var serializer = new JsonSerializer();
            return System.UInt32.Parse(jsonReader.ReadAsString());
            }
        }
        
        /// <summary>
        /// GET api/SuperDemo/uint
        /// </summary>
        public uint DemoWebApi.Controllers.SuperDemoController.GetUint (DemoCoreWeb)()
        {
            var requestUri = new Uri(this.baseUri, "api/SuperDemo/uint");
            var responseMessage = this.client.GetAsync(requestUri).Result;
            responseMessage.EnsureSuccessStatusCode();
            var stream = responseMessage.Content.ReadAsStreamAsync().Result;
            using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
            {
            var serializer = new JsonSerializer();
            return System.UInt32.Parse(jsonReader.ReadAsString());
            }
        }
        
        /// <summary>
        /// GET api/SuperDemo/ulong
        /// </summary>
        public async Task<ulong> DemoWebApi.Controllers.SuperDemoController.Getulong (DemoCoreWeb)Async()
        {
            var requestUri = new Uri(this.baseUri, "api/SuperDemo/ulong");
            var responseMessage = await client.GetAsync(requestUri);
            responseMessage.EnsureSuccessStatusCode();
            var stream = await responseMessage.Content.ReadAsStreamAsync();
            using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
            {
            var serializer = new JsonSerializer();
            return System.UInt64.Parse(jsonReader.ReadAsString());
            }
        }
        
        /// <summary>
        /// GET api/SuperDemo/ulong
        /// </summary>
        public ulong DemoWebApi.Controllers.SuperDemoController.Getulong (DemoCoreWeb)()
        {
            var requestUri = new Uri(this.baseUri, "api/SuperDemo/ulong");
            var responseMessage = this.client.GetAsync(requestUri).Result;
            responseMessage.EnsureSuccessStatusCode();
            var stream = responseMessage.Content.ReadAsStreamAsync().Result;
            using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
            {
            var serializer = new JsonSerializer();
            return System.UInt64.Parse(jsonReader.ReadAsString());
            }
        }
        
        /// <summary>
        /// GET api/SuperDemo/doulbe
        /// </summary>
        public async Task<double> DemoWebApi.Controllers.SuperDemoController.Getdouble (DemoCoreWeb)Async()
        {
            var requestUri = new Uri(this.baseUri, "api/SuperDemo/doulbe");
            var responseMessage = await client.GetAsync(requestUri);
            responseMessage.EnsureSuccessStatusCode();
            var stream = await responseMessage.Content.ReadAsStreamAsync();
            using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
            {
            var serializer = new JsonSerializer();
            return System.Double.Parse(jsonReader.ReadAsString());
            }
        }
        
        /// <summary>
        /// GET api/SuperDemo/doulbe
        /// </summary>
        public double DemoWebApi.Controllers.SuperDemoController.Getdouble (DemoCoreWeb)()
        {
            var requestUri = new Uri(this.baseUri, "api/SuperDemo/doulbe");
            var responseMessage = this.client.GetAsync(requestUri).Result;
            responseMessage.EnsureSuccessStatusCode();
            var stream = responseMessage.Content.ReadAsStreamAsync().Result;
            using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
            {
            var serializer = new JsonSerializer();
            return System.Double.Parse(jsonReader.ReadAsString());
            }
        }
        
        /// <summary>
        /// GET api/SuperDemo/decimal
        /// </summary>
        public async Task<decimal> DemoWebApi.Controllers.SuperDemoController.GetDecimal (DemoCoreWeb)Async()
        {
            var requestUri = new Uri(this.baseUri, "api/SuperDemo/decimal");
            var responseMessage = await client.GetAsync(requestUri);
            responseMessage.EnsureSuccessStatusCode();
            var stream = await responseMessage.Content.ReadAsStreamAsync();
            using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
            {
            var serializer = new JsonSerializer();
            return serializer.Deserialize<decimal>(jsonReader);
            }
        }
        
        /// <summary>
        /// GET api/SuperDemo/decimal
        /// </summary>
        public decimal DemoWebApi.Controllers.SuperDemoController.GetDecimal (DemoCoreWeb)()
        {
            var requestUri = new Uri(this.baseUri, "api/SuperDemo/decimal");
            var responseMessage = this.client.GetAsync(requestUri).Result;
            responseMessage.EnsureSuccessStatusCode();
            var stream = responseMessage.Content.ReadAsStreamAsync().Result;
            using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
            {
            var serializer = new JsonSerializer();
            return serializer.Deserialize<decimal>(jsonReader);
            }
        }
        
        /// <summary>
        /// GET api/SuperDemo/char
        /// </summary>
        public async Task<char> DemoWebApi.Controllers.SuperDemoController.GetChar (DemoCoreWeb)Async()
        {
            var requestUri = new Uri(this.baseUri, "api/SuperDemo/char");
            var responseMessage = await client.GetAsync(requestUri);
            responseMessage.EnsureSuccessStatusCode();
            var stream = await responseMessage.Content.ReadAsStreamAsync();
            using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
            {
            var serializer = new JsonSerializer();
            return serializer.Deserialize<char>(jsonReader);
            }
        }
        
        /// <summary>
        /// GET api/SuperDemo/char
        /// </summary>
        public char DemoWebApi.Controllers.SuperDemoController.GetChar (DemoCoreWeb)()
        {
            var requestUri = new Uri(this.baseUri, "api/SuperDemo/char");
            var responseMessage = this.client.GetAsync(requestUri).Result;
            responseMessage.EnsureSuccessStatusCode();
            var stream = responseMessage.Content.ReadAsStreamAsync().Result;
            using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
            {
            var serializer = new JsonSerializer();
            return serializer.Deserialize<char>(jsonReader);
            }
        }
        
        /// <summary>
        /// GET api/SuperDemo/bool
        /// </summary>
        public async Task<bool> DemoWebApi.Controllers.SuperDemoController.GetBool (DemoCoreWeb)Async()
        {
            var requestUri = new Uri(this.baseUri, "api/SuperDemo/bool");
            var responseMessage = await client.GetAsync(requestUri);
            responseMessage.EnsureSuccessStatusCode();
            var stream = await responseMessage.Content.ReadAsStreamAsync();
            using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
            {
            var serializer = new JsonSerializer();
            return System.Boolean.Parse(jsonReader.ReadAsString());
            }
        }
        
        /// <summary>
        /// GET api/SuperDemo/bool
        /// </summary>
        public bool DemoWebApi.Controllers.SuperDemoController.GetBool (DemoCoreWeb)()
        {
            var requestUri = new Uri(this.baseUri, "api/SuperDemo/bool");
            var responseMessage = this.client.GetAsync(requestUri).Result;
            responseMessage.EnsureSuccessStatusCode();
            var stream = responseMessage.Content.ReadAsStreamAsync().Result;
            using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
            {
            var serializer = new JsonSerializer();
            return System.Boolean.Parse(jsonReader.ReadAsString());
            }
        }
        
        /// <summary>
        /// GET api/SuperDemo/int2d
        /// </summary>
        public async Task<int[,]> DemoWebApi.Controllers.SuperDemoController.GetInt2D (DemoCoreWeb)Async()
        {
            var requestUri = new Uri(this.baseUri, "api/SuperDemo/int2d");
            var responseMessage = await client.GetAsync(requestUri);
            responseMessage.EnsureSuccessStatusCode();
            var stream = await responseMessage.Content.ReadAsStreamAsync();
            using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
            {
            var serializer = new JsonSerializer();
            return serializer.Deserialize<int[,]>(jsonReader);
            }
        }
        
        /// <summary>
        /// GET api/SuperDemo/int2d
        /// </summary>
        public int[,] DemoWebApi.Controllers.SuperDemoController.GetInt2D (DemoCoreWeb)()
        {
            var requestUri = new Uri(this.baseUri, "api/SuperDemo/int2d");
            var responseMessage = this.client.GetAsync(requestUri).Result;
            responseMessage.EnsureSuccessStatusCode();
            var stream = responseMessage.Content.ReadAsStreamAsync().Result;
            using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
            {
            var serializer = new JsonSerializer();
            return serializer.Deserialize<int[,]>(jsonReader);
            }
        }
        
        /// <summary>
        /// GET api/SuperDemo/int2dJagged
        /// </summary>
        public async Task<int[][]> DemoWebApi.Controllers.SuperDemoController.GetInt2DJagged (DemoCoreWeb)Async()
        {
            var requestUri = new Uri(this.baseUri, "api/SuperDemo/int2dJagged");
            var responseMessage = await client.GetAsync(requestUri);
            responseMessage.EnsureSuccessStatusCode();
            var stream = await responseMessage.Content.ReadAsStreamAsync();
            using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
            {
            var serializer = new JsonSerializer();
            return serializer.Deserialize<int[][]>(jsonReader);
            }
        }
        
        /// <summary>
        /// GET api/SuperDemo/int2dJagged
        /// </summary>
        public int[][] DemoWebApi.Controllers.SuperDemoController.GetInt2DJagged (DemoCoreWeb)()
        {
            var requestUri = new Uri(this.baseUri, "api/SuperDemo/int2dJagged");
            var responseMessage = this.client.GetAsync(requestUri).Result;
            responseMessage.EnsureSuccessStatusCode();
            var stream = responseMessage.Content.ReadAsStreamAsync().Result;
            using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
            {
            var serializer = new JsonSerializer();
            return serializer.Deserialize<int[][]>(jsonReader);
            }
        }
        
        /// <summary>
        /// POST api/SuperDemo/int2d
        /// </summary>
        public async Task<bool> DemoWebApi.Controllers.SuperDemoController.PostInt2D (DemoCoreWeb)Async(int[,] a)
        {
            var requestUri = new Uri(this.baseUri, "api/SuperDemo/int2d");
            using (var requestWriter = new System.IO.StringWriter())
            {
            var requestSerializer = JsonSerializer.Create();
            requestSerializer.Serialize(requestWriter, a);
            var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
            var responseMessage = await client.PostAsync(requestUri, content);
            responseMessage.EnsureSuccessStatusCode();
            var stream = await responseMessage.Content.ReadAsStreamAsync();
            using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
            {
            var serializer = new JsonSerializer();
            return System.Boolean.Parse(jsonReader.ReadAsString());
            }
            }
        }
        
        /// <summary>
        /// POST api/SuperDemo/int2d
        /// </summary>
        public bool DemoWebApi.Controllers.SuperDemoController.PostInt2D (DemoCoreWeb)(int[,] a)
        {
            var requestUri = new Uri(this.baseUri, "api/SuperDemo/int2d");
            using (var requestWriter = new System.IO.StringWriter())
            {
            var requestSerializer = JsonSerializer.Create();
            requestSerializer.Serialize(requestWriter, a);
            var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
            var responseMessage = this.client.PostAsync(requestUri, content).Result;
            responseMessage.EnsureSuccessStatusCode();
            var stream = responseMessage.Content.ReadAsStreamAsync().Result;
            using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
            {
            var serializer = new JsonSerializer();
            return System.Boolean.Parse(jsonReader.ReadAsString());
            }
            }
        }
        
        /// <summary>
        /// POST api/SuperDemo/int2djagged
        /// </summary>
        public async Task<bool> DemoWebApi.Controllers.SuperDemoController.PostInt2DJagged (DemoCoreWeb)Async(int[][] a)
        {
            var requestUri = new Uri(this.baseUri, "api/SuperDemo/int2djagged");
            using (var requestWriter = new System.IO.StringWriter())
            {
            var requestSerializer = JsonSerializer.Create();
            requestSerializer.Serialize(requestWriter, a);
            var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
            var responseMessage = await client.PostAsync(requestUri, content);
            responseMessage.EnsureSuccessStatusCode();
            var stream = await responseMessage.Content.ReadAsStreamAsync();
            using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
            {
            var serializer = new JsonSerializer();
            return System.Boolean.Parse(jsonReader.ReadAsString());
            }
            }
        }
        
        /// <summary>
        /// POST api/SuperDemo/int2djagged
        /// </summary>
        public bool DemoWebApi.Controllers.SuperDemoController.PostInt2DJagged (DemoCoreWeb)(int[][] a)
        {
            var requestUri = new Uri(this.baseUri, "api/SuperDemo/int2djagged");
            using (var requestWriter = new System.IO.StringWriter())
            {
            var requestSerializer = JsonSerializer.Create();
            requestSerializer.Serialize(requestWriter, a);
            var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
            var responseMessage = this.client.PostAsync(requestUri, content).Result;
            responseMessage.EnsureSuccessStatusCode();
            var stream = responseMessage.Content.ReadAsStreamAsync().Result;
            using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
            {
            var serializer = new JsonSerializer();
            return System.Boolean.Parse(jsonReader.ReadAsString());
            }
            }
        }
        
        /// <summary>
        /// POST api/SuperDemo/intArray
        /// </summary>
        public async Task<bool> DemoWebApi.Controllers.SuperDemoController.PostIntArray (DemoCoreWeb)Async(int[] a)
        {
            var requestUri = new Uri(this.baseUri, "api/SuperDemo/intArray");
            using (var requestWriter = new System.IO.StringWriter())
            {
            var requestSerializer = JsonSerializer.Create();
            requestSerializer.Serialize(requestWriter, a);
            var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
            var responseMessage = await client.PostAsync(requestUri, content);
            responseMessage.EnsureSuccessStatusCode();
            var stream = await responseMessage.Content.ReadAsStreamAsync();
            using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
            {
            var serializer = new JsonSerializer();
            return System.Boolean.Parse(jsonReader.ReadAsString());
            }
            }
        }
        
        /// <summary>
        /// POST api/SuperDemo/intArray
        /// </summary>
        public bool DemoWebApi.Controllers.SuperDemoController.PostIntArray (DemoCoreWeb)(int[] a)
        {
            var requestUri = new Uri(this.baseUri, "api/SuperDemo/intArray");
            using (var requestWriter = new System.IO.StringWriter())
            {
            var requestSerializer = JsonSerializer.Create();
            requestSerializer.Serialize(requestWriter, a);
            var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
            var responseMessage = this.client.PostAsync(requestUri, content).Result;
            responseMessage.EnsureSuccessStatusCode();
            var stream = responseMessage.Content.ReadAsStreamAsync().Result;
            using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
            {
            var serializer = new JsonSerializer();
            return System.Boolean.Parse(jsonReader.ReadAsString());
            }
            }
        }
        
        /// <summary>
        /// GET api/SuperDemo/intArray
        /// </summary>
        public async Task<int[]> DemoWebApi.Controllers.SuperDemoController.GetIntArray (DemoCoreWeb)Async()
        {
            var requestUri = new Uri(this.baseUri, "api/SuperDemo/intArray");
            var responseMessage = await client.GetAsync(requestUri);
            responseMessage.EnsureSuccessStatusCode();
            var stream = await responseMessage.Content.ReadAsStreamAsync();
            using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
            {
            var serializer = new JsonSerializer();
            return serializer.Deserialize<int[]>(jsonReader);
            }
        }
        
        /// <summary>
        /// GET api/SuperDemo/intArray
        /// </summary>
        public int[] DemoWebApi.Controllers.SuperDemoController.GetIntArray (DemoCoreWeb)()
        {
            var requestUri = new Uri(this.baseUri, "api/SuperDemo/intArray");
            var responseMessage = this.client.GetAsync(requestUri).Result;
            responseMessage.EnsureSuccessStatusCode();
            var stream = responseMessage.Content.ReadAsStreamAsync().Result;
            using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
            {
            var serializer = new JsonSerializer();
            return serializer.Deserialize<int[]>(jsonReader);
            }
        }
        
        /// <summary>
        /// GET api/SuperDemo/AnonymousDynamic
        /// </summary>
        public async Task DemoWebApi.Controllers.SuperDemoController.GetAnonymousDynamic (DemoCoreWeb)Async()
        {
            var requestUri = new Uri(this.baseUri, "api/SuperDemo/AnonymousDynamic");
            var responseMessage = await client.GetAsync(requestUri);
            responseMessage.EnsureSuccessStatusCode();
        }
        
        /// <summary>
        /// GET api/SuperDemo/AnonymousDynamic
        /// </summary>
        public void DemoWebApi.Controllers.SuperDemoController.GetAnonymousDynamic (DemoCoreWeb)()
        {
            var requestUri = new Uri(this.baseUri, "api/SuperDemo/AnonymousDynamic");
            var responseMessage = this.client.GetAsync(requestUri).Result;
            responseMessage.EnsureSuccessStatusCode();
        }
        
        /// <summary>
        /// GET api/SuperDemo/AnonymousObject
        /// </summary>
        public async Task DemoWebApi.Controllers.SuperDemoController.GetAnonymousObject (DemoCoreWeb)Async()
        {
            var requestUri = new Uri(this.baseUri, "api/SuperDemo/AnonymousObject");
            var responseMessage = await client.GetAsync(requestUri);
            responseMessage.EnsureSuccessStatusCode();
        }
        
        /// <summary>
        /// GET api/SuperDemo/AnonymousObject
        /// </summary>
        public void DemoWebApi.Controllers.SuperDemoController.GetAnonymousObject (DemoCoreWeb)()
        {
            var requestUri = new Uri(this.baseUri, "api/SuperDemo/AnonymousObject");
            var responseMessage = this.client.GetAsync(requestUri).Result;
            responseMessage.EnsureSuccessStatusCode();
        }
        
        /// <summary>
        /// POST api/SuperDemo/AnonymousObject
        /// </summary>
        public async Task DemoWebApi.Controllers.SuperDemoController.PostAnonymousObject (DemoCoreWeb)Async(Newtonsoft.Json.Linq.JObject obj)
        {
            var requestUri = new Uri(this.baseUri, "api/SuperDemo/AnonymousObject");
            using (var requestWriter = new System.IO.StringWriter())
            {
            var requestSerializer = JsonSerializer.Create();
            requestSerializer.Serialize(requestWriter, obj);
            var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
            var responseMessage = await client.PostAsync(requestUri, content);
            responseMessage.EnsureSuccessStatusCode();
            }
        }
        
        /// <summary>
        /// POST api/SuperDemo/AnonymousObject
        /// </summary>
        public void DemoWebApi.Controllers.SuperDemoController.PostAnonymousObject (DemoCoreWeb)(Newtonsoft.Json.Linq.JObject obj)
        {
            var requestUri = new Uri(this.baseUri, "api/SuperDemo/AnonymousObject");
            using (var requestWriter = new System.IO.StringWriter())
            {
            var requestSerializer = JsonSerializer.Create();
            requestSerializer.Serialize(requestWriter, obj);
            var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
            var responseMessage = this.client.PostAsync(requestUri, content).Result;
            responseMessage.EnsureSuccessStatusCode();
            }
        }
        
        /// <summary>
        /// GET api/SuperDemo/StringStringDic
        /// </summary>
        public async Task<System.Collections.Generic.Dictionary<string, string>> DemoWebApi.Controllers.SuperDemoController.GetDictionary (DemoCoreWeb)Async()
        {
            var requestUri = new Uri(this.baseUri, "api/SuperDemo/StringStringDic");
            var responseMessage = await client.GetAsync(requestUri);
            responseMessage.EnsureSuccessStatusCode();
            var stream = await responseMessage.Content.ReadAsStreamAsync();
            using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
            {
            var serializer = new JsonSerializer();
            return serializer.Deserialize<System.Collections.Generic.Dictionary<string, string>>(jsonReader);
            }
        }
        
        /// <summary>
        /// GET api/SuperDemo/StringStringDic
        /// </summary>
        public System.Collections.Generic.Dictionary<string, string> DemoWebApi.Controllers.SuperDemoController.GetDictionary (DemoCoreWeb)()
        {
            var requestUri = new Uri(this.baseUri, "api/SuperDemo/StringStringDic");
            var responseMessage = this.client.GetAsync(requestUri).Result;
            responseMessage.EnsureSuccessStatusCode();
            var stream = responseMessage.Content.ReadAsStreamAsync().Result;
            using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
            {
            var serializer = new JsonSerializer();
            return serializer.Deserialize<System.Collections.Generic.Dictionary<string, string>>(jsonReader);
            }
        }
        
        /// <summary>
        /// GET api/SuperDemo/StringPersonDic
        /// </summary>
        public async Task<System.Collections.Generic.Dictionary<string, DemoWebApi.DemoData.Client.Person>> DemoWebApi.Controllers.SuperDemoController.GetDictionaryOfPeople (DemoCoreWeb)Async()
        {
            var requestUri = new Uri(this.baseUri, "api/SuperDemo/StringPersonDic");
            var responseMessage = await client.GetAsync(requestUri);
            responseMessage.EnsureSuccessStatusCode();
            var stream = await responseMessage.Content.ReadAsStreamAsync();
            using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
            {
            var serializer = new JsonSerializer();
            return serializer.Deserialize<System.Collections.Generic.Dictionary<string, DemoWebApi.DemoData.Client.Person>>(jsonReader);
            }
        }
        
        /// <summary>
        /// GET api/SuperDemo/StringPersonDic
        /// </summary>
        public System.Collections.Generic.Dictionary<string, DemoWebApi.DemoData.Client.Person> DemoWebApi.Controllers.SuperDemoController.GetDictionaryOfPeople (DemoCoreWeb)()
        {
            var requestUri = new Uri(this.baseUri, "api/SuperDemo/StringPersonDic");
            var responseMessage = this.client.GetAsync(requestUri).Result;
            responseMessage.EnsureSuccessStatusCode();
            var stream = responseMessage.Content.ReadAsStreamAsync().Result;
            using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
            {
            var serializer = new JsonSerializer();
            return serializer.Deserialize<System.Collections.Generic.Dictionary<string, DemoWebApi.DemoData.Client.Person>>(jsonReader);
            }
        }
        
        /// <summary>
        /// POST api/SuperDemo/StringPersonDic
        /// </summary>
        public async Task<int> DemoWebApi.Controllers.SuperDemoController.PostDictionary (DemoCoreWeb)Async(System.Collections.Generic.Dictionary<string, DemoWebApi.DemoData.Client.Person> dic)
        {
            var requestUri = new Uri(this.baseUri, "api/SuperDemo/StringPersonDic");
            using (var requestWriter = new System.IO.StringWriter())
            {
            var requestSerializer = JsonSerializer.Create();
            requestSerializer.Serialize(requestWriter, dic);
            var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
            var responseMessage = await client.PostAsync(requestUri, content);
            responseMessage.EnsureSuccessStatusCode();
            var stream = await responseMessage.Content.ReadAsStreamAsync();
            using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
            {
            var serializer = new JsonSerializer();
            return System.Int32.Parse(jsonReader.ReadAsString());
            }
            }
        }
        
        /// <summary>
        /// POST api/SuperDemo/StringPersonDic
        /// </summary>
        public int DemoWebApi.Controllers.SuperDemoController.PostDictionary (DemoCoreWeb)(System.Collections.Generic.Dictionary<string, DemoWebApi.DemoData.Client.Person> dic)
        {
            var requestUri = new Uri(this.baseUri, "api/SuperDemo/StringPersonDic");
            using (var requestWriter = new System.IO.StringWriter())
            {
            var requestSerializer = JsonSerializer.Create();
            requestSerializer.Serialize(requestWriter, dic);
            var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
            var responseMessage = this.client.PostAsync(requestUri, content).Result;
            responseMessage.EnsureSuccessStatusCode();
            var stream = responseMessage.Content.ReadAsStreamAsync().Result;
            using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
            {
            var serializer = new JsonSerializer();
            return System.Int32.Parse(jsonReader.ReadAsString());
            }
            }
        }
        
        /// <summary>
        /// GET api/SuperDemo/KeyValuePair
        /// </summary>
        public async Task<System.Collections.Generic.KeyValuePair<string, DemoWebApi.DemoData.Client.Person>> DemoWebApi.Controllers.SuperDemoController.GetKeyhValuePair (DemoCoreWeb)Async()
        {
            var requestUri = new Uri(this.baseUri, "api/SuperDemo/KeyValuePair");
            var responseMessage = await client.GetAsync(requestUri);
            responseMessage.EnsureSuccessStatusCode();
            var stream = await responseMessage.Content.ReadAsStreamAsync();
            using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
            {
            var serializer = new JsonSerializer();
            return serializer.Deserialize<System.Collections.Generic.KeyValuePair<string, DemoWebApi.DemoData.Client.Person>>(jsonReader);
            }
        }
        
        /// <summary>
        /// GET api/SuperDemo/KeyValuePair
        /// </summary>
        public System.Collections.Generic.KeyValuePair<string, DemoWebApi.DemoData.Client.Person> DemoWebApi.Controllers.SuperDemoController.GetKeyhValuePair (DemoCoreWeb)()
        {
            var requestUri = new Uri(this.baseUri, "api/SuperDemo/KeyValuePair");
            var responseMessage = this.client.GetAsync(requestUri).Result;
            responseMessage.EnsureSuccessStatusCode();
            var stream = responseMessage.Content.ReadAsStreamAsync().Result;
            using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
            {
            var serializer = new JsonSerializer();
            return serializer.Deserialize<System.Collections.Generic.KeyValuePair<string, DemoWebApi.DemoData.Client.Person>>(jsonReader);
            }
        }
        
        /// <summary>
        /// GET api/SuperDemo/ICollection
        /// </summary>
        public async Task<DemoWebApi.DemoData.Client.Person[]> DemoWebApi.Controllers.SuperDemoController.GetICollection (DemoCoreWeb)Async()
        {
            var requestUri = new Uri(this.baseUri, "api/SuperDemo/ICollection");
            var responseMessage = await client.GetAsync(requestUri);
            responseMessage.EnsureSuccessStatusCode();
            var stream = await responseMessage.Content.ReadAsStreamAsync();
            using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
            {
            var serializer = new JsonSerializer();
            return serializer.Deserialize<DemoWebApi.DemoData.Client.Person[]>(jsonReader);
            }
        }
        
        /// <summary>
        /// GET api/SuperDemo/ICollection
        /// </summary>
        public DemoWebApi.DemoData.Client.Person[] DemoWebApi.Controllers.SuperDemoController.GetICollection (DemoCoreWeb)()
        {
            var requestUri = new Uri(this.baseUri, "api/SuperDemo/ICollection");
            var responseMessage = this.client.GetAsync(requestUri).Result;
            responseMessage.EnsureSuccessStatusCode();
            var stream = responseMessage.Content.ReadAsStreamAsync().Result;
            using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
            {
            var serializer = new JsonSerializer();
            return serializer.Deserialize<DemoWebApi.DemoData.Client.Person[]>(jsonReader);
            }
        }
        
        /// <summary>
        /// GET api/SuperDemo/IList
        /// </summary>
        public async Task<DemoWebApi.DemoData.Client.Person[]> DemoWebApi.Controllers.SuperDemoController.GetIList (DemoCoreWeb)Async()
        {
            var requestUri = new Uri(this.baseUri, "api/SuperDemo/IList");
            var responseMessage = await client.GetAsync(requestUri);
            responseMessage.EnsureSuccessStatusCode();
            var stream = await responseMessage.Content.ReadAsStreamAsync();
            using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
            {
            var serializer = new JsonSerializer();
            return serializer.Deserialize<DemoWebApi.DemoData.Client.Person[]>(jsonReader);
            }
        }
        
        /// <summary>
        /// GET api/SuperDemo/IList
        /// </summary>
        public DemoWebApi.DemoData.Client.Person[] DemoWebApi.Controllers.SuperDemoController.GetIList (DemoCoreWeb)()
        {
            var requestUri = new Uri(this.baseUri, "api/SuperDemo/IList");
            var responseMessage = this.client.GetAsync(requestUri).Result;
            responseMessage.EnsureSuccessStatusCode();
            var stream = responseMessage.Content.ReadAsStreamAsync().Result;
            using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
            {
            var serializer = new JsonSerializer();
            return serializer.Deserialize<DemoWebApi.DemoData.Client.Person[]>(jsonReader);
            }
        }
        
        /// <summary>
        /// GET api/SuperDemo/IReadOnlyList
        /// </summary>
        public async Task<DemoWebApi.DemoData.Client.Person[]> DemoWebApi.Controllers.SuperDemoController.GetIReadOnlyList (DemoCoreWeb)Async()
        {
            var requestUri = new Uri(this.baseUri, "api/SuperDemo/IReadOnlyList");
            var responseMessage = await client.GetAsync(requestUri);
            responseMessage.EnsureSuccessStatusCode();
            var stream = await responseMessage.Content.ReadAsStreamAsync();
            using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
            {
            var serializer = new JsonSerializer();
            return serializer.Deserialize<DemoWebApi.DemoData.Client.Person[]>(jsonReader);
            }
        }
        
        /// <summary>
        /// GET api/SuperDemo/IReadOnlyList
        /// </summary>
        public DemoWebApi.DemoData.Client.Person[] DemoWebApi.Controllers.SuperDemoController.GetIReadOnlyList (DemoCoreWeb)()
        {
            var requestUri = new Uri(this.baseUri, "api/SuperDemo/IReadOnlyList");
            var responseMessage = this.client.GetAsync(requestUri).Result;
            responseMessage.EnsureSuccessStatusCode();
            var stream = responseMessage.Content.ReadAsStreamAsync().Result;
            using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
            {
            var serializer = new JsonSerializer();
            return serializer.Deserialize<DemoWebApi.DemoData.Client.Person[]>(jsonReader);
            }
        }
        
        /// <summary>
        /// GET api/SuperDemo/IReadOnlyCollection
        /// </summary>
        public async Task<DemoWebApi.DemoData.Client.Person[]> DemoWebApi.Controllers.SuperDemoController.GetIReadOnlyCollection (DemoCoreWeb)Async()
        {
            var requestUri = new Uri(this.baseUri, "api/SuperDemo/IReadOnlyCollection");
            var responseMessage = await client.GetAsync(requestUri);
            responseMessage.EnsureSuccessStatusCode();
            var stream = await responseMessage.Content.ReadAsStreamAsync();
            using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
            {
            var serializer = new JsonSerializer();
            return serializer.Deserialize<DemoWebApi.DemoData.Client.Person[]>(jsonReader);
            }
        }
        
        /// <summary>
        /// GET api/SuperDemo/IReadOnlyCollection
        /// </summary>
        public DemoWebApi.DemoData.Client.Person[] DemoWebApi.Controllers.SuperDemoController.GetIReadOnlyCollection (DemoCoreWeb)()
        {
            var requestUri = new Uri(this.baseUri, "api/SuperDemo/IReadOnlyCollection");
            var responseMessage = this.client.GetAsync(requestUri).Result;
            responseMessage.EnsureSuccessStatusCode();
            var stream = responseMessage.Content.ReadAsStreamAsync().Result;
            using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
            {
            var serializer = new JsonSerializer();
            return serializer.Deserialize<DemoWebApi.DemoData.Client.Person[]>(jsonReader);
            }
        }
        
        /// <summary>
        /// GET api/SuperDemo/List
        /// </summary>
        public async Task<DemoWebApi.DemoData.Client.Person[]> DemoWebApi.Controllers.SuperDemoController.GetList (DemoCoreWeb)Async()
        {
            var requestUri = new Uri(this.baseUri, "api/SuperDemo/List");
            var responseMessage = await client.GetAsync(requestUri);
            responseMessage.EnsureSuccessStatusCode();
            var stream = await responseMessage.Content.ReadAsStreamAsync();
            using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
            {
            var serializer = new JsonSerializer();
            return serializer.Deserialize<DemoWebApi.DemoData.Client.Person[]>(jsonReader);
            }
        }
        
        /// <summary>
        /// GET api/SuperDemo/List
        /// </summary>
        public DemoWebApi.DemoData.Client.Person[] DemoWebApi.Controllers.SuperDemoController.GetList (DemoCoreWeb)()
        {
            var requestUri = new Uri(this.baseUri, "api/SuperDemo/List");
            var responseMessage = this.client.GetAsync(requestUri).Result;
            responseMessage.EnsureSuccessStatusCode();
            var stream = responseMessage.Content.ReadAsStreamAsync().Result;
            using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
            {
            var serializer = new JsonSerializer();
            return serializer.Deserialize<DemoWebApi.DemoData.Client.Person[]>(jsonReader);
            }
        }
        
        /// <summary>
        /// GET api/SuperDemo/Collection
        /// </summary>
        public async Task<DemoWebApi.DemoData.Client.Person[]> DemoWebApi.Controllers.SuperDemoController.GetCollection (DemoCoreWeb)Async()
        {
            var requestUri = new Uri(this.baseUri, "api/SuperDemo/Collection");
            var responseMessage = await client.GetAsync(requestUri);
            responseMessage.EnsureSuccessStatusCode();
            var stream = await responseMessage.Content.ReadAsStreamAsync();
            using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
            {
            var serializer = new JsonSerializer();
            return serializer.Deserialize<DemoWebApi.DemoData.Client.Person[]>(jsonReader);
            }
        }
        
        /// <summary>
        /// GET api/SuperDemo/Collection
        /// </summary>
        public DemoWebApi.DemoData.Client.Person[] DemoWebApi.Controllers.SuperDemoController.GetCollection (DemoCoreWeb)()
        {
            var requestUri = new Uri(this.baseUri, "api/SuperDemo/Collection");
            var responseMessage = this.client.GetAsync(requestUri).Result;
            responseMessage.EnsureSuccessStatusCode();
            var stream = responseMessage.Content.ReadAsStreamAsync().Result;
            using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
            {
            var serializer = new JsonSerializer();
            return serializer.Deserialize<DemoWebApi.DemoData.Client.Person[]>(jsonReader);
            }
        }
        
        /// <summary>
        /// POST api/SuperDemo/ICollection
        /// </summary>
        public async Task<int> DemoWebApi.Controllers.SuperDemoController.PostICollection (DemoCoreWeb)Async(DemoWebApi.DemoData.Client.Person[] list)
        {
            var requestUri = new Uri(this.baseUri, "api/SuperDemo/ICollection");
            using (var requestWriter = new System.IO.StringWriter())
            {
            var requestSerializer = JsonSerializer.Create();
            requestSerializer.Serialize(requestWriter, list);
            var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
            var responseMessage = await client.PostAsync(requestUri, content);
            responseMessage.EnsureSuccessStatusCode();
            var stream = await responseMessage.Content.ReadAsStreamAsync();
            using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
            {
            var serializer = new JsonSerializer();
            return System.Int32.Parse(jsonReader.ReadAsString());
            }
            }
        }
        
        /// <summary>
        /// POST api/SuperDemo/ICollection
        /// </summary>
        public int DemoWebApi.Controllers.SuperDemoController.PostICollection (DemoCoreWeb)(DemoWebApi.DemoData.Client.Person[] list)
        {
            var requestUri = new Uri(this.baseUri, "api/SuperDemo/ICollection");
            using (var requestWriter = new System.IO.StringWriter())
            {
            var requestSerializer = JsonSerializer.Create();
            requestSerializer.Serialize(requestWriter, list);
            var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
            var responseMessage = this.client.PostAsync(requestUri, content).Result;
            responseMessage.EnsureSuccessStatusCode();
            var stream = responseMessage.Content.ReadAsStreamAsync().Result;
            using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
            {
            var serializer = new JsonSerializer();
            return System.Int32.Parse(jsonReader.ReadAsString());
            }
            }
        }
        
        /// <summary>
        /// POST api/SuperDemo/IList
        /// </summary>
        public async Task<int> DemoWebApi.Controllers.SuperDemoController.PostIList (DemoCoreWeb)Async(DemoWebApi.DemoData.Client.Person[] list)
        {
            var requestUri = new Uri(this.baseUri, "api/SuperDemo/IList");
            using (var requestWriter = new System.IO.StringWriter())
            {
            var requestSerializer = JsonSerializer.Create();
            requestSerializer.Serialize(requestWriter, list);
            var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
            var responseMessage = await client.PostAsync(requestUri, content);
            responseMessage.EnsureSuccessStatusCode();
            var stream = await responseMessage.Content.ReadAsStreamAsync();
            using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
            {
            var serializer = new JsonSerializer();
            return System.Int32.Parse(jsonReader.ReadAsString());
            }
            }
        }
        
        /// <summary>
        /// POST api/SuperDemo/IList
        /// </summary>
        public int DemoWebApi.Controllers.SuperDemoController.PostIList (DemoCoreWeb)(DemoWebApi.DemoData.Client.Person[] list)
        {
            var requestUri = new Uri(this.baseUri, "api/SuperDemo/IList");
            using (var requestWriter = new System.IO.StringWriter())
            {
            var requestSerializer = JsonSerializer.Create();
            requestSerializer.Serialize(requestWriter, list);
            var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
            var responseMessage = this.client.PostAsync(requestUri, content).Result;
            responseMessage.EnsureSuccessStatusCode();
            var stream = responseMessage.Content.ReadAsStreamAsync().Result;
            using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
            {
            var serializer = new JsonSerializer();
            return System.Int32.Parse(jsonReader.ReadAsString());
            }
            }
        }
        
        /// <summary>
        /// POST api/SuperDemo/IReadOnlyList
        /// </summary>
        public async Task<int> DemoWebApi.Controllers.SuperDemoController.PostIReadOnlyList (DemoCoreWeb)Async(DemoWebApi.DemoData.Client.Person[] list)
        {
            var requestUri = new Uri(this.baseUri, "api/SuperDemo/IReadOnlyList");
            using (var requestWriter = new System.IO.StringWriter())
            {
            var requestSerializer = JsonSerializer.Create();
            requestSerializer.Serialize(requestWriter, list);
            var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
            var responseMessage = await client.PostAsync(requestUri, content);
            responseMessage.EnsureSuccessStatusCode();
            var stream = await responseMessage.Content.ReadAsStreamAsync();
            using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
            {
            var serializer = new JsonSerializer();
            return System.Int32.Parse(jsonReader.ReadAsString());
            }
            }
        }
        
        /// <summary>
        /// POST api/SuperDemo/IReadOnlyList
        /// </summary>
        public int DemoWebApi.Controllers.SuperDemoController.PostIReadOnlyList (DemoCoreWeb)(DemoWebApi.DemoData.Client.Person[] list)
        {
            var requestUri = new Uri(this.baseUri, "api/SuperDemo/IReadOnlyList");
            using (var requestWriter = new System.IO.StringWriter())
            {
            var requestSerializer = JsonSerializer.Create();
            requestSerializer.Serialize(requestWriter, list);
            var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
            var responseMessage = this.client.PostAsync(requestUri, content).Result;
            responseMessage.EnsureSuccessStatusCode();
            var stream = responseMessage.Content.ReadAsStreamAsync().Result;
            using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
            {
            var serializer = new JsonSerializer();
            return System.Int32.Parse(jsonReader.ReadAsString());
            }
            }
        }
        
        /// <summary>
        /// POST api/SuperDemo/IReadOnlyCollection
        /// </summary>
        public async Task<int> DemoWebApi.Controllers.SuperDemoController.PostIReadOnlyCollection (DemoCoreWeb)Async(DemoWebApi.DemoData.Client.Person[] list)
        {
            var requestUri = new Uri(this.baseUri, "api/SuperDemo/IReadOnlyCollection");
            using (var requestWriter = new System.IO.StringWriter())
            {
            var requestSerializer = JsonSerializer.Create();
            requestSerializer.Serialize(requestWriter, list);
            var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
            var responseMessage = await client.PostAsync(requestUri, content);
            responseMessage.EnsureSuccessStatusCode();
            var stream = await responseMessage.Content.ReadAsStreamAsync();
            using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
            {
            var serializer = new JsonSerializer();
            return System.Int32.Parse(jsonReader.ReadAsString());
            }
            }
        }
        
        /// <summary>
        /// POST api/SuperDemo/IReadOnlyCollection
        /// </summary>
        public int DemoWebApi.Controllers.SuperDemoController.PostIReadOnlyCollection (DemoCoreWeb)(DemoWebApi.DemoData.Client.Person[] list)
        {
            var requestUri = new Uri(this.baseUri, "api/SuperDemo/IReadOnlyCollection");
            using (var requestWriter = new System.IO.StringWriter())
            {
            var requestSerializer = JsonSerializer.Create();
            requestSerializer.Serialize(requestWriter, list);
            var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
            var responseMessage = this.client.PostAsync(requestUri, content).Result;
            responseMessage.EnsureSuccessStatusCode();
            var stream = responseMessage.Content.ReadAsStreamAsync().Result;
            using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
            {
            var serializer = new JsonSerializer();
            return System.Int32.Parse(jsonReader.ReadAsString());
            }
            }
        }
        
        /// <summary>
        /// POST api/SuperDemo/List
        /// </summary>
        public async Task<int> DemoWebApi.Controllers.SuperDemoController.PostList (DemoCoreWeb)Async(DemoWebApi.DemoData.Client.Person[] list)
        {
            var requestUri = new Uri(this.baseUri, "api/SuperDemo/List");
            using (var requestWriter = new System.IO.StringWriter())
            {
            var requestSerializer = JsonSerializer.Create();
            requestSerializer.Serialize(requestWriter, list);
            var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
            var responseMessage = await client.PostAsync(requestUri, content);
            responseMessage.EnsureSuccessStatusCode();
            var stream = await responseMessage.Content.ReadAsStreamAsync();
            using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
            {
            var serializer = new JsonSerializer();
            return System.Int32.Parse(jsonReader.ReadAsString());
            }
            }
        }
        
        /// <summary>
        /// POST api/SuperDemo/List
        /// </summary>
        public int DemoWebApi.Controllers.SuperDemoController.PostList (DemoCoreWeb)(DemoWebApi.DemoData.Client.Person[] list)
        {
            var requestUri = new Uri(this.baseUri, "api/SuperDemo/List");
            using (var requestWriter = new System.IO.StringWriter())
            {
            var requestSerializer = JsonSerializer.Create();
            requestSerializer.Serialize(requestWriter, list);
            var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
            var responseMessage = this.client.PostAsync(requestUri, content).Result;
            responseMessage.EnsureSuccessStatusCode();
            var stream = responseMessage.Content.ReadAsStreamAsync().Result;
            using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
            {
            var serializer = new JsonSerializer();
            return System.Int32.Parse(jsonReader.ReadAsString());
            }
            }
        }
        
        /// <summary>
        /// POST api/SuperDemo/Collection
        /// </summary>
        public async Task<int> DemoWebApi.Controllers.SuperDemoController.PostCollection (DemoCoreWeb)Async(DemoWebApi.DemoData.Client.Person[] list)
        {
            var requestUri = new Uri(this.baseUri, "api/SuperDemo/Collection");
            using (var requestWriter = new System.IO.StringWriter())
            {
            var requestSerializer = JsonSerializer.Create();
            requestSerializer.Serialize(requestWriter, list);
            var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
            var responseMessage = await client.PostAsync(requestUri, content);
            responseMessage.EnsureSuccessStatusCode();
            var stream = await responseMessage.Content.ReadAsStreamAsync();
            using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
            {
            var serializer = new JsonSerializer();
            return System.Int32.Parse(jsonReader.ReadAsString());
            }
            }
        }
        
        /// <summary>
        /// POST api/SuperDemo/Collection
        /// </summary>
        public int DemoWebApi.Controllers.SuperDemoController.PostCollection (DemoCoreWeb)(DemoWebApi.DemoData.Client.Person[] list)
        {
            var requestUri = new Uri(this.baseUri, "api/SuperDemo/Collection");
            using (var requestWriter = new System.IO.StringWriter())
            {
            var requestSerializer = JsonSerializer.Create();
            requestSerializer.Serialize(requestWriter, list);
            var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
            var responseMessage = this.client.PostAsync(requestUri, content).Result;
            responseMessage.EnsureSuccessStatusCode();
            var stream = responseMessage.Content.ReadAsStreamAsync().Result;
            using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
            {
            var serializer = new JsonSerializer();
            return System.Int32.Parse(jsonReader.ReadAsString());
            }
            }
        }
        
        /// <summary>
        /// POST api/SuperDemo/PostEmpty
        /// </summary>
        public async Task<System.Tuple<string, int>> DemoWebApi.Controllers.SuperDemoController.PostWithQueryButEmptyBody (DemoCoreWeb)Async(string s, int i)
        {
            var requestUri = new Uri(this.baseUri, "api/SuperDemo/PostEmpty");
            using (var requestWriter = new System.IO.StringWriter())
            {
            var requestSerializer = JsonSerializer.Create();
            requestSerializer.Serialize(requestWriter, s);
            var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
            var responseMessage = await client.PostAsync(requestUri, content);
            responseMessage.EnsureSuccessStatusCode();
            var stream = await responseMessage.Content.ReadAsStreamAsync();
            using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
            {
            var serializer = new JsonSerializer();
            return serializer.Deserialize<System.Tuple<string, int>>(jsonReader);
            }
            }
        }
        
        /// <summary>
        /// POST api/SuperDemo/PostEmpty
        /// </summary>
        public System.Tuple<string, int> DemoWebApi.Controllers.SuperDemoController.PostWithQueryButEmptyBody (DemoCoreWeb)(string s, int i)
        {
            var requestUri = new Uri(this.baseUri, "api/SuperDemo/PostEmpty");
            using (var requestWriter = new System.IO.StringWriter())
            {
            var requestSerializer = JsonSerializer.Create();
            requestSerializer.Serialize(requestWriter, s);
            var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
            var responseMessage = this.client.PostAsync(requestUri, content).Result;
            responseMessage.EnsureSuccessStatusCode();
            var stream = responseMessage.Content.ReadAsStreamAsync().Result;
            using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
            {
            var serializer = new JsonSerializer();
            return serializer.Deserialize<System.Tuple<string, int>>(jsonReader);
            }
            }
        }
    }
    
    public partial class Tuple
    {
        
        private System.Net.Http.HttpClient client;
        
        private System.Uri baseUri;
        
        public Tuple(System.Net.Http.HttpClient client, System.Uri baseUri)
        {
            if (client == null)
                throw new ArgumentNullException("client", "Null HttpClient.");

            if (baseUri == null)
                throw new ArgumentNullException("baseUri", "Null baseUri");

            this.client = client;
            this.baseUri = baseUri;
        }
        
        /// <summary>
        /// POST api/Tuple/PersonCompany1
        /// </summary>
        public async Task<DemoWebApi.DemoData.Client.Person> DemoWebApi.Controllers.TupleController.LinkPersonCompany1 (DemoCoreWeb)Async(System.Tuple<DemoWebApi.DemoData.Client.Person, DemoWebApi.DemoData.Client.Company> peopleAndCompany)
        {
            var requestUri = new Uri(this.baseUri, "api/Tuple/PersonCompany1");
            using (var requestWriter = new System.IO.StringWriter())
            {
            var requestSerializer = JsonSerializer.Create();
            requestSerializer.Serialize(requestWriter, peopleAndCompany);
            var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
            var responseMessage = await client.PostAsync(requestUri, content);
            responseMessage.EnsureSuccessStatusCode();
            var stream = await responseMessage.Content.ReadAsStreamAsync();
            using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
            {
            var serializer = new JsonSerializer();
            return serializer.Deserialize<DemoWebApi.DemoData.Client.Person>(jsonReader);
            }
            }
        }
        
        /// <summary>
        /// POST api/Tuple/PersonCompany1
        /// </summary>
        public DemoWebApi.DemoData.Client.Person DemoWebApi.Controllers.TupleController.LinkPersonCompany1 (DemoCoreWeb)(System.Tuple<DemoWebApi.DemoData.Client.Person, DemoWebApi.DemoData.Client.Company> peopleAndCompany)
        {
            var requestUri = new Uri(this.baseUri, "api/Tuple/PersonCompany1");
            using (var requestWriter = new System.IO.StringWriter())
            {
            var requestSerializer = JsonSerializer.Create();
            requestSerializer.Serialize(requestWriter, peopleAndCompany);
            var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
            var responseMessage = this.client.PostAsync(requestUri, content).Result;
            responseMessage.EnsureSuccessStatusCode();
            var stream = responseMessage.Content.ReadAsStreamAsync().Result;
            using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
            {
            var serializer = new JsonSerializer();
            return serializer.Deserialize<DemoWebApi.DemoData.Client.Person>(jsonReader);
            }
            }
        }
        
        /// <summary>
        /// POST api/Tuple/PeopleCompany2
        /// </summary>
        public async Task<DemoWebApi.DemoData.Client.Person> DemoWebApi.Controllers.TupleController.LinkPeopleCompany2 (DemoCoreWeb)Async(System.Tuple<DemoWebApi.DemoData.Client.Person, DemoWebApi.DemoData.Client.Company> peopleAndCompany)
        {
            var requestUri = new Uri(this.baseUri, "api/Tuple/PeopleCompany2");
            using (var requestWriter = new System.IO.StringWriter())
            {
            var requestSerializer = JsonSerializer.Create();
            requestSerializer.Serialize(requestWriter, peopleAndCompany);
            var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
            var responseMessage = await client.PostAsync(requestUri, content);
            responseMessage.EnsureSuccessStatusCode();
            var stream = await responseMessage.Content.ReadAsStreamAsync();
            using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
            {
            var serializer = new JsonSerializer();
            return serializer.Deserialize<DemoWebApi.DemoData.Client.Person>(jsonReader);
            }
            }
        }
        
        /// <summary>
        /// POST api/Tuple/PeopleCompany2
        /// </summary>
        public DemoWebApi.DemoData.Client.Person DemoWebApi.Controllers.TupleController.LinkPeopleCompany2 (DemoCoreWeb)(System.Tuple<DemoWebApi.DemoData.Client.Person, DemoWebApi.DemoData.Client.Company> peopleAndCompany)
        {
            var requestUri = new Uri(this.baseUri, "api/Tuple/PeopleCompany2");
            using (var requestWriter = new System.IO.StringWriter())
            {
            var requestSerializer = JsonSerializer.Create();
            requestSerializer.Serialize(requestWriter, peopleAndCompany);
            var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
            var responseMessage = this.client.PostAsync(requestUri, content).Result;
            responseMessage.EnsureSuccessStatusCode();
            var stream = responseMessage.Content.ReadAsStreamAsync().Result;
            using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
            {
            var serializer = new JsonSerializer();
            return serializer.Deserialize<DemoWebApi.DemoData.Client.Person>(jsonReader);
            }
            }
        }
        
        /// <summary>
        /// POST api/Tuple/PeopleCompany3
        /// </summary>
        public async Task<DemoWebApi.DemoData.Client.Person> DemoWebApi.Controllers.TupleController.LinkPeopleCompany3 (DemoCoreWeb)Async(System.Tuple<DemoWebApi.DemoData.Client.Person, DemoWebApi.DemoData.Client.Person, DemoWebApi.DemoData.Client.Company> peopleAndCompany)
        {
            var requestUri = new Uri(this.baseUri, "api/Tuple/PeopleCompany3");
            using (var requestWriter = new System.IO.StringWriter())
            {
            var requestSerializer = JsonSerializer.Create();
            requestSerializer.Serialize(requestWriter, peopleAndCompany);
            var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
            var responseMessage = await client.PostAsync(requestUri, content);
            responseMessage.EnsureSuccessStatusCode();
            var stream = await responseMessage.Content.ReadAsStreamAsync();
            using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
            {
            var serializer = new JsonSerializer();
            return serializer.Deserialize<DemoWebApi.DemoData.Client.Person>(jsonReader);
            }
            }
        }
        
        /// <summary>
        /// POST api/Tuple/PeopleCompany3
        /// </summary>
        public DemoWebApi.DemoData.Client.Person DemoWebApi.Controllers.TupleController.LinkPeopleCompany3 (DemoCoreWeb)(System.Tuple<DemoWebApi.DemoData.Client.Person, DemoWebApi.DemoData.Client.Person, DemoWebApi.DemoData.Client.Company> peopleAndCompany)
        {
            var requestUri = new Uri(this.baseUri, "api/Tuple/PeopleCompany3");
            using (var requestWriter = new System.IO.StringWriter())
            {
            var requestSerializer = JsonSerializer.Create();
            requestSerializer.Serialize(requestWriter, peopleAndCompany);
            var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
            var responseMessage = this.client.PostAsync(requestUri, content).Result;
            responseMessage.EnsureSuccessStatusCode();
            var stream = responseMessage.Content.ReadAsStreamAsync().Result;
            using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
            {
            var serializer = new JsonSerializer();
            return serializer.Deserialize<DemoWebApi.DemoData.Client.Person>(jsonReader);
            }
            }
        }
        
        /// <summary>
        /// POST api/Tuple/PeopleCompany4
        /// </summary>
        public async Task<DemoWebApi.DemoData.Client.Person> DemoWebApi.Controllers.TupleController.LinkPeopleCompany4 (DemoCoreWeb)Async(System.Tuple<DemoWebApi.DemoData.Client.Person, DemoWebApi.DemoData.Client.Person, DemoWebApi.DemoData.Client.Person, DemoWebApi.DemoData.Client.Company> peopleAndCompany)
        {
            var requestUri = new Uri(this.baseUri, "api/Tuple/PeopleCompany4");
            using (var requestWriter = new System.IO.StringWriter())
            {
            var requestSerializer = JsonSerializer.Create();
            requestSerializer.Serialize(requestWriter, peopleAndCompany);
            var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
            var responseMessage = await client.PostAsync(requestUri, content);
            responseMessage.EnsureSuccessStatusCode();
            var stream = await responseMessage.Content.ReadAsStreamAsync();
            using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
            {
            var serializer = new JsonSerializer();
            return serializer.Deserialize<DemoWebApi.DemoData.Client.Person>(jsonReader);
            }
            }
        }
        
        /// <summary>
        /// POST api/Tuple/PeopleCompany4
        /// </summary>
        public DemoWebApi.DemoData.Client.Person DemoWebApi.Controllers.TupleController.LinkPeopleCompany4 (DemoCoreWeb)(System.Tuple<DemoWebApi.DemoData.Client.Person, DemoWebApi.DemoData.Client.Person, DemoWebApi.DemoData.Client.Person, DemoWebApi.DemoData.Client.Company> peopleAndCompany)
        {
            var requestUri = new Uri(this.baseUri, "api/Tuple/PeopleCompany4");
            using (var requestWriter = new System.IO.StringWriter())
            {
            var requestSerializer = JsonSerializer.Create();
            requestSerializer.Serialize(requestWriter, peopleAndCompany);
            var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
            var responseMessage = this.client.PostAsync(requestUri, content).Result;
            responseMessage.EnsureSuccessStatusCode();
            var stream = responseMessage.Content.ReadAsStreamAsync().Result;
            using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
            {
            var serializer = new JsonSerializer();
            return serializer.Deserialize<DemoWebApi.DemoData.Client.Person>(jsonReader);
            }
            }
        }
        
        /// <summary>
        /// GET api/Tuple/PeopleCompany4
        /// </summary>
        public async Task<System.Tuple<DemoWebApi.DemoData.Client.Person, DemoWebApi.DemoData.Client.Person, DemoWebApi.DemoData.Client.Person, DemoWebApi.DemoData.Client.Company>> DemoWebApi.Controllers.TupleController.GetPeopleCompany4 (DemoCoreWeb)Async()
        {
            var requestUri = new Uri(this.baseUri, "api/Tuple/PeopleCompany4");
            var responseMessage = await client.GetAsync(requestUri);
            responseMessage.EnsureSuccessStatusCode();
            var stream = await responseMessage.Content.ReadAsStreamAsync();
            using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
            {
            var serializer = new JsonSerializer();
            return serializer.Deserialize<System.Tuple<DemoWebApi.DemoData.Client.Person, DemoWebApi.DemoData.Client.Person, DemoWebApi.DemoData.Client.Person, DemoWebApi.DemoData.Client.Company>>(jsonReader);
            }
        }
        
        /// <summary>
        /// GET api/Tuple/PeopleCompany4
        /// </summary>
        public System.Tuple<DemoWebApi.DemoData.Client.Person, DemoWebApi.DemoData.Client.Person, DemoWebApi.DemoData.Client.Person, DemoWebApi.DemoData.Client.Company> DemoWebApi.Controllers.TupleController.GetPeopleCompany4 (DemoCoreWeb)()
        {
            var requestUri = new Uri(this.baseUri, "api/Tuple/PeopleCompany4");
            var responseMessage = this.client.GetAsync(requestUri).Result;
            responseMessage.EnsureSuccessStatusCode();
            var stream = responseMessage.Content.ReadAsStreamAsync().Result;
            using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
            {
            var serializer = new JsonSerializer();
            return serializer.Deserialize<System.Tuple<DemoWebApi.DemoData.Client.Person, DemoWebApi.DemoData.Client.Person, DemoWebApi.DemoData.Client.Person, DemoWebApi.DemoData.Client.Company>>(jsonReader);
            }
        }
        
        /// <summary>
        /// POST api/Tuple/PeopleCompany5
        /// </summary>
        public async Task<DemoWebApi.DemoData.Client.Person> DemoWebApi.Controllers.TupleController.LinkPeopleCompany5 (DemoCoreWeb)Async(System.Tuple<DemoWebApi.DemoData.Client.Person, DemoWebApi.DemoData.Client.Person, DemoWebApi.DemoData.Client.Person, DemoWebApi.DemoData.Client.Person, DemoWebApi.DemoData.Client.Company> peopleAndCompany)
        {
            var requestUri = new Uri(this.baseUri, "api/Tuple/PeopleCompany5");
            using (var requestWriter = new System.IO.StringWriter())
            {
            var requestSerializer = JsonSerializer.Create();
            requestSerializer.Serialize(requestWriter, peopleAndCompany);
            var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
            var responseMessage = await client.PostAsync(requestUri, content);
            responseMessage.EnsureSuccessStatusCode();
            var stream = await responseMessage.Content.ReadAsStreamAsync();
            using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
            {
            var serializer = new JsonSerializer();
            return serializer.Deserialize<DemoWebApi.DemoData.Client.Person>(jsonReader);
            }
            }
        }
        
        /// <summary>
        /// POST api/Tuple/PeopleCompany5
        /// </summary>
        public DemoWebApi.DemoData.Client.Person DemoWebApi.Controllers.TupleController.LinkPeopleCompany5 (DemoCoreWeb)(System.Tuple<DemoWebApi.DemoData.Client.Person, DemoWebApi.DemoData.Client.Person, DemoWebApi.DemoData.Client.Person, DemoWebApi.DemoData.Client.Person, DemoWebApi.DemoData.Client.Company> peopleAndCompany)
        {
            var requestUri = new Uri(this.baseUri, "api/Tuple/PeopleCompany5");
            using (var requestWriter = new System.IO.StringWriter())
            {
            var requestSerializer = JsonSerializer.Create();
            requestSerializer.Serialize(requestWriter, peopleAndCompany);
            var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
            var responseMessage = this.client.PostAsync(requestUri, content).Result;
            responseMessage.EnsureSuccessStatusCode();
            var stream = responseMessage.Content.ReadAsStreamAsync().Result;
            using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
            {
            var serializer = new JsonSerializer();
            return serializer.Deserialize<DemoWebApi.DemoData.Client.Person>(jsonReader);
            }
            }
        }
        
        /// <summary>
        /// GET api/Tuple/PeopleCompany5
        /// </summary>
        public async Task<System.Tuple<DemoWebApi.DemoData.Client.Person, DemoWebApi.DemoData.Client.Person, DemoWebApi.DemoData.Client.Person, DemoWebApi.DemoData.Client.Person, DemoWebApi.DemoData.Client.Company>> DemoWebApi.Controllers.TupleController.GetPeopleCompany5 (DemoCoreWeb)Async()
        {
            var requestUri = new Uri(this.baseUri, "api/Tuple/PeopleCompany5");
            var responseMessage = await client.GetAsync(requestUri);
            responseMessage.EnsureSuccessStatusCode();
            var stream = await responseMessage.Content.ReadAsStreamAsync();
            using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
            {
            var serializer = new JsonSerializer();
            return serializer.Deserialize<System.Tuple<DemoWebApi.DemoData.Client.Person, DemoWebApi.DemoData.Client.Person, DemoWebApi.DemoData.Client.Person, DemoWebApi.DemoData.Client.Person, DemoWebApi.DemoData.Client.Company>>(jsonReader);
            }
        }
        
        /// <summary>
        /// GET api/Tuple/PeopleCompany5
        /// </summary>
        public System.Tuple<DemoWebApi.DemoData.Client.Person, DemoWebApi.DemoData.Client.Person, DemoWebApi.DemoData.Client.Person, DemoWebApi.DemoData.Client.Person, DemoWebApi.DemoData.Client.Company> DemoWebApi.Controllers.TupleController.GetPeopleCompany5 (DemoCoreWeb)()
        {
            var requestUri = new Uri(this.baseUri, "api/Tuple/PeopleCompany5");
            var responseMessage = this.client.GetAsync(requestUri).Result;
            responseMessage.EnsureSuccessStatusCode();
            var stream = responseMessage.Content.ReadAsStreamAsync().Result;
            using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
            {
            var serializer = new JsonSerializer();
            return serializer.Deserialize<System.Tuple<DemoWebApi.DemoData.Client.Person, DemoWebApi.DemoData.Client.Person, DemoWebApi.DemoData.Client.Person, DemoWebApi.DemoData.Client.Person, DemoWebApi.DemoData.Client.Company>>(jsonReader);
            }
        }
        
        /// <summary>
        /// POST api/Tuple/PeopleCompany6
        /// </summary>
        public async Task<DemoWebApi.DemoData.Client.Person> DemoWebApi.Controllers.TupleController.LinkPeopleCompany6 (DemoCoreWeb)Async(System.Tuple<DemoWebApi.DemoData.Client.Person, DemoWebApi.DemoData.Client.Person, DemoWebApi.DemoData.Client.Person, DemoWebApi.DemoData.Client.Person, DemoWebApi.DemoData.Client.Person, DemoWebApi.DemoData.Client.Company> peopleAndCompany)
        {
            var requestUri = new Uri(this.baseUri, "api/Tuple/PeopleCompany6");
            using (var requestWriter = new System.IO.StringWriter())
            {
            var requestSerializer = JsonSerializer.Create();
            requestSerializer.Serialize(requestWriter, peopleAndCompany);
            var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
            var responseMessage = await client.PostAsync(requestUri, content);
            responseMessage.EnsureSuccessStatusCode();
            var stream = await responseMessage.Content.ReadAsStreamAsync();
            using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
            {
            var serializer = new JsonSerializer();
            return serializer.Deserialize<DemoWebApi.DemoData.Client.Person>(jsonReader);
            }
            }
        }
        
        /// <summary>
        /// POST api/Tuple/PeopleCompany6
        /// </summary>
        public DemoWebApi.DemoData.Client.Person DemoWebApi.Controllers.TupleController.LinkPeopleCompany6 (DemoCoreWeb)(System.Tuple<DemoWebApi.DemoData.Client.Person, DemoWebApi.DemoData.Client.Person, DemoWebApi.DemoData.Client.Person, DemoWebApi.DemoData.Client.Person, DemoWebApi.DemoData.Client.Person, DemoWebApi.DemoData.Client.Company> peopleAndCompany)
        {
            var requestUri = new Uri(this.baseUri, "api/Tuple/PeopleCompany6");
            using (var requestWriter = new System.IO.StringWriter())
            {
            var requestSerializer = JsonSerializer.Create();
            requestSerializer.Serialize(requestWriter, peopleAndCompany);
            var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
            var responseMessage = this.client.PostAsync(requestUri, content).Result;
            responseMessage.EnsureSuccessStatusCode();
            var stream = responseMessage.Content.ReadAsStreamAsync().Result;
            using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
            {
            var serializer = new JsonSerializer();
            return serializer.Deserialize<DemoWebApi.DemoData.Client.Person>(jsonReader);
            }
            }
        }
        
        /// <summary>
        /// POST api/Tuple/PeopleCompany7
        /// </summary>
        public async Task<DemoWebApi.DemoData.Client.Person> DemoWebApi.Controllers.TupleController.LinkPeopleCompany7 (DemoCoreWeb)Async(System.Tuple<DemoWebApi.DemoData.Client.Person, DemoWebApi.DemoData.Client.Person, DemoWebApi.DemoData.Client.Person, DemoWebApi.DemoData.Client.Person, DemoWebApi.DemoData.Client.Person, DemoWebApi.DemoData.Client.Person, DemoWebApi.DemoData.Client.Company> peopleAndCompany)
        {
            var requestUri = new Uri(this.baseUri, "api/Tuple/PeopleCompany7");
            using (var requestWriter = new System.IO.StringWriter())
            {
            var requestSerializer = JsonSerializer.Create();
            requestSerializer.Serialize(requestWriter, peopleAndCompany);
            var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
            var responseMessage = await client.PostAsync(requestUri, content);
            responseMessage.EnsureSuccessStatusCode();
            var stream = await responseMessage.Content.ReadAsStreamAsync();
            using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
            {
            var serializer = new JsonSerializer();
            return serializer.Deserialize<DemoWebApi.DemoData.Client.Person>(jsonReader);
            }
            }
        }
        
        /// <summary>
        /// POST api/Tuple/PeopleCompany7
        /// </summary>
        public DemoWebApi.DemoData.Client.Person DemoWebApi.Controllers.TupleController.LinkPeopleCompany7 (DemoCoreWeb)(System.Tuple<DemoWebApi.DemoData.Client.Person, DemoWebApi.DemoData.Client.Person, DemoWebApi.DemoData.Client.Person, DemoWebApi.DemoData.Client.Person, DemoWebApi.DemoData.Client.Person, DemoWebApi.DemoData.Client.Person, DemoWebApi.DemoData.Client.Company> peopleAndCompany)
        {
            var requestUri = new Uri(this.baseUri, "api/Tuple/PeopleCompany7");
            using (var requestWriter = new System.IO.StringWriter())
            {
            var requestSerializer = JsonSerializer.Create();
            requestSerializer.Serialize(requestWriter, peopleAndCompany);
            var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
            var responseMessage = this.client.PostAsync(requestUri, content).Result;
            responseMessage.EnsureSuccessStatusCode();
            var stream = responseMessage.Content.ReadAsStreamAsync().Result;
            using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
            {
            var serializer = new JsonSerializer();
            return serializer.Deserialize<DemoWebApi.DemoData.Client.Person>(jsonReader);
            }
            }
        }
        
        /// <summary>
        /// POST api/Tuple/PeopleCompany8
        /// </summary>
        public async Task<DemoWebApi.DemoData.Client.Person> DemoWebApi.Controllers.TupleController.LinkPeopleCompany8 (DemoCoreWeb)Async(System.Tuple<DemoWebApi.DemoData.Client.Person, DemoWebApi.DemoData.Client.Person, DemoWebApi.DemoData.Client.Person, DemoWebApi.DemoData.Client.Person, DemoWebApi.DemoData.Client.Person, DemoWebApi.DemoData.Client.Person, DemoWebApi.DemoData.Client.Person, DemoWebApi.DemoData.Client.Company> peopleAndCompany)
        {
            var requestUri = new Uri(this.baseUri, "api/Tuple/PeopleCompany8");
            using (var requestWriter = new System.IO.StringWriter())
            {
            var requestSerializer = JsonSerializer.Create();
            requestSerializer.Serialize(requestWriter, peopleAndCompany);
            var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
            var responseMessage = await client.PostAsync(requestUri, content);
            responseMessage.EnsureSuccessStatusCode();
            var stream = await responseMessage.Content.ReadAsStreamAsync();
            using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
            {
            var serializer = new JsonSerializer();
            return serializer.Deserialize<DemoWebApi.DemoData.Client.Person>(jsonReader);
            }
            }
        }
        
        /// <summary>
        /// POST api/Tuple/PeopleCompany8
        /// </summary>
        public DemoWebApi.DemoData.Client.Person DemoWebApi.Controllers.TupleController.LinkPeopleCompany8 (DemoCoreWeb)(System.Tuple<DemoWebApi.DemoData.Client.Person, DemoWebApi.DemoData.Client.Person, DemoWebApi.DemoData.Client.Person, DemoWebApi.DemoData.Client.Person, DemoWebApi.DemoData.Client.Person, DemoWebApi.DemoData.Client.Person, DemoWebApi.DemoData.Client.Person, DemoWebApi.DemoData.Client.Company> peopleAndCompany)
        {
            var requestUri = new Uri(this.baseUri, "api/Tuple/PeopleCompany8");
            using (var requestWriter = new System.IO.StringWriter())
            {
            var requestSerializer = JsonSerializer.Create();
            requestSerializer.Serialize(requestWriter, peopleAndCompany);
            var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
            var responseMessage = this.client.PostAsync(requestUri, content).Result;
            responseMessage.EnsureSuccessStatusCode();
            var stream = responseMessage.Content.ReadAsStreamAsync().Result;
            using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
            {
            var serializer = new JsonSerializer();
            return serializer.Deserialize<DemoWebApi.DemoData.Client.Person>(jsonReader);
            }
            }
        }
        
        /// <summary>
        /// GET api/Tuple/Tuple1
        /// </summary>
        public async Task<System.Tuple<int>> DemoWebApi.Controllers.TupleController.GetTuple1 (DemoCoreWeb)Async()
        {
            var requestUri = new Uri(this.baseUri, "api/Tuple/Tuple1");
            var responseMessage = await client.GetAsync(requestUri);
            responseMessage.EnsureSuccessStatusCode();
            var stream = await responseMessage.Content.ReadAsStreamAsync();
            using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
            {
            var serializer = new JsonSerializer();
            return serializer.Deserialize<System.Tuple<int>>(jsonReader);
            }
        }
        
        /// <summary>
        /// GET api/Tuple/Tuple1
        /// </summary>
        public System.Tuple<int> DemoWebApi.Controllers.TupleController.GetTuple1 (DemoCoreWeb)()
        {
            var requestUri = new Uri(this.baseUri, "api/Tuple/Tuple1");
            var responseMessage = this.client.GetAsync(requestUri).Result;
            responseMessage.EnsureSuccessStatusCode();
            var stream = responseMessage.Content.ReadAsStreamAsync().Result;
            using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
            {
            var serializer = new JsonSerializer();
            return serializer.Deserialize<System.Tuple<int>>(jsonReader);
            }
        }
        
        /// <summary>
        /// POST api/Tuple/Tuple1
        /// </summary>
        public async Task<int> DemoWebApi.Controllers.TupleController.PostTuple1 (DemoCoreWeb)Async(System.Tuple<int> tuple)
        {
            var requestUri = new Uri(this.baseUri, "api/Tuple/Tuple1");
            using (var requestWriter = new System.IO.StringWriter())
            {
            var requestSerializer = JsonSerializer.Create();
            requestSerializer.Serialize(requestWriter, tuple);
            var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
            var responseMessage = await client.PostAsync(requestUri, content);
            responseMessage.EnsureSuccessStatusCode();
            var stream = await responseMessage.Content.ReadAsStreamAsync();
            using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
            {
            var serializer = new JsonSerializer();
            return System.Int32.Parse(jsonReader.ReadAsString());
            }
            }
        }
        
        /// <summary>
        /// POST api/Tuple/Tuple1
        /// </summary>
        public int DemoWebApi.Controllers.TupleController.PostTuple1 (DemoCoreWeb)(System.Tuple<int> tuple)
        {
            var requestUri = new Uri(this.baseUri, "api/Tuple/Tuple1");
            using (var requestWriter = new System.IO.StringWriter())
            {
            var requestSerializer = JsonSerializer.Create();
            requestSerializer.Serialize(requestWriter, tuple);
            var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
            var responseMessage = this.client.PostAsync(requestUri, content).Result;
            responseMessage.EnsureSuccessStatusCode();
            var stream = responseMessage.Content.ReadAsStreamAsync().Result;
            using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
            {
            var serializer = new JsonSerializer();
            return System.Int32.Parse(jsonReader.ReadAsString());
            }
            }
        }
        
        /// <summary>
        /// GET api/Tuple/Tuple2
        /// </summary>
        public async Task<System.Tuple<string, int>> DemoWebApi.Controllers.TupleController.GetTuple2 (DemoCoreWeb)Async()
        {
            var requestUri = new Uri(this.baseUri, "api/Tuple/Tuple2");
            var responseMessage = await client.GetAsync(requestUri);
            responseMessage.EnsureSuccessStatusCode();
            var stream = await responseMessage.Content.ReadAsStreamAsync();
            using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
            {
            var serializer = new JsonSerializer();
            return serializer.Deserialize<System.Tuple<string, int>>(jsonReader);
            }
        }
        
        /// <summary>
        /// GET api/Tuple/Tuple2
        /// </summary>
        public System.Tuple<string, int> DemoWebApi.Controllers.TupleController.GetTuple2 (DemoCoreWeb)()
        {
            var requestUri = new Uri(this.baseUri, "api/Tuple/Tuple2");
            var responseMessage = this.client.GetAsync(requestUri).Result;
            responseMessage.EnsureSuccessStatusCode();
            var stream = responseMessage.Content.ReadAsStreamAsync().Result;
            using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
            {
            var serializer = new JsonSerializer();
            return serializer.Deserialize<System.Tuple<string, int>>(jsonReader);
            }
        }
        
        /// <summary>
        /// POST api/Tuple/Tuple2
        /// </summary>
        public async Task<string> DemoWebApi.Controllers.TupleController.PostTuple2 (DemoCoreWeb)Async(System.Tuple<string, int> tuple)
        {
            var requestUri = new Uri(this.baseUri, "api/Tuple/Tuple2");
            using (var requestWriter = new System.IO.StringWriter())
            {
            var requestSerializer = JsonSerializer.Create();
            requestSerializer.Serialize(requestWriter, tuple);
            var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
            var responseMessage = await client.PostAsync(requestUri, content);
            responseMessage.EnsureSuccessStatusCode();
            var stream = await responseMessage.Content.ReadAsStreamAsync();
            using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
            {
            var serializer = new JsonSerializer();
            return serializer.Deserialize<string>(jsonReader);
            }
            }
        }
        
        /// <summary>
        /// POST api/Tuple/Tuple2
        /// </summary>
        public string DemoWebApi.Controllers.TupleController.PostTuple2 (DemoCoreWeb)(System.Tuple<string, int> tuple)
        {
            var requestUri = new Uri(this.baseUri, "api/Tuple/Tuple2");
            using (var requestWriter = new System.IO.StringWriter())
            {
            var requestSerializer = JsonSerializer.Create();
            requestSerializer.Serialize(requestWriter, tuple);
            var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
            var responseMessage = this.client.PostAsync(requestUri, content).Result;
            responseMessage.EnsureSuccessStatusCode();
            var stream = responseMessage.Content.ReadAsStreamAsync().Result;
            using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
            {
            var serializer = new JsonSerializer();
            return serializer.Deserialize<string>(jsonReader);
            }
            }
        }
        
        /// <summary>
        /// GET api/Tuple/Tuple3
        /// </summary>
        public async Task<System.Tuple<string, string, int>> DemoWebApi.Controllers.TupleController.GetTuple3 (DemoCoreWeb)Async()
        {
            var requestUri = new Uri(this.baseUri, "api/Tuple/Tuple3");
            var responseMessage = await client.GetAsync(requestUri);
            responseMessage.EnsureSuccessStatusCode();
            var stream = await responseMessage.Content.ReadAsStreamAsync();
            using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
            {
            var serializer = new JsonSerializer();
            return serializer.Deserialize<System.Tuple<string, string, int>>(jsonReader);
            }
        }
        
        /// <summary>
        /// GET api/Tuple/Tuple3
        /// </summary>
        public System.Tuple<string, string, int> DemoWebApi.Controllers.TupleController.GetTuple3 (DemoCoreWeb)()
        {
            var requestUri = new Uri(this.baseUri, "api/Tuple/Tuple3");
            var responseMessage = this.client.GetAsync(requestUri).Result;
            responseMessage.EnsureSuccessStatusCode();
            var stream = responseMessage.Content.ReadAsStreamAsync().Result;
            using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
            {
            var serializer = new JsonSerializer();
            return serializer.Deserialize<System.Tuple<string, string, int>>(jsonReader);
            }
        }
        
        /// <summary>
        /// POST api/Tuple/Tuple3
        /// </summary>
        public async Task<string> DemoWebApi.Controllers.TupleController.PostTuple3 (DemoCoreWeb)Async(System.Tuple<string, string, int> tuple)
        {
            var requestUri = new Uri(this.baseUri, "api/Tuple/Tuple3");
            using (var requestWriter = new System.IO.StringWriter())
            {
            var requestSerializer = JsonSerializer.Create();
            requestSerializer.Serialize(requestWriter, tuple);
            var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
            var responseMessage = await client.PostAsync(requestUri, content);
            responseMessage.EnsureSuccessStatusCode();
            var stream = await responseMessage.Content.ReadAsStreamAsync();
            using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
            {
            var serializer = new JsonSerializer();
            return serializer.Deserialize<string>(jsonReader);
            }
            }
        }
        
        /// <summary>
        /// POST api/Tuple/Tuple3
        /// </summary>
        public string DemoWebApi.Controllers.TupleController.PostTuple3 (DemoCoreWeb)(System.Tuple<string, string, int> tuple)
        {
            var requestUri = new Uri(this.baseUri, "api/Tuple/Tuple3");
            using (var requestWriter = new System.IO.StringWriter())
            {
            var requestSerializer = JsonSerializer.Create();
            requestSerializer.Serialize(requestWriter, tuple);
            var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
            var responseMessage = this.client.PostAsync(requestUri, content).Result;
            responseMessage.EnsureSuccessStatusCode();
            var stream = responseMessage.Content.ReadAsStreamAsync().Result;
            using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
            {
            var serializer = new JsonSerializer();
            return serializer.Deserialize<string>(jsonReader);
            }
            }
        }
        
        /// <summary>
        /// GET api/Tuple/Tuple4
        /// </summary>
        public async Task<System.Tuple<string, string, string, int>> DemoWebApi.Controllers.TupleController.GetTuple4 (DemoCoreWeb)Async()
        {
            var requestUri = new Uri(this.baseUri, "api/Tuple/Tuple4");
            var responseMessage = await client.GetAsync(requestUri);
            responseMessage.EnsureSuccessStatusCode();
            var stream = await responseMessage.Content.ReadAsStreamAsync();
            using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
            {
            var serializer = new JsonSerializer();
            return serializer.Deserialize<System.Tuple<string, string, string, int>>(jsonReader);
            }
        }
        
        /// <summary>
        /// GET api/Tuple/Tuple4
        /// </summary>
        public System.Tuple<string, string, string, int> DemoWebApi.Controllers.TupleController.GetTuple4 (DemoCoreWeb)()
        {
            var requestUri = new Uri(this.baseUri, "api/Tuple/Tuple4");
            var responseMessage = this.client.GetAsync(requestUri).Result;
            responseMessage.EnsureSuccessStatusCode();
            var stream = responseMessage.Content.ReadAsStreamAsync().Result;
            using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
            {
            var serializer = new JsonSerializer();
            return serializer.Deserialize<System.Tuple<string, string, string, int>>(jsonReader);
            }
        }
        
        /// <summary>
        /// POST api/Tuple/Tuple4
        /// </summary>
        public async Task<string> DemoWebApi.Controllers.TupleController.PostTuple4 (DemoCoreWeb)Async(System.Tuple<string, string, string, int> tuple)
        {
            var requestUri = new Uri(this.baseUri, "api/Tuple/Tuple4");
            using (var requestWriter = new System.IO.StringWriter())
            {
            var requestSerializer = JsonSerializer.Create();
            requestSerializer.Serialize(requestWriter, tuple);
            var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
            var responseMessage = await client.PostAsync(requestUri, content);
            responseMessage.EnsureSuccessStatusCode();
            var stream = await responseMessage.Content.ReadAsStreamAsync();
            using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
            {
            var serializer = new JsonSerializer();
            return serializer.Deserialize<string>(jsonReader);
            }
            }
        }
        
        /// <summary>
        /// POST api/Tuple/Tuple4
        /// </summary>
        public string DemoWebApi.Controllers.TupleController.PostTuple4 (DemoCoreWeb)(System.Tuple<string, string, string, int> tuple)
        {
            var requestUri = new Uri(this.baseUri, "api/Tuple/Tuple4");
            using (var requestWriter = new System.IO.StringWriter())
            {
            var requestSerializer = JsonSerializer.Create();
            requestSerializer.Serialize(requestWriter, tuple);
            var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
            var responseMessage = this.client.PostAsync(requestUri, content).Result;
            responseMessage.EnsureSuccessStatusCode();
            var stream = responseMessage.Content.ReadAsStreamAsync().Result;
            using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
            {
            var serializer = new JsonSerializer();
            return serializer.Deserialize<string>(jsonReader);
            }
            }
        }
        
        /// <summary>
        /// GET api/Tuple/Tuple5
        /// </summary>
        public async Task<System.Tuple<string, string, string, string, int>> DemoWebApi.Controllers.TupleController.GetTuple5 (DemoCoreWeb)Async()
        {
            var requestUri = new Uri(this.baseUri, "api/Tuple/Tuple5");
            var responseMessage = await client.GetAsync(requestUri);
            responseMessage.EnsureSuccessStatusCode();
            var stream = await responseMessage.Content.ReadAsStreamAsync();
            using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
            {
            var serializer = new JsonSerializer();
            return serializer.Deserialize<System.Tuple<string, string, string, string, int>>(jsonReader);
            }
        }
        
        /// <summary>
        /// GET api/Tuple/Tuple5
        /// </summary>
        public System.Tuple<string, string, string, string, int> DemoWebApi.Controllers.TupleController.GetTuple5 (DemoCoreWeb)()
        {
            var requestUri = new Uri(this.baseUri, "api/Tuple/Tuple5");
            var responseMessage = this.client.GetAsync(requestUri).Result;
            responseMessage.EnsureSuccessStatusCode();
            var stream = responseMessage.Content.ReadAsStreamAsync().Result;
            using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
            {
            var serializer = new JsonSerializer();
            return serializer.Deserialize<System.Tuple<string, string, string, string, int>>(jsonReader);
            }
        }
        
        /// <summary>
        /// POST api/Tuple/Tuple5
        /// </summary>
        public async Task<string> DemoWebApi.Controllers.TupleController.PostTuple5 (DemoCoreWeb)Async(System.Tuple<string, string, string, string, int> tuple)
        {
            var requestUri = new Uri(this.baseUri, "api/Tuple/Tuple5");
            using (var requestWriter = new System.IO.StringWriter())
            {
            var requestSerializer = JsonSerializer.Create();
            requestSerializer.Serialize(requestWriter, tuple);
            var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
            var responseMessage = await client.PostAsync(requestUri, content);
            responseMessage.EnsureSuccessStatusCode();
            var stream = await responseMessage.Content.ReadAsStreamAsync();
            using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
            {
            var serializer = new JsonSerializer();
            return serializer.Deserialize<string>(jsonReader);
            }
            }
        }
        
        /// <summary>
        /// POST api/Tuple/Tuple5
        /// </summary>
        public string DemoWebApi.Controllers.TupleController.PostTuple5 (DemoCoreWeb)(System.Tuple<string, string, string, string, int> tuple)
        {
            var requestUri = new Uri(this.baseUri, "api/Tuple/Tuple5");
            using (var requestWriter = new System.IO.StringWriter())
            {
            var requestSerializer = JsonSerializer.Create();
            requestSerializer.Serialize(requestWriter, tuple);
            var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
            var responseMessage = this.client.PostAsync(requestUri, content).Result;
            responseMessage.EnsureSuccessStatusCode();
            var stream = responseMessage.Content.ReadAsStreamAsync().Result;
            using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
            {
            var serializer = new JsonSerializer();
            return serializer.Deserialize<string>(jsonReader);
            }
            }
        }
        
        /// <summary>
        /// GET api/Tuple/Tuple6
        /// </summary>
        public async Task<System.Tuple<string, string, string, string, string, int>> DemoWebApi.Controllers.TupleController.GetTuple6 (DemoCoreWeb)Async()
        {
            var requestUri = new Uri(this.baseUri, "api/Tuple/Tuple6");
            var responseMessage = await client.GetAsync(requestUri);
            responseMessage.EnsureSuccessStatusCode();
            var stream = await responseMessage.Content.ReadAsStreamAsync();
            using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
            {
            var serializer = new JsonSerializer();
            return serializer.Deserialize<System.Tuple<string, string, string, string, string, int>>(jsonReader);
            }
        }
        
        /// <summary>
        /// GET api/Tuple/Tuple6
        /// </summary>
        public System.Tuple<string, string, string, string, string, int> DemoWebApi.Controllers.TupleController.GetTuple6 (DemoCoreWeb)()
        {
            var requestUri = new Uri(this.baseUri, "api/Tuple/Tuple6");
            var responseMessage = this.client.GetAsync(requestUri).Result;
            responseMessage.EnsureSuccessStatusCode();
            var stream = responseMessage.Content.ReadAsStreamAsync().Result;
            using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
            {
            var serializer = new JsonSerializer();
            return serializer.Deserialize<System.Tuple<string, string, string, string, string, int>>(jsonReader);
            }
        }
        
        /// <summary>
        /// POST api/Tuple/Tuple6
        /// </summary>
        public async Task<string> DemoWebApi.Controllers.TupleController.PostTuple6 (DemoCoreWeb)Async(System.Tuple<string, string, string, string, string, int> tuple)
        {
            var requestUri = new Uri(this.baseUri, "api/Tuple/Tuple6");
            using (var requestWriter = new System.IO.StringWriter())
            {
            var requestSerializer = JsonSerializer.Create();
            requestSerializer.Serialize(requestWriter, tuple);
            var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
            var responseMessage = await client.PostAsync(requestUri, content);
            responseMessage.EnsureSuccessStatusCode();
            var stream = await responseMessage.Content.ReadAsStreamAsync();
            using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
            {
            var serializer = new JsonSerializer();
            return serializer.Deserialize<string>(jsonReader);
            }
            }
        }
        
        /// <summary>
        /// POST api/Tuple/Tuple6
        /// </summary>
        public string DemoWebApi.Controllers.TupleController.PostTuple6 (DemoCoreWeb)(System.Tuple<string, string, string, string, string, int> tuple)
        {
            var requestUri = new Uri(this.baseUri, "api/Tuple/Tuple6");
            using (var requestWriter = new System.IO.StringWriter())
            {
            var requestSerializer = JsonSerializer.Create();
            requestSerializer.Serialize(requestWriter, tuple);
            var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
            var responseMessage = this.client.PostAsync(requestUri, content).Result;
            responseMessage.EnsureSuccessStatusCode();
            var stream = responseMessage.Content.ReadAsStreamAsync().Result;
            using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
            {
            var serializer = new JsonSerializer();
            return serializer.Deserialize<string>(jsonReader);
            }
            }
        }
        
        /// <summary>
        /// GET api/Tuple/Tuple7
        /// </summary>
        public async Task<System.Tuple<string, string, string, string, string, long, int>> DemoWebApi.Controllers.TupleController.GetTuple7 (DemoCoreWeb)Async()
        {
            var requestUri = new Uri(this.baseUri, "api/Tuple/Tuple7");
            var responseMessage = await client.GetAsync(requestUri);
            responseMessage.EnsureSuccessStatusCode();
            var stream = await responseMessage.Content.ReadAsStreamAsync();
            using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
            {
            var serializer = new JsonSerializer();
            return serializer.Deserialize<System.Tuple<string, string, string, string, string, long, int>>(jsonReader);
            }
        }
        
        /// <summary>
        /// GET api/Tuple/Tuple7
        /// </summary>
        public System.Tuple<string, string, string, string, string, long, int> DemoWebApi.Controllers.TupleController.GetTuple7 (DemoCoreWeb)()
        {
            var requestUri = new Uri(this.baseUri, "api/Tuple/Tuple7");
            var responseMessage = this.client.GetAsync(requestUri).Result;
            responseMessage.EnsureSuccessStatusCode();
            var stream = responseMessage.Content.ReadAsStreamAsync().Result;
            using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
            {
            var serializer = new JsonSerializer();
            return serializer.Deserialize<System.Tuple<string, string, string, string, string, long, int>>(jsonReader);
            }
        }
        
        /// <summary>
        /// POST api/Tuple/Tuple7
        /// </summary>
        public async Task<string> DemoWebApi.Controllers.TupleController.PostTuple7 (DemoCoreWeb)Async(System.Tuple<string, string, string, string, string, long, int> tuple)
        {
            var requestUri = new Uri(this.baseUri, "api/Tuple/Tuple7");
            using (var requestWriter = new System.IO.StringWriter())
            {
            var requestSerializer = JsonSerializer.Create();
            requestSerializer.Serialize(requestWriter, tuple);
            var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
            var responseMessage = await client.PostAsync(requestUri, content);
            responseMessage.EnsureSuccessStatusCode();
            var stream = await responseMessage.Content.ReadAsStreamAsync();
            using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
            {
            var serializer = new JsonSerializer();
            return serializer.Deserialize<string>(jsonReader);
            }
            }
        }
        
        /// <summary>
        /// POST api/Tuple/Tuple7
        /// </summary>
        public string DemoWebApi.Controllers.TupleController.PostTuple7 (DemoCoreWeb)(System.Tuple<string, string, string, string, string, long, int> tuple)
        {
            var requestUri = new Uri(this.baseUri, "api/Tuple/Tuple7");
            using (var requestWriter = new System.IO.StringWriter())
            {
            var requestSerializer = JsonSerializer.Create();
            requestSerializer.Serialize(requestWriter, tuple);
            var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
            var responseMessage = this.client.PostAsync(requestUri, content).Result;
            responseMessage.EnsureSuccessStatusCode();
            var stream = responseMessage.Content.ReadAsStreamAsync().Result;
            using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
            {
            var serializer = new JsonSerializer();
            return serializer.Deserialize<string>(jsonReader);
            }
            }
        }
        
        /// <summary>
        /// GET api/Tuple/Tuple8
        /// </summary>
        public async Task<System.Tuple<string, string, string, string, string, string, int, System.Tuple<string, string, string>>> DemoWebApi.Controllers.TupleController.GetTuple8 (DemoCoreWeb)Async()
        {
            var requestUri = new Uri(this.baseUri, "api/Tuple/Tuple8");
            var responseMessage = await client.GetAsync(requestUri);
            responseMessage.EnsureSuccessStatusCode();
            var stream = await responseMessage.Content.ReadAsStreamAsync();
            using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
            {
            var serializer = new JsonSerializer();
            return serializer.Deserialize<System.Tuple<string, string, string, string, string, string, int, System.Tuple<string, string, string>>>(jsonReader);
            }
        }
        
        /// <summary>
        /// GET api/Tuple/Tuple8
        /// </summary>
        public System.Tuple<string, string, string, string, string, string, int, System.Tuple<string, string, string>> DemoWebApi.Controllers.TupleController.GetTuple8 (DemoCoreWeb)()
        {
            var requestUri = new Uri(this.baseUri, "api/Tuple/Tuple8");
            var responseMessage = this.client.GetAsync(requestUri).Result;
            responseMessage.EnsureSuccessStatusCode();
            var stream = responseMessage.Content.ReadAsStreamAsync().Result;
            using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
            {
            var serializer = new JsonSerializer();
            return serializer.Deserialize<System.Tuple<string, string, string, string, string, string, int, System.Tuple<string, string, string>>>(jsonReader);
            }
        }
        
        /// <summary>
        /// POST api/Tuple/Tuple8
        /// </summary>
        public async Task<string> DemoWebApi.Controllers.TupleController.PostTuple8 (DemoCoreWeb)Async(System.Tuple<string, string, string, string, string, string, string, System.Tuple<string, string, string>> tuple)
        {
            var requestUri = new Uri(this.baseUri, "api/Tuple/Tuple8");
            using (var requestWriter = new System.IO.StringWriter())
            {
            var requestSerializer = JsonSerializer.Create();
            requestSerializer.Serialize(requestWriter, tuple);
            var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
            var responseMessage = await client.PostAsync(requestUri, content);
            responseMessage.EnsureSuccessStatusCode();
            var stream = await responseMessage.Content.ReadAsStreamAsync();
            using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
            {
            var serializer = new JsonSerializer();
            return serializer.Deserialize<string>(jsonReader);
            }
            }
        }
        
        /// <summary>
        /// POST api/Tuple/Tuple8
        /// </summary>
        public string DemoWebApi.Controllers.TupleController.PostTuple8 (DemoCoreWeb)(System.Tuple<string, string, string, string, string, string, string, System.Tuple<string, string, string>> tuple)
        {
            var requestUri = new Uri(this.baseUri, "api/Tuple/Tuple8");
            using (var requestWriter = new System.IO.StringWriter())
            {
            var requestSerializer = JsonSerializer.Create();
            requestSerializer.Serialize(requestWriter, tuple);
            var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
            var responseMessage = this.client.PostAsync(requestUri, content).Result;
            responseMessage.EnsureSuccessStatusCode();
            var stream = responseMessage.Content.ReadAsStreamAsync().Result;
            using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
            {
            var serializer = new JsonSerializer();
            return serializer.Deserialize<string>(jsonReader);
            }
            }
        }
    }
}
