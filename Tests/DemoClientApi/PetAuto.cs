//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Net.Http;
	using Newtonsoft.Json;


	public class ApiResponse
	{

		public int Code { get; set; }

		public string Type { get; set; }

		public string Message { get; set; }
	}

	/// <summary>
	/// A representation of a cat
	/// </summary>
	public class Cat : Pet
	{

		/// <summary>
		/// The measured skill for hunting
		/// </summary>
		[System.ComponentModel.DataAnnotations.RequiredAttribute()]
		public CatHuntingSkill HuntingSkill { get; set; }
	}

	public enum CatHuntingSkill
	{

		clueless = 0,

		lazy = 1,

		adventurous = 2,

		aggressive = 3,
	}

	public class Category
	{

		/// <summary>
		/// Category ID
		/// </summary>
		public long Id { get; set; }

		/// <summary>
		/// Category name
		/// </summary>
		public string Name { get; set; }

		/// <summary>
		/// Test Sub Category
		/// </summary>
		public string Sub { get; set; }
	}

	/// <summary>
	/// A representation of a dog
	/// </summary>
	public class Dog : Pet
	{

		/// <summary>
		/// The size of the pack the dog is from
		/// </summary>
		[System.ComponentModel.DataAnnotations.RequiredAttribute()]
		public int PackSize { get; set; }
	}

	/// <summary>
	/// A representation of a honey bee
	/// </summary>
	public class HoneyBee : Pet
	{

		/// <summary>
		/// Average amount of honey produced per day in ounces
		/// </summary>
		[System.ComponentModel.DataAnnotations.RequiredAttribute()]
		public string HoneyPerDay { get; set; }
	}

	public class Order
	{

		/// <summary>
		/// Order ID
		/// </summary>
		public long Id { get; set; }

		/// <summary>
		/// Pet ID
		/// </summary>
		public long PetId { get; set; }

		public int Quantity { get; set; }

		/// <summary>
		/// Estimated ship date
		/// </summary>
		public System.DateTime ShipDate { get; set; }

		/// <summary>
		/// Order Status
		/// </summary>
		public OrderStatus Status { get; set; }

		/// <summary>
		/// Indicates whenever order was completed or not
		/// </summary>
		public bool Complete { get; set; }

		/// <summary>
		/// Unique Request Id
		/// </summary>
		public string RequestId { get; set; }
	}

	public enum OrderStatus
	{

		placed = 0,

		approved = 1,

		delivered = 2,
	}

	public class Pet
	{

		/// <summary>
		/// Pet ID
		/// </summary>
		public long Id { get; set; }

		/// <summary>
		/// Categories this pet belongs to
		/// </summary>
		public string Category { get; set; }

		/// <summary>
		/// The name given to a pet
		/// </summary>
		[System.ComponentModel.DataAnnotations.RequiredAttribute()]
		public string Name { get; set; }

		/// <summary>
		/// The list of URL to a cute photos featuring pet
		/// </summary>
		[System.ComponentModel.DataAnnotations.RequiredAttribute()]
		public string[] PhotoUrls { get; set; }

		public string Friend { get; set; }

		/// <summary>
		/// Tags attached to the pet
		/// </summary>
		public Tag[] Tags { get; set; }

		/// <summary>
		/// Pet status in the store
		/// </summary>
		public PetStatus Status { get; set; }

		/// <summary>
		/// Type of a pet
		/// </summary>
		public string PetType { get; set; }
	}

	public enum PetStatus
	{

		available = 0,

		pending = 1,

		sold = 2,
	}

	public class Tag
	{

		/// <summary>
		/// Tag ID
		/// </summary>
		public long Id { get; set; }

		/// <summary>
		/// Tag name
		/// </summary>
		public string Name { get; set; }
	}

	public class User
	{

		public long Id { get; set; }

		public string Pet { get; set; }

		/// <summary>
		/// User supplied username
		/// </summary>
		public string Username { get; set; }

		/// <summary>
		/// User first name
		/// </summary>
		public string FirstName { get; set; }

		/// <summary>
		/// User last name
		/// </summary>
		public string LastName { get; set; }

		/// <summary>
		/// User email address
		/// </summary>
		public string Email { get; set; }

		/// <summary>
		/// User password, MUST contain a mix of upper and lower case letters, as well as digits
		/// </summary>
		public string Password { get; set; }

		/// <summary>
		/// User phone number in international format
		/// </summary>
		public string Phone { get; set; }

		/// <summary>
		/// User status
		/// </summary>
		public int UserStatus { get; set; }
	}

	public partial class PetClient
	{

		private System.Net.Http.HttpClient client;

		private System.Uri baseUri;

		public PetClient(System.Net.Http.HttpClient client, System.Uri baseUri)
		{
			if (client == null)
				throw new ArgumentNullException("client", "Null HttpClient.");

			if (baseUri == null)
				throw new ArgumentNullException("baseUri", "Null baseUri");

			this.client = client;
			this.baseUri = baseUri;
		}

		/// <summary>
		/// Add new pet to the store inventory.
		/// addPet /pet
		/// </summary>
		/// <param name="requestBody">Pet object that needs to be added to the store</param>
		public async Task addPetAsync(Pet requestBody)
		{
			var requestUri = new Uri(this.baseUri, "/pet");
			using (var requestWriter = new System.IO.StringWriter())
			{
				var requestSerializer = JsonSerializer.Create();
				requestSerializer.Serialize(requestWriter, requestBody);
				var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
				var responseMessage = await client.PostAsync(requestUri, content);
				try
				{
					responseMessage.EnsureSuccessStatusCode();
				}
				finally
				{
					responseMessage.Dispose();
				}
			}
		}

		/// <summary>
		/// Add new pet to the store inventory.
		/// addPet /pet
		/// </summary>
		/// <param name="requestBody">Pet object that needs to be added to the store</param>
		public void addPet(Pet requestBody)
		{
			var requestUri = new Uri(this.baseUri, "/pet");
			using (var requestWriter = new System.IO.StringWriter())
			{
				var requestSerializer = JsonSerializer.Create();
				requestSerializer.Serialize(requestWriter, requestBody);
				var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
				var responseMessage = this.client.PostAsync(requestUri, content).Result;
				try
				{
					responseMessage.EnsureSuccessStatusCode();
				}
				finally
				{
					responseMessage.Dispose();
				}
			}
		}

		/// <summary>
		/// updatePet /pet
		/// </summary>
		/// <param name="requestBody">Pet object that needs to be added to the store</param>
		public async Task updatePetAsync(Pet requestBody)
		{
			var requestUri = new Uri(this.baseUri, "/pet");
			using (var requestWriter = new System.IO.StringWriter())
			{
				var requestSerializer = JsonSerializer.Create();
				requestSerializer.Serialize(requestWriter, requestBody);
				var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
				var responseMessage = await client.PutAsync(requestUri, content);
				try
				{
					responseMessage.EnsureSuccessStatusCode();
				}
				finally
				{
					responseMessage.Dispose();
				}
			}
		}

		/// <summary>
		/// updatePet /pet
		/// </summary>
		/// <param name="requestBody">Pet object that needs to be added to the store</param>
		public void updatePet(Pet requestBody)
		{
			var requestUri = new Uri(this.baseUri, "/pet");
			using (var requestWriter = new System.IO.StringWriter())
			{
				var requestSerializer = JsonSerializer.Create();
				requestSerializer.Serialize(requestWriter, requestBody);
				var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
				var responseMessage = this.client.PutAsync(requestUri, content).Result;
				try
				{
					responseMessage.EnsureSuccessStatusCode();
				}
				finally
				{
					responseMessage.Dispose();
				}
			}
		}

		/// <summary>
		/// Returns a single pet
		/// getPetById /pet/{petId}
		/// </summary>
		/// <param name="petId">ID of pet to return</param>
		/// <returns>successful operation</returns>
		public async Task<MyNS.Pet> getPetByIdAsync(long petId)
		{
			var requestUri = new Uri(this.baseUri, "/pet/" + petId);
			var responseMessage = await client.GetAsync(requestUri);
			try
			{
				responseMessage.EnsureSuccessStatusCode();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
					var serializer = new JsonSerializer();
					return serializer.Deserialize<MyNS.Pet>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
		}

		/// <summary>
		/// Returns a single pet
		/// getPetById /pet/{petId}
		/// </summary>
		/// <param name="petId">ID of pet to return</param>
		/// <returns>successful operation</returns>
		public MyNS.Pet getPetById(long petId)
		{
			var requestUri = new Uri(this.baseUri, "/pet/" + petId);
			var responseMessage = this.client.GetAsync(requestUri).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCode();
				var stream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
					var serializer = new JsonSerializer();
					return serializer.Deserialize<MyNS.Pet>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
		}

		/// <summary>
		/// updatePetWithForm /pet/{petId}
		/// </summary>
		/// <param name="petId">ID of pet that needs to be updated</param>
		public async Task updatePetWithFormAsync(long petId)
		{
			var requestUri = new Uri(this.baseUri, "/pet/" + petId);
			var responseMessage = await client.PostAsync(requestUri, new StringContent(String.Empty));
			try
			{
				responseMessage.EnsureSuccessStatusCode();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}

		/// <summary>
		/// updatePetWithForm /pet/{petId}
		/// </summary>
		/// <param name="petId">ID of pet that needs to be updated</param>
		public void updatePetWithForm(long petId)
		{
			var requestUri = new Uri(this.baseUri, "/pet/" + petId);
			var responseMessage = this.client.PostAsync(requestUri, new StringContent(String.Empty)).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCode();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}

		/// <summary>
		/// deletePet /pet/{petId}
		/// </summary>
		/// <param name="petId">Pet id to delete</param>
		public async Task deletePetAsync(long petId)
		{
			var requestUri = new Uri(this.baseUri, "/pet/" + petId);
			var responseMessage = await client.DeleteAsync(requestUri);
			try
			{
				responseMessage.EnsureSuccessStatusCode();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}

		/// <summary>
		/// deletePet /pet/{petId}
		/// </summary>
		/// <param name="petId">Pet id to delete</param>
		public void deletePet(long petId)
		{
			var requestUri = new Uri(this.baseUri, "/pet/" + petId);
			var responseMessage = this.client.DeleteAsync(requestUri).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCode();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}

		/// <summary>
		/// uploadFile /pet/{petId}/uploadImage
		/// </summary>
		/// <param name="petId">ID of pet to update</param>
		/// <returns>successful operation</returns>
		public async Task<MyNS.ApiResponse> uploadFileAsync(long petId)
		{
			var requestUri = new Uri(this.baseUri, "/pet/" + petId + "/uploadImage");
			var responseMessage = await client.PostAsync(requestUri, new StringContent(String.Empty));
			try
			{
				responseMessage.EnsureSuccessStatusCode();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
					var serializer = new JsonSerializer();
					return serializer.Deserialize<MyNS.ApiResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
		}

		/// <summary>
		/// uploadFile /pet/{petId}/uploadImage
		/// </summary>
		/// <param name="petId">ID of pet to update</param>
		/// <returns>successful operation</returns>
		public MyNS.ApiResponse uploadFile(long petId)
		{
			var requestUri = new Uri(this.baseUri, "/pet/" + petId + "/uploadImage");
			var responseMessage = this.client.PostAsync(requestUri, new StringContent(String.Empty)).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCode();
				var stream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
					var serializer = new JsonSerializer();
					return serializer.Deserialize<MyNS.ApiResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
		}

		/// <summary>
		/// Multiple status values can be provided with comma separated strings
		/// findPetsByStatus /pet/findByStatus
		/// </summary>
		/// <param name="status">Status values that need to be considered for filter</param>
		/// <returns>successful operation</returns>
		public async Task<Pet[]> findPetsByStatusAsync(string status)
		{
			var requestUri = new Uri(this.baseUri, "/pet/findByStatus");
			var responseMessage = await client.GetAsync(requestUri);
			try
			{
				responseMessage.EnsureSuccessStatusCode();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
					var serializer = new JsonSerializer();
					return serializer.Deserialize<Pet[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
		}

		/// <summary>
		/// Multiple status values can be provided with comma separated strings
		/// findPetsByStatus /pet/findByStatus
		/// </summary>
		/// <param name="status">Status values that need to be considered for filter</param>
		/// <returns>successful operation</returns>
		public Pet[] findPetsByStatus(string status)
		{
			var requestUri = new Uri(this.baseUri, "/pet/findByStatus");
			var responseMessage = this.client.GetAsync(requestUri).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCode();
				var stream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
					var serializer = new JsonSerializer();
					return serializer.Deserialize<Pet[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
		}

		/// <summary>
		/// Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.
		/// findPetsByTags /pet/findByTags
		/// </summary>
		/// <param name="tags">Tags to filter by</param>
		/// <returns>successful operation</returns>
		public async Task<Pet[]> findPetsByTagsAsync(string tags)
		{
			var requestUri = new Uri(this.baseUri, "/pet/findByTags");
			var responseMessage = await client.GetAsync(requestUri);
			try
			{
				responseMessage.EnsureSuccessStatusCode();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
					var serializer = new JsonSerializer();
					return serializer.Deserialize<Pet[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
		}

		/// <summary>
		/// Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.
		/// findPetsByTags /pet/findByTags
		/// </summary>
		/// <param name="tags">Tags to filter by</param>
		/// <returns>successful operation</returns>
		public Pet[] findPetsByTags(string tags)
		{
			var requestUri = new Uri(this.baseUri, "/pet/findByTags");
			var responseMessage = this.client.GetAsync(requestUri).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCode();
				var stream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
					var serializer = new JsonSerializer();
					return serializer.Deserialize<Pet[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
	}

	public partial class StoreClient
	{

		private System.Net.Http.HttpClient client;

		private System.Uri baseUri;

		public StoreClient(System.Net.Http.HttpClient client, System.Uri baseUri)
		{
			if (client == null)
				throw new ArgumentNullException("client", "Null HttpClient.");

			if (baseUri == null)
				throw new ArgumentNullException("baseUri", "Null baseUri");

			this.client = client;
			this.baseUri = baseUri;
		}

		/// <summary>
		/// Returns a map of status codes to quantities
		/// getInventory /store/inventory
		/// </summary>
		/// <returns>successful operation</returns>
		public async Task<string> getInventoryAsync()
		{
			var requestUri = new Uri(this.baseUri, "/store/inventory");
			var responseMessage = await client.GetAsync(requestUri);
			try
			{
				responseMessage.EnsureSuccessStatusCode();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
					return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
		}

		/// <summary>
		/// Returns a map of status codes to quantities
		/// getInventory /store/inventory
		/// </summary>
		/// <returns>successful operation</returns>
		public string getInventory()
		{
			var requestUri = new Uri(this.baseUri, "/store/inventory");
			var responseMessage = this.client.GetAsync(requestUri).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCode();
				var stream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
					return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
		}

		/// <summary>
		/// placeOrder /store/order
		/// </summary>
		/// <param name="requestBody">order placed for purchasing the pet</param>
		/// <returns>successful operation</returns>
		public async Task<MyNS.Order> placeOrderAsync(string requestBody)
		{
			var requestUri = new Uri(this.baseUri, "/store/order");
			using (var requestWriter = new System.IO.StringWriter())
			{
				var requestSerializer = JsonSerializer.Create();
				requestSerializer.Serialize(requestWriter, requestBody);
				var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
				var responseMessage = await client.PostAsync(requestUri, content);
				try
				{
					responseMessage.EnsureSuccessStatusCode();
					var stream = await responseMessage.Content.ReadAsStreamAsync();
					using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
					{
						var serializer = new JsonSerializer();
						return serializer.Deserialize<MyNS.Order>(jsonReader);
					}
				}
				finally
				{
					responseMessage.Dispose();
				}
			}
		}

		/// <summary>
		/// placeOrder /store/order
		/// </summary>
		/// <param name="requestBody">order placed for purchasing the pet</param>
		/// <returns>successful operation</returns>
		public MyNS.Order placeOrder(string requestBody)
		{
			var requestUri = new Uri(this.baseUri, "/store/order");
			using (var requestWriter = new System.IO.StringWriter())
			{
				var requestSerializer = JsonSerializer.Create();
				requestSerializer.Serialize(requestWriter, requestBody);
				var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
				var responseMessage = this.client.PostAsync(requestUri, content).Result;
				try
				{
					responseMessage.EnsureSuccessStatusCode();
					var stream = responseMessage.Content.ReadAsStreamAsync().Result;
					using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
					{
						var serializer = new JsonSerializer();
						return serializer.Deserialize<MyNS.Order>(jsonReader);
					}
				}
				finally
				{
					responseMessage.Dispose();
				}
			}
		}

		/// <summary>
		/// For valid response try integer IDs with value <= 5 or > 10. Other values will generated exceptions
		/// getOrderById /store/order/{orderId}
		/// </summary>
		/// <param name="orderId">ID of pet that needs to be fetched</param>
		/// <returns>successful operation</returns>
		public async Task<MyNS.Order> getOrderByIdAsync(long orderId)
		{
			var requestUri = new Uri(this.baseUri, "/store/order/" + orderId);
			var responseMessage = await client.GetAsync(requestUri);
			try
			{
				responseMessage.EnsureSuccessStatusCode();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
					var serializer = new JsonSerializer();
					return serializer.Deserialize<MyNS.Order>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
		}

		/// <summary>
		/// For valid response try integer IDs with value <= 5 or > 10. Other values will generated exceptions
		/// getOrderById /store/order/{orderId}
		/// </summary>
		/// <param name="orderId">ID of pet that needs to be fetched</param>
		/// <returns>successful operation</returns>
		public MyNS.Order getOrderById(long orderId)
		{
			var requestUri = new Uri(this.baseUri, "/store/order/" + orderId);
			var responseMessage = this.client.GetAsync(requestUri).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCode();
				var stream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
					var serializer = new JsonSerializer();
					return serializer.Deserialize<MyNS.Order>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
		}

		/// <summary>
		/// For valid response try integer IDs with value < 1000. Anything above 1000 or nonintegers will generate API errors
		/// deleteOrder /store/order/{orderId}
		/// </summary>
		/// <param name="orderId">ID of the order that needs to be deleted</param>
		public async Task deleteOrderAsync(string orderId)
		{
			var requestUri = new Uri(this.baseUri, "/store/order/" + Uri.EscapeDataString(orderId));
			var responseMessage = await client.DeleteAsync(requestUri);
			try
			{
				responseMessage.EnsureSuccessStatusCode();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}

		/// <summary>
		/// For valid response try integer IDs with value < 1000. Anything above 1000 or nonintegers will generate API errors
		/// deleteOrder /store/order/{orderId}
		/// </summary>
		/// <param name="orderId">ID of the order that needs to be deleted</param>
		public void deleteOrder(string orderId)
		{
			var requestUri = new Uri(this.baseUri, "/store/order/" + Uri.EscapeDataString(orderId));
			var responseMessage = this.client.DeleteAsync(requestUri).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCode();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
	}

	public partial class UserClient
	{

		private System.Net.Http.HttpClient client;

		private System.Uri baseUri;

		public UserClient(System.Net.Http.HttpClient client, System.Uri baseUri)
		{
			if (client == null)
				throw new ArgumentNullException("client", "Null HttpClient.");

			if (baseUri == null)
				throw new ArgumentNullException("baseUri", "Null baseUri");

			this.client = client;
			this.baseUri = baseUri;
		}

		/// <summary>
		/// This can only be done by the logged in user.
		/// createUser /user
		/// </summary>
		/// <param name="requestBody">Created user object</param>
		public async Task createUserAsync(string requestBody)
		{
			var requestUri = new Uri(this.baseUri, "/user");
			using (var requestWriter = new System.IO.StringWriter())
			{
				var requestSerializer = JsonSerializer.Create();
				requestSerializer.Serialize(requestWriter, requestBody);
				var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
				var responseMessage = await client.PostAsync(requestUri, content);
				try
				{
					responseMessage.EnsureSuccessStatusCode();
				}
				finally
				{
					responseMessage.Dispose();
				}
			}
		}

		/// <summary>
		/// This can only be done by the logged in user.
		/// createUser /user
		/// </summary>
		/// <param name="requestBody">Created user object</param>
		public void createUser(string requestBody)
		{
			var requestUri = new Uri(this.baseUri, "/user");
			using (var requestWriter = new System.IO.StringWriter())
			{
				var requestSerializer = JsonSerializer.Create();
				requestSerializer.Serialize(requestWriter, requestBody);
				var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
				var responseMessage = this.client.PostAsync(requestUri, content).Result;
				try
				{
					responseMessage.EnsureSuccessStatusCode();
				}
				finally
				{
					responseMessage.Dispose();
				}
			}
		}

		/// <summary>
		/// getUserByName /user/{username}
		/// </summary>
		/// <param name="username">The name that needs to be fetched. Use user1 for testing. </param>
		/// <returns>successful operation</returns>
		public async Task<MyNS.User> getUserByNameAsync(string username)
		{
			var requestUri = new Uri(this.baseUri, "/user/" + Uri.EscapeDataString(username));
			var responseMessage = await client.GetAsync(requestUri);
			try
			{
				responseMessage.EnsureSuccessStatusCode();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
					var serializer = new JsonSerializer();
					return serializer.Deserialize<MyNS.User>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
		}

		/// <summary>
		/// getUserByName /user/{username}
		/// </summary>
		/// <param name="username">The name that needs to be fetched. Use user1 for testing. </param>
		/// <returns>successful operation</returns>
		public MyNS.User getUserByName(string username)
		{
			var requestUri = new Uri(this.baseUri, "/user/" + Uri.EscapeDataString(username));
			var responseMessage = this.client.GetAsync(requestUri).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCode();
				var stream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
					var serializer = new JsonSerializer();
					return serializer.Deserialize<MyNS.User>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
		}

		/// <summary>
		/// This can only be done by the logged in user.
		/// updateUser /user/{username}
		/// </summary>
		/// <param name="username">name that need to be deleted</param>
		/// <param name="requestBody">Updated user object</param>
		public async Task updateUserAsync(string username, string requestBody)
		{
			var requestUri = new Uri(this.baseUri, "/user/" + Uri.EscapeDataString(username));
			using (var requestWriter = new System.IO.StringWriter())
			{
				var requestSerializer = JsonSerializer.Create();
				requestSerializer.Serialize(requestWriter, requestBody);
				var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
				var responseMessage = await client.PutAsync(requestUri, content);
				try
				{
					responseMessage.EnsureSuccessStatusCode();
				}
				finally
				{
					responseMessage.Dispose();
				}
			}
		}

		/// <summary>
		/// This can only be done by the logged in user.
		/// updateUser /user/{username}
		/// </summary>
		/// <param name="username">name that need to be deleted</param>
		/// <param name="requestBody">Updated user object</param>
		public void updateUser(string username, string requestBody)
		{
			var requestUri = new Uri(this.baseUri, "/user/" + Uri.EscapeDataString(username));
			using (var requestWriter = new System.IO.StringWriter())
			{
				var requestSerializer = JsonSerializer.Create();
				requestSerializer.Serialize(requestWriter, requestBody);
				var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
				var responseMessage = this.client.PutAsync(requestUri, content).Result;
				try
				{
					responseMessage.EnsureSuccessStatusCode();
				}
				finally
				{
					responseMessage.Dispose();
				}
			}
		}

		/// <summary>
		/// This can only be done by the logged in user.
		/// deleteUser /user/{username}
		/// </summary>
		/// <param name="username">The name that needs to be deleted</param>
		public async Task deleteUserAsync(string username)
		{
			var requestUri = new Uri(this.baseUri, "/user/" + Uri.EscapeDataString(username));
			var responseMessage = await client.DeleteAsync(requestUri);
			try
			{
				responseMessage.EnsureSuccessStatusCode();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}

		/// <summary>
		/// This can only be done by the logged in user.
		/// deleteUser /user/{username}
		/// </summary>
		/// <param name="username">The name that needs to be deleted</param>
		public void deleteUser(string username)
		{
			var requestUri = new Uri(this.baseUri, "/user/" + Uri.EscapeDataString(username));
			var responseMessage = this.client.DeleteAsync(requestUri).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCode();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}

		/// <summary>
		/// createUsersWithArrayInput /user/createWithArray
		/// </summary>
		/// <param name="requestBody">List of user object</param>
		public async Task createUsersWithArrayInputAsync(User[] requestBody)
		{
			var requestUri = new Uri(this.baseUri, "/user/createWithArray");
			using (var requestWriter = new System.IO.StringWriter())
			{
				var requestSerializer = JsonSerializer.Create();
				requestSerializer.Serialize(requestWriter, requestBody);
				var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
				var responseMessage = await client.PostAsync(requestUri, content);
				try
				{
					responseMessage.EnsureSuccessStatusCode();
				}
				finally
				{
					responseMessage.Dispose();
				}
			}
		}

		/// <summary>
		/// createUsersWithArrayInput /user/createWithArray
		/// </summary>
		/// <param name="requestBody">List of user object</param>
		public void createUsersWithArrayInput(User[] requestBody)
		{
			var requestUri = new Uri(this.baseUri, "/user/createWithArray");
			using (var requestWriter = new System.IO.StringWriter())
			{
				var requestSerializer = JsonSerializer.Create();
				requestSerializer.Serialize(requestWriter, requestBody);
				var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
				var responseMessage = this.client.PostAsync(requestUri, content).Result;
				try
				{
					responseMessage.EnsureSuccessStatusCode();
				}
				finally
				{
					responseMessage.Dispose();
				}
			}
		}

		/// <summary>
		/// createUsersWithListInput /user/createWithList
		/// </summary>
		/// <param name="requestBody">List of user object</param>
		public async Task createUsersWithListInputAsync(User[] requestBody)
		{
			var requestUri = new Uri(this.baseUri, "/user/createWithList");
			using (var requestWriter = new System.IO.StringWriter())
			{
				var requestSerializer = JsonSerializer.Create();
				requestSerializer.Serialize(requestWriter, requestBody);
				var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
				var responseMessage = await client.PostAsync(requestUri, content);
				try
				{
					responseMessage.EnsureSuccessStatusCode();
				}
				finally
				{
					responseMessage.Dispose();
				}
			}
		}

		/// <summary>
		/// createUsersWithListInput /user/createWithList
		/// </summary>
		/// <param name="requestBody">List of user object</param>
		public void createUsersWithListInput(User[] requestBody)
		{
			var requestUri = new Uri(this.baseUri, "/user/createWithList");
			using (var requestWriter = new System.IO.StringWriter())
			{
				var requestSerializer = JsonSerializer.Create();
				requestSerializer.Serialize(requestWriter, requestBody);
				var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
				var responseMessage = this.client.PostAsync(requestUri, content).Result;
				try
				{
					responseMessage.EnsureSuccessStatusCode();
				}
				finally
				{
					responseMessage.Dispose();
				}
			}
		}

		/// <summary>
		/// loginUser /user/login
		/// </summary>
		/// <param name="username">The user name for login</param>
		/// <param name="password">The password for login in clear text</param>
		/// <returns>successful operation</returns>
		public async Task<string> loginUserAsync(string username, string password)
		{
			var requestUri = new Uri(this.baseUri, "/user/login");
			var responseMessage = await client.GetAsync(requestUri);
			try
			{
				responseMessage.EnsureSuccessStatusCode();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
					return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
		}

		/// <summary>
		/// loginUser /user/login
		/// </summary>
		/// <param name="username">The user name for login</param>
		/// <param name="password">The password for login in clear text</param>
		/// <returns>successful operation</returns>
		public string loginUser(string username, string password)
		{
			var requestUri = new Uri(this.baseUri, "/user/login");
			var responseMessage = this.client.GetAsync(requestUri).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCode();
				var stream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
					return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
		}

		/// <summary>
		/// logoutUser /user/logout
		/// </summary>
		public async Task logoutUserAsync()
		{
			var requestUri = new Uri(this.baseUri, "/user/logout");
			var responseMessage = await client.GetAsync(requestUri);
			try
			{
				responseMessage.EnsureSuccessStatusCode();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}

		/// <summary>
		/// logoutUser /user/logout
		/// </summary>
		public void logoutUser()
		{
			var requestUri = new Uri(this.baseUri, "/user/logout");
			var responseMessage = this.client.GetAsync(requestUri).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCode();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
	}
}
