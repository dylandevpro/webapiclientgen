import { Injectable, Inject } from '@angular/core';
import { HttpClient, HttpHeaders, HttpResponse } from '@angular/common/http';
import { Observable } from 'rxjs';
export namespace MyNS {

	/**The type that defines the fields for the currency and a monetary amount. */
	export interface Amount {

		/**The three-letter ISO 4217 code representing the currency of the amount in the value field. Restriction: Only the currency of the marketplace is supported. For example, on the US marketplace the only currency supported is USD. For implementation help, refer to <a href='https://developer.ebay.com/devzone/rest/api-ref/listing/types/CurrencyCodeEnum.html'>eBay API documentation</a> */
		currency?: string;

		/**The monetary amount, in the currency specified by the currency field. */
		value?: string;
	}


	/**The type that defines the fields for the item aspects. */
	export interface Aspect {

		/**The name of an aspect, such and Brand. */
		name?: string;

		/**A list of potential values for this aspect. */
		values?: Array<string>;
	}


	/**This type is used to identify the charitable organization that will receive a percentage of sale proceeds for each sale generated by the listing. This container also includes the donation percentage, which is the percentage of the sale proceeds that the charitable organization will get. In order to receive a percentage of the sales proceeds, the non-profit organization must be registered with the PayPal Giving Fund, which is a partner of eBay for Charity. */
	export interface Charity {

		/**This field sets the percentage of the purchase price that the charitable organization (identified in the charityId field) will receive for each sale that the listing generates. This field is conditionally required if a seller is planning on donating a percentage of the sale proceeds to a charitable organization. This numeric value can range from 10 to 100, and in any 5 (percent) increments in between this range (e.g. 10, 15, 20...95,... 100). The seller would pass in 10 for 10 percent, 15 for 15 percent, 20 for 20 percent, and so on, all the way to 100 for 100 percent. Note: For this field, createItemDraft will only validate that a positive integer value is supplied, so the listing draft will still be successfully created (with no error or warning message) if a non-supported value is specified. However, if the seller attempted to publish this listing draft with an unsupported value, the charity information would just be dropped from the listing. */
		donationPercentage?: string;

		/**The eBay-assigned unique identifier of the charitable organization that will receive a percentage of the sales proceeds. The charitable organization must be reqistered with the PayPal Giving Fund in order to receive sales proceeds through eBay listings. This field is conditionally required if a seller is planning on donating a percentage of the sale proceeds to a charitable organization. The eBay-assigned unique identifier of a charitable organization can be found using the GetCharities call of the Trading API. In the GetCharities call response, this unique identifier is shown in the id attribute of the Charity container. */
		charityId?: string;
	}


	/**This type defines the fields that can be returned in an error. */
	export interface Error {

		/**Identifies the type of erro. */
		category?: string;

		/**Name for the primary system where the error occurred. This is relevant for application errors. */
		domain?: string;

		/**A unique number to identify the error. */
		errorId?: number;

		/**An array of request elements most closely associated to the error. */
		inputRefIds?: Array<string>;

		/**A more detailed explanation of the error. */
		longMessage?: string;

		/**Information on how to correct the problem, in the end user's terms and language where applicable. */
		message?: string;

		/**An array of request elements most closely associated to the error. */
		outputRefIds?: Array<string>;

		/**An array of name/value pairs that describe details the error condition. These are useful when multiple errors are returned. */
		parameters?: Array<ErrorParameter>;

		/**Further helps indicate which subsystem the error is coming from. System subcategories include: Initialization, Serialization, Security, Monitoring, Rate Limiting, etc. */
		subdomain?: string;
	}

	export interface ErrorParameter {

		/**The object of the error. */
		name?: string;

		/**The value of the object. */
		value?: string;
	}


	/**The type that defines the fields for the listing details. */
	export interface ItemDraft {

		/**The ID of the leaf category associated with this item. A leaf category is the lowest level in that category and has no children. Note: If you submit both a category ID and an EPID, eBay determines the best category based on the EPID and uses that. The category ID will be ignored. */
		categoryId?: string;

		/**An enumeration value representing the condition of the item, such as NEW. For implementation help, refer to <a href='https://developer.ebay.com/devzone/rest/api-ref/listing/types/ConditionEnum.html'>eBay API documentation</a> */
		condition?: string;

		/**The format of the listing. Valid Values: FIXED_PRICE and AUCTION For implementation help, refer to <a href='https://developer.ebay.com/devzone/rest/api-ref/listing/types/ListingFormatEnum.html'>eBay API documentation</a> */
		format?: string;

		/**The type that defines the fields for the price details for an item. */
		pricingSummary?: PricingSummary;

		/**The type that defines the fields for the aspects of a product. */
		product?: Product;

		/**This type is used to identify the charitable organization that will receive a percentage of sale proceeds for each sale generated by the listing. This container also includes the donation percentage, which is the percentage of the sale proceeds that the charitable organization will get. In order to receive a percentage of the sales proceeds, the non-profit organization must be registered with the PayPal Giving Fund, which is a partner of eBay for Charity. */
		charity?: Charity;
	}


	/**The type that defines the field for the createItemDraft response. */
	export interface ItemDraftResponse {

		/**The eBay generated ID of the listing draft. */
		itemDraftId?: string;

		/**The URI the Partner uses to send the seller to their listing draft that was created on the eBay site. From there the seller can change, update, and publish the item on eBay. This is returned when the seller is using a mobile app. */
		sellFlowNativeUri?: string;

		/**The web URL the Partner uses to send the seller to the listing draft that was created on the eBay site. From there the seller can change, update, and publish the item on eBay. This is returned when the seller is using mobile web (mweb) or the desktop web. Note: You must construct the URL using the URL returned in this field and a session token. For example: sellFlowUrl?id_token=session_token */
		sellFlowUrl?: string;
	}


	/**The type that defines the fields for the price details for an item. */
	export interface PricingSummary {

		/**The type that defines the fields for the currency and a monetary amount. */
		auctionReservePrice?: Amount;

		/**The type that defines the fields for the currency and a monetary amount. */
		auctionStartPrice?: Amount;

		/**The type that defines the fields for the currency and a monetary amount. */
		price?: Amount;
	}


	/**The type that defines the fields for the aspects of a product. */
	export interface Product {

		/**The list of item aspects that describe the item (such as size, color, capacity, model, brand, etc.) */
		aspects?: Array<Aspect>;

		/**The name brand of the item, such as Nike, Apple, etc. */
		brand?: string;

		/**The description of the item that was created by the seller. This can be plain text or rich content. */
		description?: string;

		/**An EPID is the eBay product identifier of a product from the eBay product catalog. Note: If you submit both a category ID and an EPID, eBay determines the best category based on the EPID and uses that. The category ID will be ignored. */
		epid?: string;

		/**The image URLs of the item. The first URL will be the primary image, which appears on the View Item page in the eBay listing. The URL can be from the following: The eBay Picture Services (images previously uploaded). A server outside of eBay (self-hosted). For more details, see PictureURL and Introduction to Pictures in Listings. Maximum: 12 URLs (for most categories and marketplaces) Restrictions: You cannot mix self-hosted and EPS-hosted URLs in the same listing. All image URLs must be 'https'. */
		imageUrls?: Array<string>;

		/**The seller-created title of the item. This should include unique characteristics of the item, such as brand, model, color, size, capacity, etc. For example: Levi's 501 size 10 black jeans */
		title?: string;
	}

	@Injectable()
	export class Item_draftClient {
		constructor(@Inject('baseUri') private baseUri: string = location.protocol + '//' + location.hostname + (location.port ? ':' + location.port : '') + '/', private http: HttpClient) {
		}

		/**
		 * This call gives Partners the ability to create an eBay draft of a item for their seller using information from their site. This lets the Partner increase the exposure of items on their site and leverage the eBay user listing experience seamlessly. This experience provides guidance on pricing, aspects, etc. and recommendations that help create a listing that is complete and improves the exposure of the listing in search results. After the listing draft is created, the seller logs into their eBay account and uses the listing experience to finish the listing and publish the item on eBay.
		 * Post item_draft/
		 * @return {void} 
		 */
		CreateItemDraft(requestBody: ItemDraft): Observable<Response> {
			return this.http.post<Response>(this.baseUri + 'item_draft/', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}
	}

}

