import { Injectable, Inject } from '@angular/core';
import { HttpClient, HttpHeaders, HttpResponse } from '@angular/common/http';
import { Observable } from 'rxjs';
export namespace MyNS {
	export interface ApiResponse {
		code?: number;
		type?: string;
		message?: string;
	}


	/**A representation of a cat */
	export interface Cat extends Pet {

		/**The measured skill for hunting */
		huntingSkill: CatHuntingSkill;
	}

	export enum CatHuntingSkill { clueless = 0, lazy = 1, adventurous = 2, aggressive = 3 }

	export interface Category {

		/**Category ID */
		id?: number;

		/**Category name */
		name?: string;

		/**Test Sub Category */
		sub?: string;
	}


	/**A representation of a dog */
	export interface Dog extends Pet {

		/**The size of the pack the dog is from */
		packSize: number;
	}


	/**A representation of a honey bee */
	export interface HoneyBee extends Pet {

		/**Average amount of honey produced per day in ounces */
		honeyPerDay: number;
	}

	export interface Order {

		/**Order ID */
		id?: number;

		/**Pet ID */
		petId?: number;
		quantity?: number;

		/**Estimated ship date */
		shipDate?: Date;

		/**Order Status */
		status?: OrderStatus;

		/**Indicates whenever order was completed or not */
		complete?: boolean;

		/**Unique Request Id */
		requestId?: string;
	}

	export enum OrderStatus { placed = 0, approved = 1, delivered = 2 }

	export interface Pet {

		/**Pet ID */
		id?: number;

		/**Categories this pet belongs to */
		category?: string;

		/**The name given to a pet */
		name: string;

		/**The list of URL to a cute photos featuring pet */
		photoUrls: Array<string>;
		friend?: string;

		/**Tags attached to the pet */
		tags?: Array<Tag>;

		/**Pet status in the store */
		status?: PetStatus;

		/**Type of a pet */
		petType?: string;
	}

	export enum PetStatus { available = 0, pending = 1, sold = 2 }

	export interface Tag {

		/**Tag ID */
		id?: number;

		/**Tag name */
		name?: string;
	}

	export interface User {
		id?: number;
		pet?: string;

		/**User supplied username */
		username?: string;

		/**User first name */
		firstName?: string;

		/**User last name */
		lastName?: string;

		/**User email address */
		email?: string;

		/**User password, MUST contain a mix of upper and lower case letters, as well as digits */
		password?: string;

		/**User phone number in international format */
		phone?: string;

		/**User status */
		userStatus?: number;
	}

	@Injectable()
	export class PetClient {
		constructor(@Inject('baseUri') private baseUri: string = location.protocol + '//' + location.hostname + (location.port ? ':' + location.port : '') + '/', private http: HttpClient) {
		}

		/**
		 * Add new pet to the store inventory.
		 * Post /pet
		 * @param {Pet} requestBody Pet object that needs to be added to the store
		 * @return {void} 
		 */
		AddPet(requestBody: Pet): Observable<Response> {
			return this.http.post<Response>(this.baseUri + '/pet', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Put /pet
		 * @param {Pet} requestBody Pet object that needs to be added to the store
		 * @return {void} 
		 */
		UpdatePet(requestBody: Pet): Observable<Response> {
			return this.http.put<Response>(this.baseUri + '/pet', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Returns a single pet
		 * Get /pet/{petId}
		 * @param {number} petId ID of pet to return
		 * @param {Pet} requestBody Pet object that needs to be added to the store
		 * @return {MyNS.Pet} successful operation
		 */
		GetPetById(petId: number, requestBody: Pet): Observable<MyNS.Pet> {
			return this.http.get<MyNS.Pet>(this.baseUri + '/pet/' + petId);
		}

		/**
		 * Post /pet/{petId}
		 * @param {number} petId ID of pet that needs to be updated
		 * @param {Pet} requestBody Pet object that needs to be added to the store
		 * @return {void} 
		 */
		UpdatePetWithForm(petId: number, requestBody: Pet): Observable<Response> {
			return this.http.post<Response>(this.baseUri + '/pet/' + petId, JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Delete /pet/{petId}
		 * @param {number} petId Pet id to delete
		 * @param {Pet} requestBody Pet object that needs to be added to the store
		 * @return {void} 
		 */
		DeletePet(petId: number, requestBody: Pet): Observable<Response> {
			return this.http.delete<Response>(this.baseUri + '/pet/' + petId);
		}

		/**
		 * Post /pet/{petId}/uploadImage
		 * @param {number} petId ID of pet to update
		 * @param {Pet} requestBody Pet object that needs to be added to the store
		 * @return {MyNS.ApiResponse} successful operation
		 */
		UploadFile(petId: number, requestBody: Pet): Observable<MyNS.ApiResponse> {
			return this.http.post<MyNS.ApiResponse>(this.baseUri + '/pet/' + petId + '/uploadImage', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Multiple status values can be provided with comma separated strings
		 * Get /pet/findByStatus
		 * @param {string} status Status values that need to be considered for filter
		 * @param {Pet} requestBody Pet object that needs to be added to the store
		 * @return {Array<Pet>} successful operation
		 */
		FindPetsByStatus(status: string, requestBody: Pet): Observable<Array<Pet>> {
			return this.http.get<Array<Pet>>(this.baseUri + '/pet/findByStatus?status=' + encodeURIComponent(status));
		}

		/**
		 * Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.
		 * Get /pet/findByTags
		 * @param {string} tags Tags to filter by
		 * @param {Pet} requestBody Pet object that needs to be added to the store
		 * @return {Array<Pet>} successful operation
		 */
		FindPetsByTags(tags: string, requestBody: Pet): Observable<Array<Pet>> {
			return this.http.get<Array<Pet>>(this.baseUri + '/pet/findByTags?tags=' + encodeURIComponent(tags));
		}
	}

	@Injectable()
	export class StoreClient {
		constructor(@Inject('baseUri') private baseUri: string = location.protocol + '//' + location.hostname + (location.port ? ':' + location.port : '') + '/', private http: HttpClient) {
		}

		/**
		 * Returns a map of status codes to quantities
		 * Get /store/inventory
		 * @param {Pet} requestBody Pet object that needs to be added to the store
		 * @return {string} successful operation
		 */
		GetInventory(requestBody: Pet): Observable<string> {
			return this.http.get(this.baseUri + '/store/inventory', { responseType: 'text' });
		}

		/**
		 * Post /store/order
		 * @param {string} requestBody order placed for purchasing the pet
		 * @return {MyNS.Order} successful operation
		 */
		PlaceOrder(requestBody: string): Observable<MyNS.Order> {
			return this.http.post<MyNS.Order>(this.baseUri + '/store/order', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * For valid response try integer IDs with value <= 5 or > 10. Other values will generated exceptions
		 * Get /store/order/{orderId}
		 * @param {number} orderId ID of pet that needs to be fetched
		 * @param {string} requestBody order placed for purchasing the pet
		 * @return {MyNS.Order} successful operation
		 */
		GetOrderById(orderId: number, requestBody: string): Observable<MyNS.Order> {
			return this.http.get<MyNS.Order>(this.baseUri + '/store/order/' + orderId);
		}

		/**
		 * For valid response try integer IDs with value < 1000. Anything above 1000 or nonintegers will generate API errors
		 * Delete /store/order/{orderId}
		 * @param {string} orderId ID of the order that needs to be deleted
		 * @param {string} requestBody order placed for purchasing the pet
		 * @return {void} 
		 */
		DeleteOrder(orderId: string, requestBody: string): Observable<Response> {
			return this.http.delete<Response>(this.baseUri + '/store/order/' + encodeURIComponent(orderId));
		}
	}

	@Injectable()
	export class UserClient {
		constructor(@Inject('baseUri') private baseUri: string = location.protocol + '//' + location.hostname + (location.port ? ':' + location.port : '') + '/', private http: HttpClient) {
		}

		/**
		 * This can only be done by the logged in user.
		 * Post /user
		 * @param {string} requestBody Created user object
		 * @return {void} 
		 */
		CreateUser(requestBody: string): Observable<Response> {
			return this.http.post<Response>(this.baseUri + '/user', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Get /user/{username}
		 * @param {string} username The name that needs to be fetched. Use user1 for testing. 
		 * @param {string} requestBody Created user object
		 * @return {MyNS.User} successful operation
		 */
		GetUserByName(username: string, requestBody: string): Observable<MyNS.User> {
			return this.http.get<MyNS.User>(this.baseUri + '/user/' + encodeURIComponent(username));
		}

		/**
		 * This can only be done by the logged in user.
		 * Put /user/{username}
		 * @param {string} username name that need to be deleted
		 * @param {string} requestBody Updated user object
		 * @return {void} 
		 */
		UpdateUser(username: string, requestBody: string): Observable<Response> {
			return this.http.put<Response>(this.baseUri + '/user/' + encodeURIComponent(username), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * This can only be done by the logged in user.
		 * Delete /user/{username}
		 * @param {string} username The name that needs to be deleted
		 * @param {string} requestBody Updated user object
		 * @return {void} 
		 */
		DeleteUser(username: string, requestBody: string): Observable<Response> {
			return this.http.delete<Response>(this.baseUri + '/user/' + encodeURIComponent(username));
		}

		/**
		 * Post /user/createWithArray
		 * @param {Array<User>} requestBody List of user object
		 * @return {void} 
		 */
		CreateUsersWithArrayInput(requestBody: Array<User>): Observable<Response> {
			return this.http.post<Response>(this.baseUri + '/user/createWithArray', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Post /user/createWithList
		 * @param {Array<User>} requestBody List of user object
		 * @return {void} 
		 */
		CreateUsersWithListInput(requestBody: Array<User>): Observable<Response> {
			return this.http.post<Response>(this.baseUri + '/user/createWithList', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Get /user/login
		 * @param {string} username The user name for login
		 * @param {string} password The password for login in clear text
		 * @param {Array<User>} requestBody List of user object
		 * @return {string} successful operation
		 */
		LoginUser(username: string, password: string, requestBody: Array<User>): Observable<string> {
			return this.http.get(this.baseUri + '/user/login?username=' + encodeURIComponent(username) + '&password=' + encodeURIComponent(password), { responseType: 'text' });
		}

		/**
		 * Get /user/logout
		 * @param {Array<User>} requestBody List of user object
		 * @return {void} 
		 */
		LogoutUser(requestBody: Array<User>): Observable<Response> {
			return this.http.get<Response>(this.baseUri + '/user/logout');
		}
	}

}

