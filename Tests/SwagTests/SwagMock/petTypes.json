{
	"openapi": "3.0.0",
	"info": {
		"title": "Swagger Petstore",
		"description": "This is a sample server Petstore server.\nYou can find out more about Swagger at\n[http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).\nFor this sample, you can use the api key `special-key` to test the authorization filters.\n\n# Introduction\nThis API is documented in **OpenAPI format** and is based on\n[Petstore sample](http://petstore.swagger.io/) provided by [swagger.io](http://swagger.io) team.\nIt was **extended** to illustrate features of [generator-openapi-repo](https://github.com/Rebilly/generator-openapi-repo)\ntool and [ReDoc](https://github.com/Redocly/redoc) documentation. In addition to standard\nOpenAPI syntax we use a few [vendor extensions](https://github.com/Redocly/redoc/blob/master/docs/redoc-vendor-extensions.md).\n\n# OpenAPI Specification\nThis API is documented in **OpenAPI format** and is based on\n[Petstore sample](http://petstore.swagger.io/) provided by [swagger.io](http://swagger.io) team.\nIt was **extended** to illustrate features of [generator-openapi-repo](https://github.com/Rebilly/generator-openapi-repo)\ntool and [ReDoc](https://github.com/Redocly/redoc) documentation. In addition to standard\nOpenAPI syntax we use a few [vendor extensions](https://github.com/Redocly/redoc/blob/master/docs/redoc-vendor-extensions.md).\n\n# Cross-Origin Resource Sharing\nThis API features Cross-Origin Resource Sharing (CORS) implemented in compliance with  [W3C spec](https://www.w3.org/TR/cors/).\nAnd that allows cross-domain communication from the browser.\nAll responses have a wildcard same-origin which makes them completely public and accessible to everyone, including any code on any site.\n\n# Authentication\n\nPetstore offers two forms of authentication:\n  - API Key\n  - OAuth2\nOAuth2 - an open protocol to allow secure authorization in a simple\nand standard method from web, mobile and desktop applications.\n\n<SecurityDefinitions />\n",
		"termsOfService": "http://swagger.io/terms/",
		"contact": {
			"name": "API Support",
			"url": "https://github.com/Redocly/redoc",
			"email": "apiteam@swagger.io"
		},
		"license": {
			"name": "Apache 2.0",
			"url": "http://www.apache.org/licenses/LICENSE-2.0.html"
		},
		"version": "1.0.0",
		"x-logo": {
			"url": "https://redocly.github.io/redoc/petstore-logo.png",
			"altText": "Petstore logo"
		}
	},
	"servers": [
		{
			"url": "//petstore.swagger.io/v2",
			"description": "Default server"
		},
		{
			"url": "//petstore.swagger.io/sandbox",
			"description": "Sandbox server"
		}
	],
	"components": {
		"schemas": {
			"ApiResponse": {
				"type": "object",
				"properties": {
					"code": {
						"type": "integer",
						"format": "int32"
					},
					"type": {
						"type": "string"
					},
					"message": {
						"type": "string"
					}
				}
			},
			"Cat": {
				"description": "A representation of a cat",
				"allOf": [
					{
						"$ref": "#/components/schemas/Pet"
					},
					{
						"type": "object",
						"required": [
							"huntingSkill"
						],
						"properties": {
							"huntingSkill": {
								"type": "string",
								"description": "The measured skill for hunting",
								"default": "lazy",
								"example": "adventurous",
								"enum": [
									"clueless",
									"lazy",
									"adventurous",
									"aggressive"
								]
							}
						}
					}
				]
			},
			"Category": {
				"type": "object",
				"xml": {
					"name": "Category"
				},
				"properties": {
					"id": {
						"description": "Category ID",
						"allOf": [
							{
								"$ref": "#/components/schemas/Id"
							}
						]
					},
					"name": {
						"type": "string",
						"description": "Category name",
						"minLength": 1
					},
					"sub": {
						"type": "object",
						"description": "Test Sub Category",
						"properties": {
							"prop1": {
								"type": "string",
								"description": "Dumb Property"
							}
						}
					}
				}
			},
			"Dog": {
				"description": "A representation of a dog",
				"allOf": [
					{
						"$ref": "#/components/schemas/Pet"
					},
					{
						"type": "object",
						"required": [
							"packSize"
						],
						"properties": {
							"packSize": {
								"type": "integer",
								"description": "The size of the pack the dog is from",
								"format": "int32",
								"default": "1",
								"minimum": 1.0
							}
						}
					}
				]
			},
			"HoneyBee": {
				"description": "A representation of a honey bee",
				"allOf": [
					{
						"$ref": "#/components/schemas/Pet"
					},
					{
						"type": "object",
						"required": [
							"honeyPerDay"
						],
						"properties": {
							"honeyPerDay": {
								"type": "number",
								"description": "Average amount of honey produced per day in ounces",
								"multipleOf": 0.01,
								"example": "3.14"
							}
						}
					}
				]
			},
			"Id": {
				"type": "integer",
				"format": "int64",
				"readOnly": "true"
			},
			"Order": {
				"type": "object",
				"xml": {
					"name": "Order"
				},
				"properties": {
					"id": {
						"description": "Order ID",
						"allOf": [
							{
								"$ref": "#/components/schemas/Id"
							}
						]
					},
					"petId": {
						"description": "Pet ID",
						"allOf": [
							{
								"$ref": "#/components/schemas/Id"
							}
						]
					},
					"quantity": {
						"type": "integer",
						"format": "int32",
						"default": "1",
						"minimum": 1.0
					},
					"shipDate": {
						"type": "string",
						"description": "Estimated ship date",
						"format": "date-time"
					},
					"status": {
						"type": "string",
						"description": "Order Status",
						"enum": [
							"placed",
							"approved",
							"delivered"
						]
					},
					"complete": {
						"type": "boolean",
						"readOnly": true,
						"description": "Indicates whenever order was completed or not",
						"default": "false"
					},
					"requestId": {
						"type": "string",
						"writeOnly": true,
						"description": "Unique Request Id"
					}
				}
			},
			"Pet": {
				"type": "object",
				"discriminator": {
					"propertyName": "petType",
					"mapping": {
						"cat": "#/components/schemas/Cat",
						"dog": "#/components/schemas/Dog",
						"bee": "#/components/schemas/HoneyBee"
					}
				},
				"xml": {
					"name": "Pet"
				},
				"required": [
					"name",
					"photoUrls"
				],
				"properties": {
					"id": {
						"description": "Pet ID",
						"allOf": [
							{
								"$ref": "#/components/schemas/Id"
							}
						],
						"externalDocs": {
							"description": "Find more info here",
							"url": "https://example.com"
						}
					},
					"category": {
						"description": "Categories this pet belongs to",
						"allOf": [
							{
								"$ref": "#/components/schemas/Category"
							}
						]
					},
					"name": {
						"type": "string",
						"description": "The name given to a pet",
						"example": "Guru"
					},
					"photoUrls": {
						"type": "array",
						"description": "The list of URL to a cute photos featuring pet",
						"maxItems": 20,
						"xml": {
							"name": "photoUrl",
							"wrapped": true
						},
						"items": {
							"type": "string",
							"format": "url"
						}
					},
					"friend": {
						"allOf": [
							{
								"$ref": "#/components/schemas/Pet"
							}
						]
					},
					"tags": {
						"type": "array",
						"description": "Tags attached to the pet",
						"minItems": 1,
						"xml": {
							"name": "tag",
							"wrapped": true
						},
						"items": {
							"$ref": "#/components/schemas/Tag"
						}
					},
					"status": {
						"type": "string",
						"description": "Pet status in the store",
						"enum": [
							"available",
							"pending",
							"sold"
						]
					},
					"petType": {
						"type": "string",
						"description": "Type of a pet"
					}
				}
			},
			"Tag": {
				"type": "object",
				"xml": {
					"name": "Tag"
				},
				"properties": {
					"id": {
						"description": "Tag ID",
						"allOf": [
							{
								"$ref": "#/components/schemas/Id"
							}
						]
					},
					"name": {
						"type": "string",
						"description": "Tag name",
						"minLength": 1
					}
				}
			},
			"User": {
				"type": "object",
				"xml": {
					"name": "User"
				},
				"properties": {
					"id": {
						"$ref": "#/components/schemas/Id"
					},
					"pet": {
						"oneOf": [
							{
								"$ref": "#/components/schemas/Pet"
							},
							{
								"$ref": "#/components/schemas/Tag"
							}
						]
					},
					"username": {
						"type": "string",
						"description": "User supplied username",
						"minLength": 4,
						"example": "John78"
					},
					"firstName": {
						"type": "string",
						"description": "User first name",
						"minLength": 1,
						"example": "John"
					},
					"lastName": {
						"type": "string",
						"description": "User last name",
						"minLength": 1,
						"example": "Smith"
					},
					"email": {
						"type": "string",
						"description": "User email address",
						"format": "email",
						"example": "john.smith@example.com"
					},
					"password": {
						"type": "string",
						"description": "User password, MUST contain a mix of upper and lower case letters, as well as digits",
						"format": "password",
						"minLength": 8,
						"pattern": "/(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])/",
						"example": "drowssaP123"
					},
					"phone": {
						"type": "string",
						"description": "User phone number in international format",
						"pattern": "/^\\+(?:[0-9]-?){6,14}[0-9]$/",
						"example": "+1-202-555-0192"
					},
					"userStatus": {
						"type": "integer",
						"description": "User status",
						"format": "int32"
					}
				}
			}
		},
		"examples": {
			"Order": {
				"value": {
					"quantity": "1,",
					"shipDate": "2018-10-19T16:46:45Z,",
					"status": "placed,",
					"complete": "false"
				}
			}
		},
		"securitySchemes": {
			"petstore_auth": {
				"type": "oauth2",
				"description": "Get access to data while protecting your account credentials.\nOAuth2 is also a safer and more secure way to give you access.\n",
				"flows": {
					"implicit": {
						"authorizationUrl": "http://petstore.swagger.io/api/oauth/dialog",
						"scopes": {
							"write:pets": "modify pets in your account",
							"read:pets": "read your pets"
						}
					}
				}
			},
			"api_key": {
				"type": "apiKey",
				"description": "For this sample, you can use the api key `special-key` to test the authorization filters.\n",
				"name": "api_key",
				"in": "header"
			}
		}
	},
	"tags": [
		{
			"name": "pet",
			"description": "Everything about your Pets"
		},
		{
			"name": "store",
			"description": "Access to Petstore orders"
		},
		{
			"name": "user",
			"description": "Operations about user"
		},
		{
			"name": "pet_model",
			"description": "<SchemaDefinition schemaRef=\"#/components/schemas/Pet\" />\n",
			"x-displayName": "The Pet Model"
		},
		{
			"name": "store_model",
			"description": "<SchemaDefinition schemaRef=\"#/components/schemas/Order\" exampleRef=\"#/components/examples/Order\" showReadOnly={true} showWriteOnly={true} />\n",
			"x-displayName": "The Order Model"
		}
	],
	"externalDocs": {
		"description": "Find out how to create Github repo for your OpenAPI spec.",
		"url": "https://github.com/Rebilly/generator-openapi-repo"
	},
	"x-tagGroups": [
		{
			"name": "General",
			"tags": [
				"pet",
				"store"
			]
		},
		{
			"name": "User Management",
			"tags": [
				"user"
			]
		},
		{
			"name": "Models",
			"tags": [
				"pet_model",
				"store_model"
			]
		}
	]
}