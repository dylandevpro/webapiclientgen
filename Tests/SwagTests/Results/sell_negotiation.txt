//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Net.Http;
	using Newtonsoft.Json;
	
	
	/// <summary>
	/// A complex type that describes the value of a monetary amount as represented by a global currency.
	/// </summary>
	public class Amount
	{
		
		/// <summary>
		/// The base currency applied to the value field to establish a monetary amount. The currency is represented as a 3-letter ISO4217 currency code. For example, the code for the Canadian Dollar is CAD. Default: The default currency of the eBay marketplace that hosts the listing. For implementation help, refer to <a href='https://developer.ebay.com/devzone/rest/api-ref/negotiation/types/CurrencyCodeEnum.html'>eBay API documentation</a>
		/// </summary>
		public string Currency { get; set; }
		
		/// <summary>
		/// The monetary amount in the specified currency.
		/// </summary>
		public string Value { get; set; }
	}
	
	/// <summary>
	/// This complex type contains the fields needed to create an offer to a buyer that is initiated by the seller.
	/// </summary>
	public class CreateOffersRequest
	{
		
		/// <summary>
		/// If set to true, the buyer is allowed to make a counter-offer to the seller's offer. Note: Currently, you must set this field to false; counter-offers are not supported in this release. Default: false
		/// </summary>
		public bool AllowCounterOffer { get; set; }
		
		/// <summary>
		/// A seller-defined message related to the offer being made. This message is sent to the list of &quot;interested&quot; buyers. To increase the conversion rate of the offers a seller makes to buyers, eBay recommends you always add a customized message to your offers. Maximum length: 2,000 characters
		/// </summary>
		public string Message { get; set; }
		
		/// <summary>
		/// A complex type that specifies a period of time using a specified time-measurement unit.
		/// </summary>
		public TimeDuration OfferDuration { get; set; }
		
		/// <summary>
		/// An array of objects where each object contains the details of an offer and the ID of the listing on which the offer is being made. Note that the service does not currently support the creation of multiple offers with a single call to sendOfferToInterestedBuyer. With this, each request can target only one listing at a time and you must populate this array with a single element that contains the details of one offer.
		/// </summary>
		public OfferedItem[] OfferedItems { get; set; }
	}
	
	/// <summary>
	/// A listing that is eligible for a seller-initiated offer to a buyer. Listings are identified by a listingId value that is generated and assigned by eBay when a seller lists an item using the Trading API. Note: The Negotiation API does not currently support listings that are managed with the Inventory API.
	/// </summary>
	public class EligibleItem
	{
		
		/// <summary>
		/// The unique eBay-assigned ID for an eBay listing. A listingId is assigned by eBay when a seller creates a listing with the Trading API.
		/// </summary>
		public string ListingId { get; set; }
	}
	
	/// <summary>
	/// This type defines the fields that can be returned in an error.
	/// </summary>
	public class Error
	{
		
		/// <summary>
		/// Identifies the type of erro.
		/// </summary>
		public string Category { get; set; }
		
		/// <summary>
		/// Name for the primary system where the error occurred. This is relevant for application errors.
		/// </summary>
		public string Domain { get; set; }
		
		/// <summary>
		/// A unique number to identify the error.
		/// </summary>
		public int ErrorId { get; set; }
		
		/// <summary>
		/// An array of request elements most closely associated to the error.
		/// </summary>
		public string[] InputRefIds { get; set; }
		
		/// <summary>
		/// A more detailed explanation of the error.
		/// </summary>
		public string LongMessage { get; set; }
		
		/// <summary>
		/// Information on how to correct the problem, in the end user's terms and language where applicable.
		/// </summary>
		public string Message { get; set; }
		
		/// <summary>
		/// An array of request elements most closely associated to the error.
		/// </summary>
		public string[] OutputRefIds { get; set; }
		
		/// <summary>
		/// An array of name/value pairs that describe details the error condition. These are useful when multiple errors are returned.
		/// </summary>
		public ErrorParameter[] Parameters { get; set; }
		
		/// <summary>
		/// Further helps indicate which subsystem the error is coming from. System subcategories include: Initialization, Serialization, Security, Monitoring, Rate Limiting, etc.
		/// </summary>
		public string Subdomain { get; set; }
	}
	
	public class ErrorParameter
	{
		
		/// <summary>
		/// The object of the error.
		/// </summary>
		public string Name { get; set; }
		
		/// <summary>
		/// The value of the object.
		/// </summary>
		public string Value { get; set; }
	}
	
	/// <summary>
	/// A complex type that defines an offer that a seller makes to eligible buyers.
	/// </summary>
	public class Offer
	{
		
		/// <summary>
		/// If set to true, the buyer is allowed to make a counter-offer to the seller's offer.
		/// </summary>
		public bool AllowCounterOffer { get; set; }
		
		/// <summary>
		/// This complex type identifies an eBay user.
		/// </summary>
		public User Buyer { get; set; }
		
		/// <summary>
		/// The date and time when the seller's offer was created. The returned timestamp is formatted as an ISO 8601 string, which is based on the 24-hour Coordinated Universal Time (UTC) clock. Format: [YYYY]-[MM]-[DD]T[hh]:[mm]:[ss].[sss]Z Example: 2018-08-20T07:09:00.000Z
		/// </summary>
		public string CreationDate { get; set; }
		
		/// <summary>
		/// The eBay UserName of the user (seller) who initiated the offer.
		/// </summary>
		public string InitiatedBy { get; set; }
		
		/// <summary>
		/// The date and time when the offer was last modified. The returned timestamp is formatted as an ISO 8601 string.
		/// </summary>
		public string LastModifiedDate { get; set; }
		
		/// <summary>
		/// A seller-defined message related to the offer being made. This message is sent to the list of &quot;interested&quot; buyers along with the offer message from eBay.
		/// </summary>
		public string Message { get; set; }
		
		/// <summary>
		/// A complex type that specifies a period of time using a specified time-measurement unit.
		/// </summary>
		public TimeDuration OfferDuration { get; set; }
		
		/// <summary>
		/// The list of items associated with the offer. Currently, the offer list is restricted to a single offer.
		/// </summary>
		public OfferedItem[] OfferedItems { get; set; }
		
		/// <summary>
		/// A unique eBay-assigned identifier for the offer.
		/// </summary>
		public string OfferId { get; set; }
		
		/// <summary>
		/// The current state, or status, of an offer. Status states include PENDING, COUNTERED, ACCEPTED, and DECLINED. For implementation help, refer to <a href='https://developer.ebay.com/devzone/rest/api-ref/negotiation/types/OfferStatusEnum.html'>eBay API documentation</a>
		/// </summary>
		public string OfferStatus { get; set; }
		
		/// <summary>
		/// The type of offer being made. For implementation help, refer to <a href='https://developer.ebay.com/devzone/rest/api-ref/negotiation/types/OfferTypeEnum.html'>eBay API documentation</a>
		/// </summary>
		public string OfferType { get; set; }
		
		/// <summary>
		/// A unique, eBay-assigned ID for the revision of the offer.
		/// </summary>
		public string Revision { get; set; }
	}
	
	/// <summary>
	/// A complex type that defines the offer being made to an &quot;interested&quot; buyer.
	/// </summary>
	public class OfferedItem
	{
		
		/// <summary>
		/// This value denotes the percentage that the listing in the offer will be discounted from its original listed price. The seller can specify either the exact price of the discounted items with the price field or they can use this field to specify the percentage that the listing will be discounted, but not both. Minimum: 5 Required if you do not specify a price value.
		/// </summary>
		public string DiscountPercentage { get; set; }
		
		/// <summary>
		/// This value is a unique eBay-assigned ID that identifies the listing to which the offer pertains. A listingId value is generated by eBay when you list an item with the Trading API.
		/// </summary>
		public string ListingId { get; set; }
		
		/// <summary>
		/// A complex type that describes the value of a monetary amount as represented by a global currency.
		/// </summary>
		public Amount Price { get; set; }
		
		/// <summary>
		/// This integer value indicates the number of items in the eBay listing for which the offer is being made. The offer being made by the seller is an &quot;all or nothing&quot; offer, meaning the buyer must purchase the indicated quantity of items in order to receive the discount on the transaction. Default: 1
		/// </summary>
		public int Quantity { get; set; }
	}
	
	/// <summary>
	/// This complex type defines a collection of listings that are eligible for an offer to a buyer.
	/// </summary>
	public class PagedEligibleItemCollection
	{
		
		/// <summary>
		/// A list of items that are eligible for a seller-initiated offer to a buyer. Each element in the list contains the listing ID of a listed item. These IDs represent the listings for which buyers have shown an interest.
		/// </summary>
		public EligibleItem[] EligibleItems { get; set; }
		
		/// <summary>
		/// The URI of the current page of results from the result set.
		/// </summary>
		public string Href { get; set; }
		
		/// <summary>
		/// The number of items returned on a single page from the result set. This value can be set in the request with the limit query parameter.
		/// </summary>
		public int Limit { get; set; }
		
		/// <summary>
		/// The URI for the following page of results. This value is returned only if there is an additional page of results to display from the result set. Max length: 2048
		/// </summary>
		public string Next { get; set; }
		
		/// <summary>
		/// The number of results skipped in the result set before listing the first returned result. This value can be set in the request with the offset query parameter. Note: The items in a paginated result set use a zero-based list where the first item in the list has an offset of 0.
		/// </summary>
		public int Offset { get; set; }
		
		/// <summary>
		/// The URI for the preceding page of results. This value is returned only if there is a previous page of results to display from the result set. Max length: 2048
		/// </summary>
		public string Prev { get; set; }
		
		/// <summary>
		/// The total number of items retrieved in the result set. If no items match the search criteria, the server returns the HTTP status code 204 No Content.
		/// </summary>
		public int Total { get; set; }
	}
	
	/// <summary>
	/// The response object returned from a SendOfferToInterestedBuyers request.
	/// </summary>
	public class SendOfferToInterestedBuyersCollectionResponse
	{
		
		/// <summary>
		/// The offers container returns a list of the offers sent to buyers who have shown an interest in listings included in the offer.
		/// </summary>
		public Offer[] Offers { get; set; }
	}
	
	/// <summary>
	/// A complex type that specifies a period of time using a specified time-measurement unit.
	/// </summary>
	public class TimeDuration
	{
		
		/// <summary>
		/// A time-measurement unit that specifies a singular period of time. A span of time is defined when you apply the value specified in the value field to the value specified for unit. Time-measurement units can be YEAR, MONTH, DAY, and so on. See TimeDurationUnitEnum for a complete list of possible time-measurement units. For implementation help, refer to <a href='https://developer.ebay.com/devzone/rest/api-ref/negotiation/types/TimeDurationUnitEnum.html'>eBay API documentation</a>
		/// </summary>
		public string Unit { get; set; }
		
		/// <summary>
		/// An integer that represents an amount of time, as measured by the time-measurement unit specified in the unit field.
		/// </summary>
		public int Value { get; set; }
	}
	
	/// <summary>
	/// This complex type identifies an eBay user.
	/// </summary>
	public class User
	{
		
		/// <summary>
		/// The masked user name is a user name that has certain characters hidden for privacy of the user.
		/// </summary>
		public string MaskedUsername { get; set; }
	}
	
	public partial class OfferClient
	{
		
		private System.Net.Http.HttpClient client;
		
		public OfferClient(System.Net.Http.HttpClient client)
		{
			if (client == null)
				throw new ArgumentNullException("Null HttpClient.", "client");

			if (client.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "client");

			this.client = client;
		}
		
		/// <summary>
		/// This method evaluates a seller's current listings and returns the set of IDs that are eligible for a seller-initiated discount offer to a buyer. A listing ID is returned only when one or more buyers have shown an &quot;interest&quot; in the listing. If any buyers have shown interest in a listing, the seller can initiate a &quot;negotiation&quot; with them by calling sendOfferToInterestedBuyers, which sends all interested buyers a message that offers the listing at a discount. For details about how to create seller offers to buyers, see Sending offers to buyers.
		/// FindEligibleItems /find_eligible_items
		/// </summary>
		/// <param name="limit">This query parameter specifies the maximum number of items to return from the result set on a page in the paginated response. Minimum: 1 &nbsp; &nbsp;Maximum: 200 Default: 10</param>
		/// <param name="offset">This query parameter specifies the number of results to skip in the result set before returning the first result in the paginated response. Combine offset with the limit query parameter to control the items returned in the response. For example, if you supply an offset of 0 and a limit of 10, the first page of the response contains the first 10 results from the complete list of items retrieved by the call. If offset is 10 and limit is 20, the first page of the response contains items 11-30 from the complete result set. Default: 0</param>
		/// <returns>Success</returns>
		public async Task<PagedEligibleItemCollection> FindEligibleItemsAsync(string limit, string offset)
		{
			var requestUri = "/find_eligible_items?limit=" + Uri.EscapeDataString(limit)+"&offset=" + Uri.EscapeDataString(offset);
			var responseMessage = await client.GetAsync(requestUri);
			try
			{
				responseMessage.EnsureSuccessStatusCode();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<PagedEligibleItemCollection>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// This method evaluates a seller's current listings and returns the set of IDs that are eligible for a seller-initiated discount offer to a buyer. A listing ID is returned only when one or more buyers have shown an &quot;interest&quot; in the listing. If any buyers have shown interest in a listing, the seller can initiate a &quot;negotiation&quot; with them by calling sendOfferToInterestedBuyers, which sends all interested buyers a message that offers the listing at a discount. For details about how to create seller offers to buyers, see Sending offers to buyers.
		/// FindEligibleItems /find_eligible_items
		/// </summary>
		/// <param name="limit">This query parameter specifies the maximum number of items to return from the result set on a page in the paginated response. Minimum: 1 &nbsp; &nbsp;Maximum: 200 Default: 10</param>
		/// <param name="offset">This query parameter specifies the number of results to skip in the result set before returning the first result in the paginated response. Combine offset with the limit query parameter to control the items returned in the response. For example, if you supply an offset of 0 and a limit of 10, the first page of the response contains the first 10 results from the complete list of items retrieved by the call. If offset is 10 and limit is 20, the first page of the response contains items 11-30 from the complete result set. Default: 0</param>
		/// <returns>Success</returns>
		public PagedEligibleItemCollection FindEligibleItems(string limit, string offset)
		{
			var requestUri = "/find_eligible_items?limit=" + Uri.EscapeDataString(limit)+"&offset=" + Uri.EscapeDataString(offset);
			var responseMessage = this.client.GetAsync(requestUri).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCode();
				var stream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<PagedEligibleItemCollection>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// This method sends eligible buyers offers to purchase items in a listing at a discount. When a buyer has shown interest in a listing, they become &quot;eligible&quot; to receive a seller-initiated offer to purchase the item(s). Sellers use findEligibleItems to get the set of listings that have interested buyers. If a listing has interested buyers, sellers can use this method (sendOfferToInterestedBuyers) to send an offer to the buyers who are interested in the listing. The offer gives buyers the ability to purchase the associated listings at a discounted price. For details about how to create seller offers to buyers, see Sending offers to buyers.
		/// SendOfferToInterestedBuyers /send_offer_to_interested_buyers
		/// </summary>
		/// <param name="requestBody">Send offer to eligible items request.</param>
		/// <returns>Success</returns>
		public async Task<SendOfferToInterestedBuyersCollectionResponse> SendOfferToInterestedBuyersAsync(CreateOffersRequest requestBody)
		{
			var requestUri = "/send_offer_to_interested_buyers";
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create();
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			var responseMessage = await client.PostAsync(requestUri, content);
			try
			{
				responseMessage.EnsureSuccessStatusCode();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<SendOfferToInterestedBuyersCollectionResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// This method sends eligible buyers offers to purchase items in a listing at a discount. When a buyer has shown interest in a listing, they become &quot;eligible&quot; to receive a seller-initiated offer to purchase the item(s). Sellers use findEligibleItems to get the set of listings that have interested buyers. If a listing has interested buyers, sellers can use this method (sendOfferToInterestedBuyers) to send an offer to the buyers who are interested in the listing. The offer gives buyers the ability to purchase the associated listings at a discounted price. For details about how to create seller offers to buyers, see Sending offers to buyers.
		/// SendOfferToInterestedBuyers /send_offer_to_interested_buyers
		/// </summary>
		/// <param name="requestBody">Send offer to eligible items request.</param>
		/// <returns>Success</returns>
		public SendOfferToInterestedBuyersCollectionResponse SendOfferToInterestedBuyers(CreateOffersRequest requestBody)
		{
			var requestUri = "/send_offer_to_interested_buyers";
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create();
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			var responseMessage = this.client.PostAsync(requestUri, content).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCode();
				var stream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<SendOfferToInterestedBuyersCollectionResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
}
