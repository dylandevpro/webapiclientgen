//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Net.Http;
	using Newtonsoft.Json;
	
	
	/// <summary>
	/// The type that defines the fields for a monetary value and its currency.
	/// </summary>
	public class Amount
	{
		
		/// <summary>
		/// The three-letter ISO 4217 code representing the currency of the amount in the value field. For implementation help, refer to <a href='https://developer.ebay.com/devzone/rest/api-ref/offer/types/CurrencyCodeEnum.html'>eBay API documentation</a>
		/// </summary>
		public string Currency { get; set; }
		
		/// <summary>
		/// The monetary amount.
		/// </summary>
		public string Value { get; set; }
	}
	
	/// <summary>
	/// The type the defines the field for the auction details.
	/// </summary>
	public class Bidding
	{
		
		/// <summary>
		/// The date the auction will end.
		/// </summary>
		public string AuctionEndDate { get; set; }
		
		/// <summary>
		/// An enumeration value that represents the current state of the auction, such as ENDED or LIVE. For implementation help, refer to <a href='https://developer.ebay.com/devzone/rest/api-ref/offer/types/AuctionStatusEnum.html'>eBay API documentation</a>
		/// </summary>
		public string AuctionStatus { get; set; }
		
		/// <summary>
		/// The number of proxy bids that have been placed for the auction.
		/// </summary>
		public int BidCount { get; set; }
		
		/// <summary>
		/// The type that defines the fields for a monetary value and its currency.
		/// </summary>
		public Amount CurrentPrice { get; set; }
		
		/// <summary>
		/// The type the defines the fields for the proxy bid information.
		/// </summary>
		public ProxyBid CurrentProxyBid { get; set; }
		
		/// <summary>
		/// Indicates if the buyer is the highest bidder.
		/// </summary>
		public bool HighBidder { get; set; }
		
		/// <summary>
		/// The eBay RESTful identifier of an item being bid on, which was submitted in the request.
		/// </summary>
		public string ItemId { get; set; }
		
		/// <summary>
		/// This indicates if the reserve price of the item has been met. A reserve price is set by the seller and is the minimum amount the seller is willing to sell the item for. If the highest bid is not equal to or higher than the reserve price when the auction ends, the listing ends and the item is not sold. Note: This is returned only for auctions that have a reserve price.
		/// </summary>
		public bool ReservePriceMet { get; set; }
		
		/// <summary>
		/// The suggested bid amount for the next bid. Note: These are generated suggestions and do not guarantee the buyer will win the bid. This means these suggestions do not take into account the max bid amount of other bidders. The buyer can be outbid even if they submit the highest suggested bid.
		/// </summary>
		public Amount[] SuggestedBidAmounts { get; set; }
	}
	
	/// <summary>
	/// This type defines the fields that can be returned in an error.
	/// </summary>
	public class Error
	{
		
		/// <summary>
		/// Identifies the type of erro.
		/// </summary>
		public string Category { get; set; }
		
		/// <summary>
		/// Name for the primary system where the error occurred. This is relevant for application errors.
		/// </summary>
		public string Domain { get; set; }
		
		/// <summary>
		/// A unique number to identify the error.
		/// </summary>
		public int ErrorId { get; set; }
		
		/// <summary>
		/// An array of request elements most closely associated to the error.
		/// </summary>
		public string[] InputRefIds { get; set; }
		
		/// <summary>
		/// A more detailed explanation of the error.
		/// </summary>
		public string LongMessage { get; set; }
		
		/// <summary>
		/// Information on how to correct the problem, in the end user's terms and language where applicable.
		/// </summary>
		public string Message { get; set; }
		
		/// <summary>
		/// An array of request elements most closely associated to the error.
		/// </summary>
		public string[] OutputRefIds { get; set; }
		
		/// <summary>
		/// An array of name/value pairs that describe details the error condition. These are useful when multiple errors are returned.
		/// </summary>
		public ErrorParameter[] Parameters { get; set; }
		
		/// <summary>
		/// Further helps indicate which subsystem the error is coming from. System subcategories include: Initialization, Serialization, Security, Monitoring, Rate Limiting, etc.
		/// </summary>
		public string Subdomain { get; set; }
	}
	
	public class ErrorParameter
	{
		
		/// <summary>
		/// The object of the error.
		/// </summary>
		public string Name { get; set; }
		
		/// <summary>
		/// The value of the object.
		/// </summary>
		public string Value { get; set; }
	}
	
	/// <summary>
	/// The type that defines the fields for placing a proxy bid.
	/// </summary>
	public class PlaceProxyBidRequest
	{
		
		/// <summary>
		/// The type that defines the fields for a monetary value and its currency.
		/// </summary>
		public Amount MaxAmount { get; set; }
		
		/// <summary>
		/// The type that defines the fields for collecting the buyers consent.
		/// </summary>
		public UserConsent UserConsent { get; set; }
	}
	
	/// <summary>
	/// The type that defines the fields for the place proxy bid response.
	/// </summary>
	public class PlaceProxyBidResponse
	{
		
		/// <summary>
		/// Identifier of the proxy bid created by the request. This indicates that the bid was placed and is not used for anything else.
		/// </summary>
		public string ProxyBidId { get; set; }
	}
	
	/// <summary>
	/// The type the defines the fields for the proxy bid information.
	/// </summary>
	public class ProxyBid
	{
		
		/// <summary>
		/// The type that defines the fields for a monetary value and its currency.
		/// </summary>
		public Amount MaxAmount { get; set; }
		
		/// <summary>
		/// Identifier of a specific proxy bid.
		/// </summary>
		public string ProxyBidId { get; set; }
	}
	
	/// <summary>
	/// The type that defines the fields for collecting the buyers consent.
	/// </summary>
	public class UserConsent
	{
		
		/// <summary>
		/// The type that defines the fields for buyer consent to bid on adult-only items. For more information about adult-only items on eBay, see Adult-Only items on eBay.
		/// </summary>
		public bool AdultOnlyItem { get; set; }
	}
	
	public partial class BiddingClient
	{
		
		private System.Net.Http.HttpClient client;
		
		public BiddingClient(System.Net.Http.HttpClient client)
		{
			if (client == null)
				throw new ArgumentNullException("Null HttpClient.", "client");

			if (client.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "client");

			this.client = client;
		}
		
		/// <summary>
		/// This method retrieves the bidding details that are specific to the buyer of the specified auction. This must be an auction where the buyer has already placed a bid. To retrieve the bidding information you use a user access token and pass in the item ID of the auction. You can also retrieve general bidding details about the auction, such as start price, minimum bid price, and the count of unique bidders, using the Browse API getItem method. URLs for this method Production URL: https://api.ebay.com/buy/offer/v1_beta/bidding/ Sandbox URL: https://api.sandbox.ebay.com/buy/offer/v1_beta/bidding/ Restrictions For a list of supported sites and other restrictions, see API Restrictions.
		/// GetBidding bidding/{item_id}
		/// </summary>
		/// <param name="item_id">The eBay RESTful identifier of an item that you want the buyer's bidding information. This ID is returned by the Browse and Feed API methods. RESTful Item ID example: v1|272394640372|0 For more information about item ID for RESTful APIs, see the Legacy API compatibility section of the Buy APIs Overview. Restriction: The buyer must have placed a bid for this item.</param>
		/// <returns>OK</returns>
		public async Task<Bidding> GetBiddingAsync(string item_id)
		{
			var requestUri = "bidding/"+Uri.EscapeDataString(item_id);
			var responseMessage = await client.GetAsync(requestUri);
			try
			{
				responseMessage.EnsureSuccessStatusCode();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<Bidding>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// This method retrieves the bidding details that are specific to the buyer of the specified auction. This must be an auction where the buyer has already placed a bid. To retrieve the bidding information you use a user access token and pass in the item ID of the auction. You can also retrieve general bidding details about the auction, such as start price, minimum bid price, and the count of unique bidders, using the Browse API getItem method. URLs for this method Production URL: https://api.ebay.com/buy/offer/v1_beta/bidding/ Sandbox URL: https://api.sandbox.ebay.com/buy/offer/v1_beta/bidding/ Restrictions For a list of supported sites and other restrictions, see API Restrictions.
		/// GetBidding bidding/{item_id}
		/// </summary>
		/// <param name="item_id">The eBay RESTful identifier of an item that you want the buyer's bidding information. This ID is returned by the Browse and Feed API methods. RESTful Item ID example: v1|272394640372|0 For more information about item ID for RESTful APIs, see the Legacy API compatibility section of the Buy APIs Overview. Restriction: The buyer must have placed a bid for this item.</param>
		/// <returns>OK</returns>
		public Bidding GetBidding(string item_id)
		{
			var requestUri = "bidding/"+Uri.EscapeDataString(item_id);
			var responseMessage = this.client.GetAsync(requestUri).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCode();
				var stream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<Bidding>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// This method uses a user access token to place a proxy bid for the buyer on a specific auction item. The item must offer AUCTION as one of the buyingOptions. To place a bid, you pass in the item ID of the auction as a URI parameter and the buyer's maximum bid amount (maxAmount ) in the payload. By placing a proxy bid, the buyer is agreeing to purchase the item if they win the auction. After this bid is placed, if someone else outbids the buyer a bid, eBay automatically bids again for the buyer up to the amount of their maximum bid. When the bid exceeds the buyer's maximum bid, eBay will notify them that they have been outbid. To find auctions, you can use the Browse API to search for items and use a filter to return only auction items. For example: /buy/browse/v1/item_summary/search?q=iphone&amp;filter=buyingOptions:{AUCTION} URLs for this method Production URL: https://api.ebay.com/buy/offer/v1_beta/bidding/ Sandbox URL: https://api.sandbox.ebay.com/buy/offer/v1_beta/bidding/ Restrictions For a list of supported sites and other restrictions, see API Restrictions.
		/// PlaceProxyBid bidding/{item_id}/place_proxy_bid
		/// </summary>
		/// <param name="item_id">The eBay RESTful identifier of an item you want to bid on. This ID is returned by the Browse and Feed API methods. RESTful Item ID Example: v1|272394640372|0 For more information about item ID for RESTful APIs, see the Legacy API compatibility section of the Buy APIs Overview.</param>
		/// <returns>OK</returns>
		public async Task<PlaceProxyBidResponse> PlaceProxyBidAsync(string item_id, PlaceProxyBidRequest requestBody)
		{
			var requestUri = "bidding/"+Uri.EscapeDataString(item_id)+"/place_proxy_bid";
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create();
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			var responseMessage = await client.PostAsync(requestUri, content);
			try
			{
				responseMessage.EnsureSuccessStatusCode();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<PlaceProxyBidResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// This method uses a user access token to place a proxy bid for the buyer on a specific auction item. The item must offer AUCTION as one of the buyingOptions. To place a bid, you pass in the item ID of the auction as a URI parameter and the buyer's maximum bid amount (maxAmount ) in the payload. By placing a proxy bid, the buyer is agreeing to purchase the item if they win the auction. After this bid is placed, if someone else outbids the buyer a bid, eBay automatically bids again for the buyer up to the amount of their maximum bid. When the bid exceeds the buyer's maximum bid, eBay will notify them that they have been outbid. To find auctions, you can use the Browse API to search for items and use a filter to return only auction items. For example: /buy/browse/v1/item_summary/search?q=iphone&amp;filter=buyingOptions:{AUCTION} URLs for this method Production URL: https://api.ebay.com/buy/offer/v1_beta/bidding/ Sandbox URL: https://api.sandbox.ebay.com/buy/offer/v1_beta/bidding/ Restrictions For a list of supported sites and other restrictions, see API Restrictions.
		/// PlaceProxyBid bidding/{item_id}/place_proxy_bid
		/// </summary>
		/// <param name="item_id">The eBay RESTful identifier of an item you want to bid on. This ID is returned by the Browse and Feed API methods. RESTful Item ID Example: v1|272394640372|0 For more information about item ID for RESTful APIs, see the Legacy API compatibility section of the Buy APIs Overview.</param>
		/// <returns>OK</returns>
		public PlaceProxyBidResponse PlaceProxyBid(string item_id, PlaceProxyBidRequest requestBody)
		{
			var requestUri = "bidding/"+Uri.EscapeDataString(item_id)+"/place_proxy_bid";
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create();
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			var responseMessage = this.client.PostAsync(requestUri, content).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCode();
				var stream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<PlaceProxyBidResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
}
