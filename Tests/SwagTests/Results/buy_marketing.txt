//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Net.Http;
	using Newtonsoft.Json;
	
	
	/// <summary>
	/// The type that defines the fields that can be returned in an error.
	/// </summary>
	public class Error
	{
		
		/// <summary>
		/// This string value indicates the error category. There are three categories of errors: request errors, application errors, and system errors.
		/// </summary>
		public string Category { get; set; }
		
		/// <summary>
		/// The name of the primary system where the error occurred. This is relevant for application errors.
		/// </summary>
		public string Domain { get; set; }
		
		/// <summary>
		/// A unique code that identifies the particular error or warning that occurred. Your application can use error codes as identifiers in your customized error-handling algorithms.
		/// </summary>
		public int ErrorId { get; set; }
		
		/// <summary>
		/// An array of reference IDs that identify the specific request elements most closely associated to the error or warning, if any.
		/// </summary>
		public string[] InputRefIds { get; set; }
		
		/// <summary>
		/// A detailed description of the condition that caused the error or warning, and information on what to do to correct the problem.
		/// </summary>
		public string LongMessage { get; set; }
		
		/// <summary>
		/// A description of the condition that caused the error or warning.
		/// </summary>
		public string Message { get; set; }
		
		/// <summary>
		/// An array of reference IDs that identify the specific response elements most closely associated to the error or warning, if any.
		/// </summary>
		public string[] OutputRefIds { get; set; }
		
		/// <summary>
		/// An array of warning and error messages that return one or more variables contextual information about the error or warning. This is often the field or value that triggered the error or warning.
		/// </summary>
		public ErrorParameter[] Parameters { get; set; }
		
		/// <summary>
		/// The name of the subdomain in which the error or warning occurred.
		/// </summary>
		public string Subdomain { get; set; }
	}
	
	/// <summary>
	/// An array of name/value pairs that provide more details regarding error condition.
	/// </summary>
	public class ErrorParameter
	{
		
		/// <summary>
		/// This is the name of input field that caused an issue with the call request.
		/// </summary>
		public string Name { get; set; }
		
		/// <summary>
		/// This is the actual value that was passed in for the element specified in the name field.
		/// </summary>
		public string Value { get; set; }
	}
	
	/// <summary>
	/// This type defines the monetary value of an amount and the currency used.
	/// </summary>
	public class Amount
	{
		
		/// <summary>
		/// A three-letter ISO 4217 code that indicates the currency of the amount in the value field. For implementation help, refer to <a href='https://developer.ebay.com/devzone/rest/api-ref/marketing/types/CurrencyCodeEnum.html'>eBay API documentation</a>
		/// </summary>
		public string Currency { get; set; }
		
		/// <summary>
		/// The monetary amount, in the currency specified by the currency field.
		/// </summary>
		public string Value { get; set; }
	}
	
	/// <summary>
	/// The type that defines the fields for the best selling product information.
	/// </summary>
	public class BestSellingProductResponse
	{
		
		/// <summary>
		/// An array of containers for the products.
		/// </summary>
		public MerchandisedProduct[] MerchandisedProducts { get; set; }
		
		/// <summary>
		/// The container with all the warnings for the input request.
		/// </summary>
		public Error[] Warnings { get; set; }
	}
	
	/// <summary>
	/// Type the defines the details of an image, such as size and URL. Currently only imageUrl is getting populated. The height and width were added for future use.
	/// </summary>
	public class Image
	{
		
		/// <summary>
		/// Reserved for future use.
		/// </summary>
		public int Height { get; set; }
		
		/// <summary>
		/// The URL of the image.
		/// </summary>
		public string ImageUrl { get; set; }
		
		/// <summary>
		/// Reserved for future use.
		/// </summary>
		public int Width { get; set; }
	}
	
	/// <summary>
	/// The type that defines the fields for details about the product, such as condition and estimated start price.
	/// </summary>
	public class MarketPriceDetail
	{
		
		/// <summary>
		/// The name for the condition of the product. For example: NEW
		/// </summary>
		public string ConditionGroup { get; set; }
		
		/// <summary>
		/// An array of condition identifiers for the product.
		/// </summary>
		public string[] ConditionIds { get; set; }
		
		/// <summary>
		/// This type defines the monetary value of an amount and the currency used.
		/// </summary>
		public Amount EstimatedStartPrice { get; set; }
	}
	
	/// <summary>
	/// The type that defines the fields for product information, including price, condition, ratings, etc.
	/// </summary>
	public class MerchandisedProduct
	{
		
		/// <summary>
		/// The average rating for the product based on eBay user ratings.
		/// </summary>
		public string AverageRating { get; set; }
		
		/// <summary>
		/// The eBay product identifier of a product from the eBay product catalog. You can use this value in the Browse API search call to retrieve items for this product.
		/// </summary>
		public string Epid { get; set; }
		
		/// <summary>
		/// Type the defines the details of an image, such as size and URL. Currently only imageUrl is getting populated. The height and width were added for future use.
		/// </summary>
		public Image Image { get; set; }
		
		/// <summary>
		/// An array of containers for the product market price details, such as condition and market price.
		/// </summary>
		public MarketPriceDetail[] MarketPriceDetails { get; set; }
		
		/// <summary>
		/// An array of containers for ratings of the product aspects, such as &quot;Is it a good value&quot;.
		/// </summary>
		public RatingAspect[] RatingAspects { get; set; }
		
		/// <summary>
		/// The total number of eBay users that rated the product.
		/// </summary>
		public int RatingCount { get; set; }
		
		/// <summary>
		/// The total number of eBay users that wrote a review for the product.
		/// </summary>
		public int ReviewCount { get; set; }
		
		/// <summary>
		/// The title of the product.
		/// </summary>
		public string Title { get; set; }
	}
	
	/// <summary>
	/// The type that defines the fields for the product aspect ratings.
	/// </summary>
	public class RatingAspect
	{
		
		/// <summary>
		/// The number of eBay users that rated the product on this aspect.
		/// </summary>
		public int Count { get; set; }
		
		/// <summary>
		/// The name of the rating aspect. Camping tent examples: Is it lightweight? or Is it easy to set up?
		/// </summary>
		public string Description { get; set; }
		
		/// <summary>
		/// The answer or value of the rating aspect. Camping tent examples: Lightweight or Easy to set up
		/// </summary>
		public string Name { get; set; }
		
		/// <summary>
		/// The container for the details of the aspect rating. The details show the aspect rating value, usually TRUE or FALSE and the user count and percentage.
		/// </summary>
		public RatingAspectDistribution[] RatingAspectDistributions { get; set; }
	}
	
	/// <summary>
	/// The type that defines the field for the aspect rating details, such as the aspect rating value, usually TRUE or FALSE and the user count and percentage.
	/// </summary>
	public class RatingAspectDistribution
	{
		
		/// <summary>
		/// The number of eBay users that choose this rating aspect value.
		/// </summary>
		public int Count { get; set; }
		
		/// <summary>
		/// The percentage of the aspect rating value. ratingAspectDistributions.percentage = ratingAspectDistributions.count / ratingAspects.count
		/// </summary>
		public string Percentage { get; set; }
		
		/// <summary>
		/// The rating aspect. For example: TRUE or FALSE
		/// </summary>
		public string Value { get; set; }
	}
	
	public partial class Merchandised_productClient
	{
		
		private System.Net.Http.HttpClient client;
		
		public Merchandised_productClient(System.Net.Http.HttpClient client)
		{
			if (client == null)
				throw new ArgumentNullException("Null HttpClient.", "client");

			if (client.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "client");

			this.client = client;
		}
		
		/// <summary>
		/// This call returns products that were also bought when shoppers bought the product specified in the request. Showing 'also bought' products inspires up-selling and cross-selling. You specify the product by one of the following: epid - eBay Product ID gtin - Global Trade Item Number (UPC, ISBN, EAN) brand (brand name, such as Nike) plus mpn (Manufacturer's Part Number) Restrictions For a list of supported sites and other restrictions, see API Restrictions. Note: A maximum of 12 products are returned. The call will return up to 12 products, but it can be less than 12. If the number of products found is less than 12, the call will return all of the products matching the criteria.
		/// GetAlsoBoughtByProduct merchandised_product/get_also_bought_products
		/// </summary>
		/// <param name="brand">The brand of the product. Restriction: This must be used along with mpn. Required: You must specify one epid, or one gtin, or one brand plus mpn pair.</param>
		/// <param name="epid">The eBay product identifier of a product. Required: You must specify one epid, or one gtin, or one brand plus mpn pair.</param>
		/// <param name="gtin">The unique Global Trade Item Number of the item as defined by http://www.gtin.info. This can be a UPC (Universal Product Code), EAN (European Article Number), or an ISBN (International Standard Book Number value. Required: You must specify one epid, or one gtin, or one brand plus mpn pair.</param>
		/// <param name="mpn">The manufacturer part number of the product. Restriction: This must be used along with brand. Required: You must specify one epid, or one gtin, or one brand plus mpn pair.</param>
		/// <returns>This call returns products that were also bought when shoppers bought the product specified in the request. Showing 'also bought' products inspires up-selling and cross-selling. You specify the product by one of the following: epid - eBay Product ID gtin - Global Trade Item Number (UPC, ISBN, EAN) brand (brand name, such as Nike) plus mpn (Manufacturer's Part Number) Restrictions For a list of supported sites and other restrictions, see API Restrictions. Note: A maximum of 12 products are returned. The call will return up to 12 products, but it can be less than 12. If the number of products found is less than 12, the call will return all of the products matching the criteria.</returns>
		public async Task<BestSellingProductResponse> GetAlsoBoughtByProductAsync(string brand, string epid, string gtin, string mpn)
		{
			var requestUri = "merchandised_product/get_also_bought_products?brand=" + Uri.EscapeDataString(brand)+"&epid=" + Uri.EscapeDataString(epid)+"&gtin=" + Uri.EscapeDataString(gtin)+"&mpn=" + Uri.EscapeDataString(mpn);
			var responseMessage = await client.GetAsync(requestUri);
			try
			{
				responseMessage.EnsureSuccessStatusCode();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<BestSellingProductResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// This call returns products that were also bought when shoppers bought the product specified in the request. Showing 'also bought' products inspires up-selling and cross-selling. You specify the product by one of the following: epid - eBay Product ID gtin - Global Trade Item Number (UPC, ISBN, EAN) brand (brand name, such as Nike) plus mpn (Manufacturer's Part Number) Restrictions For a list of supported sites and other restrictions, see API Restrictions. Note: A maximum of 12 products are returned. The call will return up to 12 products, but it can be less than 12. If the number of products found is less than 12, the call will return all of the products matching the criteria.
		/// GetAlsoBoughtByProduct merchandised_product/get_also_bought_products
		/// </summary>
		/// <param name="brand">The brand of the product. Restriction: This must be used along with mpn. Required: You must specify one epid, or one gtin, or one brand plus mpn pair.</param>
		/// <param name="epid">The eBay product identifier of a product. Required: You must specify one epid, or one gtin, or one brand plus mpn pair.</param>
		/// <param name="gtin">The unique Global Trade Item Number of the item as defined by http://www.gtin.info. This can be a UPC (Universal Product Code), EAN (European Article Number), or an ISBN (International Standard Book Number value. Required: You must specify one epid, or one gtin, or one brand plus mpn pair.</param>
		/// <param name="mpn">The manufacturer part number of the product. Restriction: This must be used along with brand. Required: You must specify one epid, or one gtin, or one brand plus mpn pair.</param>
		/// <returns>This call returns products that were also bought when shoppers bought the product specified in the request. Showing 'also bought' products inspires up-selling and cross-selling. You specify the product by one of the following: epid - eBay Product ID gtin - Global Trade Item Number (UPC, ISBN, EAN) brand (brand name, such as Nike) plus mpn (Manufacturer's Part Number) Restrictions For a list of supported sites and other restrictions, see API Restrictions. Note: A maximum of 12 products are returned. The call will return up to 12 products, but it can be less than 12. If the number of products found is less than 12, the call will return all of the products matching the criteria.</returns>
		public BestSellingProductResponse GetAlsoBoughtByProduct(string brand, string epid, string gtin, string mpn)
		{
			var requestUri = "merchandised_product/get_also_bought_products?brand=" + Uri.EscapeDataString(brand)+"&epid=" + Uri.EscapeDataString(epid)+"&gtin=" + Uri.EscapeDataString(gtin)+"&mpn=" + Uri.EscapeDataString(mpn);
			var responseMessage = this.client.GetAsync(requestUri).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCode();
				var stream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<BestSellingProductResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// This call returns products that were also viewed when shoppers viewed the product specified in the request. Showing 'also viewed' products encourages up-selling and cross-selling. You specify the product by one of the following: epid - eBay Product ID gtin - Global Trade Item Number (UPC, ISBN, EAN) brand (brand name, such as Nike) plus mpn (Manufacturer's Part Number) Restrictions For a list of supported sites and other restrictions, see API Restrictions. Note: A maximum of 12 products are returned. The call will return up to 12 products, but it can be less than 12. If the number of products found is less than 12, the call will return all of the products matching the criteria.
		/// GetAlsoViewedByProduct merchandised_product/get_also_viewed_products
		/// </summary>
		/// <param name="brand">The brand of the product. Restriction: This must be used along with mpn. Required: You must specify one epid, or one gtin, or one brand plus mpn pair.</param>
		/// <param name="epid">The eBay product identifier of a product. Required: You must specify one epid, or one gtin, or one brand plus mpn pair.</param>
		/// <param name="gtin">The unique Global Trade Item Number of the item as defined by http://www.gtin.info. This can be a UPC (Universal Product Code), EAN (European Article Number), or an ISBN (International Standard Book Number value. Required: You must specify one epid, or one gtin, or one brand plus mpn pair.</param>
		/// <param name="mpn">The manufacturer part number of the product. Restriction: This must be used along with brand.</param>
		/// <returns>This call returns products that were also viewed when shoppers viewed the product specified in the request. Showing 'also viewed' products encourages up-selling and cross-selling. You specify the product by one of the following: epid - eBay Product ID gtin - Global Trade Item Number (UPC, ISBN, EAN) brand (brand name, such as Nike) plus mpn (Manufacturer's Part Number) Restrictions For a list of supported sites and other restrictions, see API Restrictions. Note: A maximum of 12 products are returned. The call will return up to 12 products, but it can be less than 12. If the number of products found is less than 12, the call will return all of the products matching the criteria.</returns>
		public async Task<BestSellingProductResponse> GetAlsoViewedByProductAsync(string brand, string epid, string gtin, string mpn)
		{
			var requestUri = "merchandised_product/get_also_viewed_products?brand=" + Uri.EscapeDataString(brand)+"&epid=" + Uri.EscapeDataString(epid)+"&gtin=" + Uri.EscapeDataString(gtin)+"&mpn=" + Uri.EscapeDataString(mpn);
			var responseMessage = await client.GetAsync(requestUri);
			try
			{
				responseMessage.EnsureSuccessStatusCode();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<BestSellingProductResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// This call returns products that were also viewed when shoppers viewed the product specified in the request. Showing 'also viewed' products encourages up-selling and cross-selling. You specify the product by one of the following: epid - eBay Product ID gtin - Global Trade Item Number (UPC, ISBN, EAN) brand (brand name, such as Nike) plus mpn (Manufacturer's Part Number) Restrictions For a list of supported sites and other restrictions, see API Restrictions. Note: A maximum of 12 products are returned. The call will return up to 12 products, but it can be less than 12. If the number of products found is less than 12, the call will return all of the products matching the criteria.
		/// GetAlsoViewedByProduct merchandised_product/get_also_viewed_products
		/// </summary>
		/// <param name="brand">The brand of the product. Restriction: This must be used along with mpn. Required: You must specify one epid, or one gtin, or one brand plus mpn pair.</param>
		/// <param name="epid">The eBay product identifier of a product. Required: You must specify one epid, or one gtin, or one brand plus mpn pair.</param>
		/// <param name="gtin">The unique Global Trade Item Number of the item as defined by http://www.gtin.info. This can be a UPC (Universal Product Code), EAN (European Article Number), or an ISBN (International Standard Book Number value. Required: You must specify one epid, or one gtin, or one brand plus mpn pair.</param>
		/// <param name="mpn">The manufacturer part number of the product. Restriction: This must be used along with brand.</param>
		/// <returns>This call returns products that were also viewed when shoppers viewed the product specified in the request. Showing 'also viewed' products encourages up-selling and cross-selling. You specify the product by one of the following: epid - eBay Product ID gtin - Global Trade Item Number (UPC, ISBN, EAN) brand (brand name, such as Nike) plus mpn (Manufacturer's Part Number) Restrictions For a list of supported sites and other restrictions, see API Restrictions. Note: A maximum of 12 products are returned. The call will return up to 12 products, but it can be less than 12. If the number of products found is less than 12, the call will return all of the products matching the criteria.</returns>
		public BestSellingProductResponse GetAlsoViewedByProduct(string brand, string epid, string gtin, string mpn)
		{
			var requestUri = "merchandised_product/get_also_viewed_products?brand=" + Uri.EscapeDataString(brand)+"&epid=" + Uri.EscapeDataString(epid)+"&gtin=" + Uri.EscapeDataString(gtin)+"&mpn=" + Uri.EscapeDataString(mpn);
			var responseMessage = this.client.GetAsync(requestUri).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCode();
				var stream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<BestSellingProductResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// This call returns an array of products based on the category and metric specified. This includes details of the product, such as the eBay product ID (EPID), title, and user reviews and ratings for the product. You can use the epid returned by this call in the Browse API search call to retrieve items for this product. Restrictions For a list of supported sites and other restrictions, see API Restrictions.
		/// GetMerchandisedProducts merchandised_product
		/// </summary>
		/// <param name="aspect_filter">The aspect name/value pairs used to further refine product results. For example: &nbsp;&nbsp;&nbsp;/buy/marketing/v1_beta/merchandised_product?category_id=31388&amp;metric_name=BEST_SELLING&amp;aspect_filter=Brand:Canon You can use the Browse API search call with the fieldgroups=ASPECT_REFINEMENTS field to return the aspects of a product. For implementation help, refer to eBay API documentation at https://developer.ebay.com/devzone/rest/api-ref/marketing/types/MarketingAspectFilter.html</param>
		/// <param name="category_id">This query parameter limits the products returned to a specific eBay category. The list of eBay category IDs is not published and category IDs are not all the same across all the eBay maketplace. You can use the following techniques to find a category by site: Use the Category Changes page. Use the Taxonomy API. For details see Get Categories for Buy APIs. Use the Browse API and submit the following call to get the dominantCategoryId for an item. /buy/browse/v1/item_summary/search?q=keyword&amp;fieldgroups=ASPECT_REFINEMENTS Maximum: 1 Required: 1</param>
		/// <param name="limit">This value specifies the maximum number of products to return in a result set. Note: Maximum value means the call will return up to that many products per set, but it can be less than this value. If the number of products found is less than this value, the call will return all of the products matching the criteria. Default: 8 Maximum: 100</param>
		/// <param name="metric_name">This value filters the result set by the specified metric. Only products in this metric are returned. Currently, the only metric supported is BEST_SELLING. Default: BEST_SELLING Maximum: 1 Required: 1</param>
		/// <returns>This call returns an array of products based on the category and metric specified. This includes details of the product, such as the eBay product ID (EPID), title, and user reviews and ratings for the product. You can use the epid returned by this call in the Browse API search call to retrieve items for this product. Restrictions For a list of supported sites and other restrictions, see API Restrictions.</returns>
		public async Task<BestSellingProductResponse> GetMerchandisedProductsAsync(string aspect_filter, string category_id, string limit, string metric_name)
		{
			var requestUri = "merchandised_product?aspect_filter=" + Uri.EscapeDataString(aspect_filter)+"&category_id=" + Uri.EscapeDataString(category_id)+"&limit=" + Uri.EscapeDataString(limit)+"&metric_name=" + Uri.EscapeDataString(metric_name);
			var responseMessage = await client.GetAsync(requestUri);
			try
			{
				responseMessage.EnsureSuccessStatusCode();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<BestSellingProductResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// This call returns an array of products based on the category and metric specified. This includes details of the product, such as the eBay product ID (EPID), title, and user reviews and ratings for the product. You can use the epid returned by this call in the Browse API search call to retrieve items for this product. Restrictions For a list of supported sites and other restrictions, see API Restrictions.
		/// GetMerchandisedProducts merchandised_product
		/// </summary>
		/// <param name="aspect_filter">The aspect name/value pairs used to further refine product results. For example: &nbsp;&nbsp;&nbsp;/buy/marketing/v1_beta/merchandised_product?category_id=31388&amp;metric_name=BEST_SELLING&amp;aspect_filter=Brand:Canon You can use the Browse API search call with the fieldgroups=ASPECT_REFINEMENTS field to return the aspects of a product. For implementation help, refer to eBay API documentation at https://developer.ebay.com/devzone/rest/api-ref/marketing/types/MarketingAspectFilter.html</param>
		/// <param name="category_id">This query parameter limits the products returned to a specific eBay category. The list of eBay category IDs is not published and category IDs are not all the same across all the eBay maketplace. You can use the following techniques to find a category by site: Use the Category Changes page. Use the Taxonomy API. For details see Get Categories for Buy APIs. Use the Browse API and submit the following call to get the dominantCategoryId for an item. /buy/browse/v1/item_summary/search?q=keyword&amp;fieldgroups=ASPECT_REFINEMENTS Maximum: 1 Required: 1</param>
		/// <param name="limit">This value specifies the maximum number of products to return in a result set. Note: Maximum value means the call will return up to that many products per set, but it can be less than this value. If the number of products found is less than this value, the call will return all of the products matching the criteria. Default: 8 Maximum: 100</param>
		/// <param name="metric_name">This value filters the result set by the specified metric. Only products in this metric are returned. Currently, the only metric supported is BEST_SELLING. Default: BEST_SELLING Maximum: 1 Required: 1</param>
		/// <returns>This call returns an array of products based on the category and metric specified. This includes details of the product, such as the eBay product ID (EPID), title, and user reviews and ratings for the product. You can use the epid returned by this call in the Browse API search call to retrieve items for this product. Restrictions For a list of supported sites and other restrictions, see API Restrictions.</returns>
		public BestSellingProductResponse GetMerchandisedProducts(string aspect_filter, string category_id, string limit, string metric_name)
		{
			var requestUri = "merchandised_product?aspect_filter=" + Uri.EscapeDataString(aspect_filter)+"&category_id=" + Uri.EscapeDataString(category_id)+"&limit=" + Uri.EscapeDataString(limit)+"&metric_name=" + Uri.EscapeDataString(metric_name);
			var responseMessage = this.client.GetAsync(requestUri).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCode();
				var stream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<BestSellingProductResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
	}
}
