//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Net.Http;
	using Newtonsoft.Json;
	
	
	/// <summary>
	/// The type that defines the fields for seller adjustments. An adjustment can be a credit or debit.
	/// </summary>
	public class Adjustment
	{
		
		/// <summary>
		/// The type the defines the fields for the details of a monetary amount, in the currency used by the method and in the original currency, if the amount was converted between currencies.
		/// </summary>
		public Amount Amount { get; set; }
		
		/// <summary>
		/// Text that describes the adjustment.
		/// </summary>
		public string Label { get; set; }
	}
	
	/// <summary>
	/// The type the defines the fields for the details of a monetary amount, in the currency used by the method and in the original currency, if the amount was converted between currencies.
	/// </summary>
	public class Amount
	{
		
		/// <summary>
		/// A three letter ISO 4217 code specifying the currency of the monetary amount. For implementation help, refer to <a href='https://developer.ebay.com/devzone/rest/api-ref/order/types/CurrencyCodeEnum.html'>eBay API documentation</a>
		/// </summary>
		public string Currency { get; set; }
		
		/// <summary>
		/// The monetary amount.
		/// </summary>
		public string Value { get; set; }
	}
	
	/// <summary>
	/// The type that defines the fields for an address.
	/// </summary>
	public class BillingAddress
	{
		
		/// <summary>
		/// The first line of the street address. Maximum characters AU, CA, &amp; US: 40 DE &amp; GB: 35 All other marketplaces: 50
		/// </summary>
		public string AddressLine1 { get; set; }
		
		/// <summary>
		/// The second line of the street address where the item is being shipped. This optional field can be used for information such as 'Suite Number' or 'Apt Number'.
		/// </summary>
		public string AddressLine2 { get; set; }
		
		/// <summary>
		/// The city of the address.
		/// </summary>
		public string City { get; set; }
		
		/// <summary>
		/// The two letter code representing the country of the address. For implementation help, refer to <a href='https://developer.ebay.com/devzone/rest/api-ref/order/types/CountryCodeEnum.html'>eBay API documentation</a>
		/// </summary>
		public string Country { get; set; }
		
		/// <summary>
		/// The county of the address.
		/// </summary>
		public string County { get; set; }
		
		/// <summary>
		/// The buyer's first name.
		/// </summary>
		public string FirstName { get; set; }
		
		/// <summary>
		/// The buyer's last name.
		/// </summary>
		public string LastName { get; set; }
		
		/// <summary>
		/// The postal code of the address.
		/// </summary>
		public string PostalCode { get; set; }
		
		/// <summary>
		/// The state or province of the address. Note: For the EBAY_US - USA (ebay.com) marketplace, this is a 2 character value. For a list of these, see US State and Canada Province Codes.
		/// </summary>
		public string StateOrProvince { get; set; }
	}
	
	/// <summary>
	/// The type that defines the fields for initiateProxyGuestCheckoutSession request.
	/// </summary>
	public class CheckoutSessionRequestWithoutPayment
	{
		
		/// <summary>
		/// The buyer's email address.
		/// </summary>
		public string ContactEmail { get; set; }
		
		/// <summary>
		/// The buyer's first name.
		/// </summary>
		public string ContactFirstName { get; set; }
		
		/// <summary>
		/// The buyer's last name.
		/// </summary>
		public string ContactLastName { get; set; }
		
		/// <summary>
		/// The type that defines the fields for a line item in an eBay guest checkout session. Maximum number of line items: 10
		/// </summary>
		public LineItemInput[] LineItemInputs { get; set; }
		
		/// <summary>
		/// The type that defines the fields for a shipping address. For restrictions, see Shipping restrictions.
		/// </summary>
		public ShippingAddress ShippingAddress { get; set; }
	}
	
	/// <summary>
	/// Type that defines the fields for a checkout session.
	/// </summary>
	public class CheckoutSessionResponse
	{
		
		/// <summary>
		/// The container that returns the payment methods that can be used to purchase the items.
		/// </summary>
		public PaymentMethod[] AcceptedPaymentMethods { get; set; }
		
		/// <summary>
		/// The container that returns the information of the coupons that were applied in the checkout session.
		/// </summary>
		public Coupon[] AppliedCoupons { get; set; }
		
		/// <summary>
		/// The checkoutSessionId submitted in the request.
		/// </summary>
		public string CheckoutSessionId { get; set; }
		
		/// <summary>
		/// The time the checkout session will end. To purchase the items the order must be placed before this time.
		/// </summary>
		public string ExpirationDate { get; set; }
		
		/// <summary>
		/// An array of line items associated with the checkout session.
		/// </summary>
		public LineItem[] LineItems { get; set; }
		
		/// <summary>
		/// The type that defines the fields for the costs, discounts, and seller fees and adjustments of all the line items.
		/// </summary>
		public PricingSummary PricingSummary { get; set; }
		
		/// <summary>
		/// The type that defines the fields for reference information about the payment method. This is returned only if you have used the updatePaymentInfo method to change the payment method.
		/// </summary>
		public ProvidedPaymentInstrument ProvidedPaymentInstrument { get; set; }
		
		/// <summary>
		/// The type that defines the fields for a shipping address. For restrictions, see Shipping restrictions.
		/// </summary>
		public ShippingAddress ShippingAddress { get; set; }
		
		/// <summary>
		/// An array of any process errors or warnings that were generated during the method processing.
		/// </summary>
		public Error[] Warnings { get; set; }
	}
	
	/// <summary>
	/// The type the defines the fields for the coupon information.
	/// </summary>
	public class Coupon
	{
		
		/// <summary>
		/// The redemption code of the coupon. Note: There can be only one redemption code per order.
		/// </summary>
		public string RedemptionCode { get; set; }
	}
	
	/// <summary>
	/// The type that defines the fields for the coupon information used in the request.
	/// </summary>
	public class CouponRequest
	{
		
		/// <summary>
		/// The redemption code of the coupon. Maximum: one redemption code per order
		/// </summary>
		public string RedemptionCode { get; set; }
	}
	
	/// <summary>
	/// The type that defines the fields used to create an eBay guest checkout session.
	/// </summary>
	public class CreateGuestCheckoutSessionRequest
	{
		
		/// <summary>
		/// The buyer's email address.
		/// </summary>
		public string ContactEmail { get; set; }
		
		/// <summary>
		/// The buyer's first name.
		/// </summary>
		public string ContactFirstName { get; set; }
		
		/// <summary>
		/// The buyer's last name.
		/// </summary>
		public string ContactLastName { get; set; }
		
		/// <summary>
		/// The type that defines the fields for the credit card that's used to pay for the items.
		/// </summary>
		public CreditCard CreditCard { get; set; }
		
		/// <summary>
		/// The type that defines the fields for a line item in an eBay guest checkout session. Maximum number of line items: 10
		/// </summary>
		public LineItemInput[] LineItemInputs { get; set; }
		
		/// <summary>
		/// The type that defines the fields for a shipping address. For restrictions, see Shipping restrictions.
		/// </summary>
		public ShippingAddress ShippingAddress { get; set; }
	}
	
	/// <summary>
	/// The type that defines the fields for creating an eBay member checkout session.
	/// </summary>
	public class CreateSignInCheckoutSessionRequest
	{
		
		/// <summary>
		/// The type that defines the fields for the credit card that's used to pay for the items.
		/// </summary>
		public CreditCard CreditCard { get; set; }
		
		/// <summary>
		/// The container for the line item information fields in an eBay member checkout session. Maximum number of line items: 10
		/// </summary>
		public LineItemInput[] LineItemInputs { get; set; }
		
		/// <summary>
		/// The type that defines the fields for a shipping address. For restrictions, see Shipping restrictions.
		/// </summary>
		public ShippingAddress ShippingAddress { get; set; }
	}
	
	/// <summary>
	/// The type that defines the fields for the credit card that's used to pay for the items.
	/// </summary>
	public class CreditCard
	{
		
		/// <summary>
		/// The name of the card holder under which the credit card was issued.
		/// </summary>
		public string AccountHolderName { get; set; }
		
		/// <summary>
		/// The type that defines the fields for an address.
		/// </summary>
		public BillingAddress BillingAddress { get; set; }
		
		/// <summary>
		/// The type of the credit card, such as Visa or MasterCard.
		/// </summary>
		public string Brand { get; set; }
		
		/// <summary>
		/// The credit card number on the card.
		/// </summary>
		public string CardNumber { get; set; }
		
		/// <summary>
		/// The Card Verification Value of the credit card. This value is also known as the card verification code (CVC) or card security code (CSC). This is a three-digit number on VISA, MasterCard, and Discover branded credit and debit cards. On American Express branded cards, this is a four-digit numeric code. Note: This number is not the PIN associated with the card.
		/// </summary>
		public string CvvNumber { get; set; }
		
		/// <summary>
		/// The month the credit card expires.
		/// </summary>
		public int ExpireMonth { get; set; }
		
		/// <summary>
		/// The year the credit card expires.
		/// </summary>
		public int ExpireYear { get; set; }
	}
	
	/// <summary>
	/// The type that defines the fields for the error messages.
	/// </summary>
	public class Error
	{
		
		/// <summary>
		/// Identifies the type of error.
		/// </summary>
		public string Category { get; set; }
		
		/// <summary>
		/// Name for the primary system where the error occurred. This is relevant for application errors.
		/// </summary>
		public string Domain { get; set; }
		
		/// <summary>
		/// A unique number to identify the error.
		/// </summary>
		public int ErrorId { get; set; }
		
		/// <summary>
		/// An array of request elements most closely associated to the error.
		/// </summary>
		public string[] InputRefIds { get; set; }
		
		/// <summary>
		/// A more detailed explanation of the error.
		/// </summary>
		public string LongMessage { get; set; }
		
		/// <summary>
		/// Information on how to correct the problem, in the end user's terms and language where applicable.
		/// </summary>
		public string Message { get; set; }
		
		/// <summary>
		/// An array of request elements most closely associated to the error.
		/// </summary>
		public string[] OutputRefIds { get; set; }
		
		/// <summary>
		/// An array of name/value pairs that describe details the error condition. These are useful when multiple errors are returned.
		/// </summary>
		public ErrorParameter[] Parameters { get; set; }
		
		/// <summary>
		/// Further helps indicate which subsystem the error is coming from. System subcategories include: Initialization, Serialization, Security, Monitoring, Rate Limiting, etc.
		/// </summary>
		public string Subdomain { get; set; }
	}
	
	/// <summary>
	/// An array of name/value pairs that provide details regarding the error.
	/// </summary>
	public class ErrorParameter
	{
		
		/// <summary>
		/// The object of the error.
		/// </summary>
		public string Name { get; set; }
		
		/// <summary>
		/// The value of the object.
		/// </summary>
		public string Value { get; set; }
	}
	
	/// <summary>
	/// The type that defines the fields for the location of a tracking event.
	/// </summary>
	public class EventLocation
	{
		
		/// <summary>
		/// The city where the tracking event occurred.
		/// </summary>
		public string City { get; set; }
		
		/// <summary>
		/// The two letter code representing the country of the address where the tracking event occurred. For implementation help, refer to <a href='https://developer.ebay.com/devzone/rest/api-ref/order/types/CountryCodeEnum.html'>eBay API documentation</a>
		/// </summary>
		public string Country { get; set; }
		
		/// <summary>
		/// The county where the tracking event occurred.
		/// </summary>
		public string County { get; set; }
		
		/// <summary>
		/// The postal code where the tracking event occurred.
		/// </summary>
		public string PostalCode { get; set; }
		
		/// <summary>
		/// The state where the tracking event occurred.
		/// </summary>
		public string StateOrProvince { get; set; }
	}
	
	public class GuestCheckoutSessionResponse
	{
		
		/// <summary>
		/// The container that returns the payment methods that can be used to purchase the items.
		/// </summary>
		public PaymentMethod[] AcceptedPaymentMethods { get; set; }
		
		/// <summary>
		/// The container that returns the information for the coupons that were applied in the checkout session.
		/// </summary>
		public Coupon[] AppliedCoupons { get; set; }
		
		/// <summary>
		/// The checkoutSessionId submitted in the request.
		/// </summary>
		public string CheckoutSessionId { get; set; }
		
		/// <summary>
		/// The time the checkout session will end. To purchase the items the order must be placed before this time.
		/// </summary>
		public string ExpirationDate { get; set; }
		
		/// <summary>
		/// An array of line items associated with the checkout session.
		/// </summary>
		public LineItem[] LineItems { get; set; }
		
		/// <summary>
		/// The container that returns the marketing consent fields. These fields show the legal marketing consent message that is to be shown to the buyer when they place the order, and the marketing channels, for example email, and marketing types, for example promotions, the buyer can choose to receive.
		/// </summary>
		public MarketingMessage[] MarketingMessages { get; set; }
		
		/// <summary>
		/// The type that defines the fields for the costs, discounts, and seller fees and adjustments of all the line items.
		/// </summary>
		public PricingSummary PricingSummary { get; set; }
		
		/// <summary>
		/// The type that defines the fields for reference information about the payment method. This is returned only if you have used the updatePaymentInfo method to change the payment method.
		/// </summary>
		public ProvidedPaymentInstrument ProvidedPaymentInstrument { get; set; }
		
		/// <summary>
		/// The type that defines the fields for a shipping address. For restrictions, see Shipping restrictions.
		/// </summary>
		public ShippingAddress ShippingAddress { get; set; }
		
		/// <summary>
		/// An array of any process errors or warnings that were generated during the method processing.
		/// </summary>
		public Error[] Warnings { get; set; }
	}
	
	/// <summary>
	/// The type that defines the fields that enables the buyer to give or withhold their permission to receive marketing messages.
	/// </summary>
	public class GuestPlaceOrderRequest
	{
		
		/// <summary>
		/// The container for the marketing channels, the types of messages the buyer can choose to receive and the field to indicate whether the buyer wants to receive marketing materials from eBay. These fields are required for all marketplaces. See Marketing Consent Notice for details.
		/// </summary>
		public MarketingTerms[] MarketingTerms { get; set; }
	}
	
	/// <summary>
	/// The type that defines the fields for a guest purchase order.
	/// </summary>
	public class GuestPurchaseOrder
	{
		
		/// <summary>
		/// The container that returns the information for the coupons that were applied in the order.
		/// </summary>
		public Coupon[] AppliedCoupons { get; set; }
		
		/// <summary>
		/// An array of the line items in the order.
		/// </summary>
		public OrderLineItem[] LineItems { get; set; }
		
		/// <summary>
		/// The type that defines the fields for the costs, discounts, and seller fees and adjustments of all the line items.
		/// </summary>
		public PricingSummary PricingSummary { get; set; }
		
		/// <summary>
		/// The creation date of the purchase order.
		/// </summary>
		public string PurchaseOrderCreationDate { get; set; }
		
		/// <summary>
		/// The unique identifier of the purchase order. This value was returned in the purchaseOrderId field by the placeGuestOrder method.
		/// </summary>
		public string PurchaseOrderId { get; set; }
		
		/// <summary>
		/// The container for the status of the payment for the purchase order. For implementation help, refer to <a href='https://developer.ebay.com/devzone/rest/api-ref/order/types/PurchaseOrderPaymentStatusEnum.html'>eBay API documentation</a>
		/// </summary>
		public string PurchaseOrderPaymentStatus { get; set; }
		
		/// <summary>
		/// An enumeration value that indicates the current status of the buyer's payment and any refund that applies to the purchase order. For implementation help, refer to <a href='https://developer.ebay.com/devzone/rest/api-ref/order/types/PurchaseOrderStatusEnum.html'>eBay API documentation</a>
		/// </summary>
		public string PurchaseOrderStatus { get; set; }
		
		/// <summary>
		/// The type the defines the fields for the details of a monetary amount, in the currency used by the method and in the original currency, if the amount was converted between currencies.
		/// </summary>
		public Amount RefundedAmount { get; set; }
		
		/// <summary>
		/// The container for any warning messages.
		/// </summary>
		public Error[] Warnings { get; set; }
	}
	
	/// <summary>
	/// The type the defines the fields for the details of an image, such as size and URL. Currently only imageUrl is getting populated. The height and width were added for future use.
	/// </summary>
	public class Image
	{
		
		/// <summary>
		/// Reserved for future use.
		/// </summary>
		public int Height { get; set; }
		
		/// <summary>
		/// The URL of the image.
		/// </summary>
		public string ImageUrl { get; set; }
		
		/// <summary>
		/// Reserved for future use.
		/// </summary>
		public int Width { get; set; }
	}
	
	/// <summary>
	/// This type provides the type of import tax applicable to the order, and the total amount of tax for all line items in the order.
	/// </summary>
	public class ImportTax
	{
		
		/// <summary>
		/// The type the defines the fields for the details of a monetary amount, in the currency used by the method and in the original currency, if the amount was converted between currencies.
		/// </summary>
		public Amount Amount { get; set; }
		
		/// <summary>
		/// This enumeration value indicates the type of import tax applicable to the order. Currently, the only applicable import tax is 'Goods and Services' tax (indicated with GST). 'Goods and Services' tax is only applicable to orders on the eBay Australia marketplace. For implementation help, refer to <a href='https://developer.ebay.com/devzone/rest/api-ref/order/types/ImportTaxTypeEnum.html'>eBay API documentation</a>
		/// </summary>
		public string ImportTaxType { get; set; }
	}
	
	/// <summary>
	/// The type that defines the fields for the initiateGuestPayment method.
	/// </summary>
	public class InitiatePaymentRequest
	{
		
		/// <summary>
		/// The enumeration value that specifies the payment method company. Note: The only value supported for the initiateGuestPayment method is PAYPAL_CHECKOUT. For implementation help, refer to <a href='https://developer.ebay.com/devzone/rest/api-ref/order/types/PaymentMethodBrandEnum.html'>eBay API documentation</a>
		/// </summary>
		public string PaymentMethodBrandType { get; set; }
		
		/// <summary>
		/// The enumeration value that specifies the payment method type. Note: The only value supported for the initiateGuestPayment method is WALLET. For implementation help, refer to <a href='https://developer.ebay.com/devzone/rest/api-ref/order/types/PaymentMethodTypeEnum.html'>eBay API documentation</a>
		/// </summary>
		public string PaymentMethodType { get; set; }
	}
	
	/// <summary>
	/// The type that defines the fields to support using the Post Order API for returns and cancellations. Restriction: The Post Order API can be used only with eBay member checkouts.
	/// </summary>
	public class LegacyReference
	{
		
		/// <summary>
		/// The legacy ID used to identify an item. This is used by the Post Order API Create Return Request method. This call initiates the item return process. For more information on how to use this field in the Post Order API, see Create a return request in the Buy Integration Guide. Restriction: The Post Order API can be used only with eBay member checkouts.
		/// </summary>
		public string LegacyItemId { get; set; }
		
		/// <summary>
		/// The legacy ID of the order. This is used by the Post Order API Submit Cancellation Request method. This method initiates the item cancellation process. For more information on how to use this field in the Post Order API, see Using the Post Order API. Restriction: The Post Order API can be used only with eBay member checkouts.
		/// </summary>
		public string LegacyOrderId { get; set; }
		
		/// <summary>
		/// The legacy ID of the transaction. This is used by the Post Order API Create Return Request call. This call initiates the item return process. For more information on how to use this field in the Post Order API, see Using the Post Order API in the Buy Integration Guide. Restriction: The Post Order API can be used only with eBay member checkouts.
		/// </summary>
		public string LegacyTransactionId { get; set; }
	}
	
	/// <summary>
	/// The type that defines the fields for an individual line item.
	/// </summary>
	public class LineItem
	{
		
		/// <summary>
		/// The type the defines the fields for the details of a monetary amount, in the currency used by the method and in the original currency, if the amount was converted between currencies.
		/// </summary>
		public Amount BaseUnitPrice { get; set; }
		
		/// <summary>
		/// The type the defines the fields for the details of an image, such as size and URL. Currently only imageUrl is getting populated. The height and width were added for future use.
		/// </summary>
		public Image Image { get; set; }
		
		/// <summary>
		/// The eBay identifier of an item. This ID is returned by the Browse and Feed API methods. The ID must be in RESTful item ID format. For example: v1|262446562346|561248611424 or v1|112330214619|0. For more information about item ID for RESTful APIs, see the Legacy API compatibility. Each itemId will become a single line item. You can have a maximum of 10 itemId(s) per checkout. Maximum: 10
		/// </summary>
		public string ItemId { get; set; }
		
		/// <summary>
		/// A unique eBay-assigned ID value that identifies a line item in a checkout session.
		/// </summary>
		public string LineItemId { get; set; }
		
		/// <summary>
		/// The type the defines the fields for the details of a monetary amount, in the currency used by the method and in the original currency, if the amount was converted between currencies.
		/// </summary>
		public Amount NetPrice { get; set; }
		
		/// <summary>
		/// An array of promotions applied to the item of this line item.
		/// </summary>
		public Promotion[] Promotions { get; set; }
		
		/// <summary>
		/// The number of individual items ordered for this line item.
		/// </summary>
		public int Quantity { get; set; }
		
		/// <summary>
		/// The type that defines the fields for the basic seller information.
		/// </summary>
		public Seller Seller { get; set; }
		
		/// <summary>
		/// An array of the shipping methods that are available for the line item. By default, the first one will be selected.
		/// </summary>
		public ShippingOption[] ShippingOptions { get; set; }
		
		/// <summary>
		/// This text string is derived from the item condition, item title, and the item aspects (such as size, color, capacity, model, brand, etc.).
		/// </summary>
		public string ShortDescription { get; set; }
		
		/// <summary>
		/// The seller created title of the item.
		/// </summary>
		public string Title { get; set; }
	}
	
	/// <summary>
	/// The type that defines the fields for a line item.
	/// </summary>
	public class LineItemInput
	{
		
		/// <summary>
		/// The eBay identifier of an item. This ID is returned by the Browse and Feed API methods. The ID must be in RESTful item ID format. For example: v1|262446562346|561248611424 or v1|112330214619|0. For more information about item ID for RESTful APIs, see the Legacy API compatibility. Each itemId will become a single line item. You can have a maximum of 10 itemId(s) per checkout. Maximum: 10
		/// </summary>
		public string ItemId { get; set; }
		
		/// <summary>
		/// The number of items ordered in this line item.
		/// </summary>
		public int Quantity { get; set; }
	}
	
	/// <summary>
	/// Type the defines the fields for the line item ID and the quantity.
	/// </summary>
	public class LineItemReference
	{
		
		/// <summary>
		/// A unique eBay-assigned ID value to identify the line item in a purchase order.
		/// </summary>
		public string LineItemId { get; set; }
		
		/// <summary>
		/// The number of individual items ordered for this line item, as specified by the buyer.
		/// </summary>
		public int Quantity { get; set; }
	}
	
	/// <summary>
	/// The type that defines the marketing consent fields. These fields show the legal message to be shown to the buyer, and the marketing channels and marketing type the buyer can choose to receive. These fields are required for all marketplaces. See Marketing Consent Notice for details.
	/// </summary>
	public class MarketingMessage
	{
		
		/// <summary>
		/// This field returns the following legal marketing consent message. This message is to be shown to the buyer when they place the order. I agree to receive marketing offers, promotions, and surveys from eBay through emails.
		/// </summary>
		public string LegalMessage { get; set; }
		
		/// <summary>
		/// A list of enumeration values representing the marketing channels, such as email, that the buyer can choose to receive. These are to be shown to the buyer when they place the order.
		/// </summary>
		public string[] MarketingChannels { get; set; }
		
		/// <summary>
		/// A list of enumeration values representing the marketing types, such as OFFER, that the buyer can choose to receive. These are to be shown to the buyer when they place the order.
		/// </summary>
		public string[] MarketingTypes { get; set; }
	}
	
	/// <summary>
	/// The type that defines the fields used to let the buyer opt-in or opt-out-of receiving marketing messages and the list of marketing channels and types. These fields are required for all marketplaces. See Marketing Consent Notice for details.
	/// </summary>
	public class MarketingTerms
	{
		
		/// <summary>
		/// An enumeration value representing the available marketing channels. Valid Values: EMAIL Required: You must always pass in all the values, even if marketingTermsAccepted is set to false. See the Samples for an example.
		/// </summary>
		public string[] MarketingChannels { get; set; }
		
		/// <summary>
		/// A boolean that indicates whether the buyer wants to receive marketing messages.
		/// </summary>
		public bool MarketingTermsAccepted { get; set; }
		
		/// <summary>
		/// An enumeration value representing the available types of marketing messages. Valid Values: OFFER PROMOTION SURVEY Required: You must always pass in all these values, even if marketingTermsAccepted is set to false. See the Samples for an example.
		/// </summary>
		public string[] MarketingTypes { get; set; }
	}
	
	/// <summary>
	/// The type that defines the fields for line item information in a purchase order.
	/// </summary>
	public class OrderLineItem
	{
		
		/// <summary>
		/// The type the defines the fields for the details of a monetary amount, in the currency used by the method and in the original currency, if the amount was converted between currencies.
		/// </summary>
		public Amount BaseUnitPrice { get; set; }
		
		/// <summary>
		/// The type the defines the fields for the details of an image, such as size and URL. Currently only imageUrl is getting populated. The height and width were added for future use.
		/// </summary>
		public Image Image { get; set; }
		
		/// <summary>
		/// The identifier of the item.
		/// </summary>
		public string ItemId { get; set; }
		
		/// <summary>
		/// The type that defines the fields to support using the Post Order API for returns and cancellations. Restriction: The Post Order API can be used only with eBay member checkouts.
		/// </summary>
		public LegacyReference LegacyReference { get; set; }
		
		/// <summary>
		/// The identifier of this line item. This is created by the initiateCheckoutSession for a member and initiateGuestCheckoutSession for a guest calls.
		/// </summary>
		public string LineItemId { get; set; }
		
		/// <summary>
		/// An enumeration value that indicates the payment status of this line item. For implementation help, refer to <a href='https://developer.ebay.com/devzone/rest/api-ref/order/types/LineItemPaymentStatusEnum.html'>eBay API documentation</a>
		/// </summary>
		public string LineItemPaymentStatus { get; set; }
		
		/// <summary>
		/// An enumeration value that indicates the fulfillment state of this line item. Note: When there is no tracking information, this status will never change from FULFILLMENT_IN_PROGRESS because without tracking information eBay has no way of knowing if the order was delivered. For implementation help, refer to <a href='https://developer.ebay.com/devzone/rest/api-ref/order/types/LineItemStatusEnum.html'>eBay API documentation</a>
		/// </summary>
		public string LineItemStatus { get; set; }
		
		/// <summary>
		/// The type the defines the fields for the details of a monetary amount, in the currency used by the method and in the original currency, if the amount was converted between currencies.
		/// </summary>
		public Amount NetPrice { get; set; }
		
		/// <summary>
		/// The unique order ID for this line item. This value is the new eBay unique order ID. For details see, Easier order management with updated order numbers. In the future, you will use this value in the Post Order API instead of the lineItems.legacyReference fields. Maximum Length: 40 characters
		/// </summary>
		public string OrderId { get; set; }
		
		/// <summary>
		/// An array of promotions applied to the items in this line item.
		/// </summary>
		public Promotion[] Promotions { get; set; }
		
		/// <summary>
		/// The number of individual items in this line item.
		/// </summary>
		public int Quantity { get; set; }
		
		/// <summary>
		/// The type that defines the fields for the basic seller information.
		/// </summary>
		public Seller Seller { get; set; }
		
		/// <summary>
		/// The type that defines the fields for the shipping information, such as delivery date estimates and shipping provider.
		/// </summary>
		public ShippingDetail ShippingDetail { get; set; }
		
		/// <summary>
		/// The seller created title of the item.
		/// </summary>
		public string Title { get; set; }
	}
	
	/// <summary>
	/// The type that defines the fields for the reference information about the payment method.
	/// </summary>
	public class PaymentInstrument
	{
		
		/// <summary>
		/// The type that defines the fields for the credit card company (brand), which can be used as the payment method.
		/// </summary>
		public PaymentMethodBrand Brand { get; set; }
		
		/// <summary>
		/// An enumeration value that indicates the method of payment, such as credit card. For implementation help, refer to <a href='https://developer.ebay.com/devzone/rest/api-ref/order/types/PaymentMethodTypeEnum.html'>eBay API documentation</a>
		/// </summary>
		public string PaymentMethodType { get; set; }
	}
	
	/// <summary>
	/// The type that defines the fields for the payment reference, such as last four digits of a credit card.
	/// </summary>
	public class PaymentInstrumentReference
	{
		
		/// <summary>
		/// The identifier of the buyer's PayPal cart, which is returned by the initiateGuestPayment method. This ID is generated by PayPal and required for the PayPal Smart Button eBay guest payment flow.
		/// </summary>
		public string ExternalReferenceId { get; set; }
		
		/// <summary>
		/// The last four digits of the credit card number being used to pay for the items.
		/// </summary>
		public string LastFourDigitForCreditCard { get; set; }
	}
	
	/// <summary>
	/// The type that defines the fields for the payment method.
	/// </summary>
	public class PaymentMethod
	{
		
		/// <summary>
		/// Text indicating the payment type. For example, when paying by credit card, this value will be CC. When paying using PayPal Smart Button eBay guest payment flow the value will be WALLET.
		/// </summary>
		public string Label { get; set; }
		
		/// <summary>
		/// The type the defines the fields for the details of an image, such as size and URL. Currently only imageUrl is getting populated. The height and width were added for future use.
		/// </summary>
		public Image LogoImage { get; set; }
		
		/// <summary>
		/// An array of credit card brands that can be used as the payment method.
		/// </summary>
		public PaymentMethodBrand[] PaymentMethodBrands { get; set; }
		
		/// <summary>
		/// The type that defines the fields for legal messages and buyer consent verification.
		/// </summary>
		public PaymentMethodMessage[] PaymentMethodMessages { get; set; }
		
		/// <summary>
		/// An enumeration value that indicates the method of payment, such as credit card. For implementation help, refer to <a href='https://developer.ebay.com/devzone/rest/api-ref/order/types/PaymentMethodTypeEnum.html'>eBay API documentation</a>
		/// </summary>
		public string PaymentMethodType { get; set; }
	}
	
	/// <summary>
	/// The type that defines the fields for the credit card company (brand), which can be used as the payment method.
	/// </summary>
	public class PaymentMethodBrand
	{
		
		/// <summary>
		/// The type the defines the fields for the details of an image, such as size and URL. Currently only imageUrl is getting populated. The height and width were added for future use.
		/// </summary>
		public Image LogoImage { get; set; }
		
		/// <summary>
		/// An enumeration value that indicates the credit card company (brand). For implementation help, refer to <a href='https://developer.ebay.com/devzone/rest/api-ref/order/types/PaymentMethodBrandEnum.html'>eBay API documentation</a>
		/// </summary>
		public string PaymentMethodBrandType { get; set; }
	}
	
	/// <summary>
	/// The type that defines the fields for legal messages and buyer consent verification.
	/// </summary>
	public class PaymentMethodMessage
	{
		
		/// <summary>
		/// Information that eBay is legally obligated to show to the buyer. This field can be null, in which case do nothing. But if this field is not null, the value of this field must appear on the checkout page. Note: This field is not used for US purchases.
		/// </summary>
		public string LegalMessage { get; set; }
		
		/// <summary>
		/// Reserved for future use.
		/// </summary>
		public string PrivacyPolicyWebUrl { get; set; }
		
		/// <summary>
		/// Reserved for future use.
		/// </summary>
		public bool RequiredForUserConfirmation { get; set; }
		
		/// <summary>
		/// Reserved for future use.
		/// </summary>
		public string UserAgreementWebUrl { get; set; }
	}
	
	/// <summary>
	/// The type that defines the fields for the costs, discounts, and seller fees and adjustments of all the line items.
	/// </summary>
	public class PricingSummary
	{
		
		/// <summary>
		/// The type the defines the fields for the details of a monetary amount, in the currency used by the method and in the original currency, if the amount was converted between currencies.
		/// </summary>
		public Amount AdditionalSavings { get; set; }
		
		/// <summary>
		/// The type that defines the fields for seller adjustments. An adjustment can be a credit or debit.
		/// </summary>
		public Adjustment Adjustment { get; set; }
		
		/// <summary>
		/// The type the defines the fields for the details of a monetary amount, in the currency used by the method and in the original currency, if the amount was converted between currencies.
		/// </summary>
		public Amount DeliveryCost { get; set; }
		
		/// <summary>
		/// The type the defines the fields for the details of a monetary amount, in the currency used by the method and in the original currency, if the amount was converted between currencies.
		/// </summary>
		public Amount DeliveryDiscount { get; set; }
		
		/// <summary>
		/// The type the defines the fields for the details of a monetary amount, in the currency used by the method and in the original currency, if the amount was converted between currencies.
		/// </summary>
		public Amount Fee { get; set; }
		
		/// <summary>
		/// The type the defines the fields for the details of a monetary amount, in the currency used by the method and in the original currency, if the amount was converted between currencies.
		/// </summary>
		public Amount ImportCharges { get; set; }
		
		/// <summary>
		/// This type provides the type of import tax applicable to the order, and the total amount of tax for all line items in the order.
		/// </summary>
		public ImportTax ImportTax { get; set; }
		
		/// <summary>
		/// The type the defines the fields for the details of a monetary amount, in the currency used by the method and in the original currency, if the amount was converted between currencies.
		/// </summary>
		public Amount PriceDiscount { get; set; }
		
		/// <summary>
		/// The type the defines the fields for the details of a monetary amount, in the currency used by the method and in the original currency, if the amount was converted between currencies.
		/// </summary>
		public Amount PriceSubtotal { get; set; }
		
		/// <summary>
		/// The type the defines the fields for the details of a monetary amount, in the currency used by the method and in the original currency, if the amount was converted between currencies.
		/// </summary>
		public Amount Tax { get; set; }
		
		/// <summary>
		/// The type the defines the fields for the details of a monetary amount, in the currency used by the method and in the original currency, if the amount was converted between currencies.
		/// </summary>
		public Amount Total { get; set; }
	}
	
	/// <summary>
	/// The type that defines the fields for the details of an item promotion.
	/// </summary>
	public class Promotion
	{
		
		/// <summary>
		/// The type the defines the fields for the details of a monetary amount, in the currency used by the method and in the original currency, if the amount was converted between currencies.
		/// </summary>
		public Amount Discount { get; set; }
		
		/// <summary>
		/// Note: This field is not return in the purchase order methods response.
		/// </summary>
		public string DiscountPercentage { get; set; }
		
		/// <summary>
		/// The text for the promotion title, which describes the promotion. For example, Buy 1 Get 1.
		/// </summary>
		public string Message { get; set; }
		
		/// <summary>
		/// An identifier of the promotion that was generated by the system when the promotion was created.
		/// </summary>
		public string PromotionCode { get; set; }
		
		/// <summary>
		/// Indicates the kind of promotion. Some examples are: SellerDiscountedPromotionalOffer and COUPON.
		/// </summary>
		public string PromotionType { get; set; }
	}
	
	/// <summary>
	/// The type that defines the fields for reference information about the payment method. This is returned only if you have used the updatePaymentInfo method to change the payment method.
	/// </summary>
	public class ProvidedPaymentInstrument
	{
		
		/// <summary>
		/// The type that defines the fields for the payment reference, such as last four digits of a credit card.
		/// </summary>
		public PaymentInstrumentReference PaymentInstrumentReference { get; set; }
		
		/// <summary>
		/// The type that defines the fields for the credit card company (brand), which can be used as the payment method.
		/// </summary>
		public PaymentMethodBrand PaymentMethodBrand { get; set; }
		
		/// <summary>
		/// An enumeration value that indicates the method of payment, such as CREDIT_CARD. For implementation help, refer to <a href='https://developer.ebay.com/devzone/rest/api-ref/order/types/PaymentMethodTypeEnum.html'>eBay API documentation</a>
		/// </summary>
		public string PaymentMethodType { get; set; }
	}
	
	/// <summary>
	/// The type that defines the fields for a purchase order, including line items, costs and charges, payment method, and the purchase order status.
	/// </summary>
	public class PurchaseOrder
	{
		
		/// <summary>
		/// The container that returns the information for the coupons that were applied in the order.
		/// </summary>
		public Coupon[] AppliedCoupons { get; set; }
		
		/// <summary>
		/// An array of line items in the purchase order.
		/// </summary>
		public OrderLineItem[] LineItems { get; set; }
		
		/// <summary>
		/// The type that defines the fields for the reference information about the payment method.
		/// </summary>
		public PaymentInstrument PaymentInstrument { get; set; }
		
		/// <summary>
		/// The type that defines the fields for the costs, discounts, and seller fees and adjustments of all the line items.
		/// </summary>
		public PricingSummary PricingSummary { get; set; }
		
		/// <summary>
		/// The timestamp of when the purchase order was created.
		/// </summary>
		public string PurchaseOrderCreationDate { get; set; }
		
		/// <summary>
		/// The unique identifier of the purchase order. This value was returned in the purchaseOrderId field by the placeOrder method.
		/// </summary>
		public string PurchaseOrderId { get; set; }
		
		/// <summary>
		/// An enumeration value that indicates the status of the payment for the purchase order. For implementation help, refer to <a href='https://developer.ebay.com/devzone/rest/api-ref/order/types/PurchaseOrderPaymentStatusEnum.html'>eBay API documentation</a>
		/// </summary>
		public string PurchaseOrderPaymentStatus { get; set; }
		
		/// <summary>
		/// The container for the current status of the buyer's payment and any refund that applies to the purchase order. For implementation help, refer to <a href='https://developer.ebay.com/devzone/rest/api-ref/order/types/PurchaseOrderStatusEnum.html'>eBay API documentation</a>
		/// </summary>
		public string PurchaseOrderStatus { get; set; }
		
		/// <summary>
		/// The type the defines the fields for the details of a monetary amount, in the currency used by the method and in the original currency, if the amount was converted between currencies.
		/// </summary>
		public Amount RefundedAmount { get; set; }
		
		/// <summary>
		/// The type that defines the fields for a shipping address. For restrictions, see Shipping restrictions.
		/// </summary>
		public ShippingAddress ShippingAddress { get; set; }
		
		/// <summary>
		/// An array of the shipping providers and the purchase order delivery details.
		/// </summary>
		public ShippingFulfillment[] ShippingFulfillments { get; set; }
		
		/// <summary>
		/// An array of warning messages. These type of errors do not prevent the call from executing but should be checked.
		/// </summary>
		public Error[] Warnings { get; set; }
	}
	
	/// <summary>
	/// The type that defines the fields for the summary of a purchase order.
	/// </summary>
	public class PurchaseOrderSummary
	{
		
		/// <summary>
		/// The URI of the purchase order.
		/// </summary>
		public string PurchaseOrderHref { get; set; }
		
		/// <summary>
		/// A unique identifier of the purchase order. When a checkout session completes, a purchase order ID is generated but this does not indicate that the item has been paid for. Note: If there is a problem with the payment information, the purchase order ID will be returned and the PurchaseOrderPaymentStatusEnum field will return FAILED.
		/// </summary>
		public string PurchaseOrderId { get; set; }
		
		/// <summary>
		/// An enumeration value that indicates the payment status for the purchase order. For implementation help, refer to <a href='https://developer.ebay.com/devzone/rest/api-ref/order/types/PurchaseOrderPaymentStatusEnum.html'>eBay API documentation</a>
		/// </summary>
		public string PurchaseOrderPaymentStatus { get; set; }
		
		/// <summary>
		/// An array of warning messages.
		/// </summary>
		public Error[] Warnings { get; set; }
	}
	
	/// <summary>
	/// The type that defines the fields for the basic seller information.
	/// </summary>
	public class Seller
	{
		
		/// <summary>
		/// The percentage of the total positive feedback.
		/// </summary>
		public string FeedbackPercentage { get; set; }
		
		/// <summary>
		/// The feedback score of the seller. This value is based on the ratings from eBay members that bought items from this seller.
		/// </summary>
		public int FeedbackScore { get; set; }
		
		/// <summary>
		/// Indicates if the seller is a business or an individual. This is determined when the seller registers with eBay. If they register for a business account, this value will be BUSINESS. If they register for a private account, this value will be INDIVIDUAL. This designation is required by the tax laws in some countries. This field is returned only on the following sites. EBAY_AT, EBAY_BE, EBAY_CH, EBAY_DE, EBAY_ES, EBAY_FR, EBAY_GB, EBAY_IE, EBAY_IT, EBAY_PL Valid values: BUSINESS INDIVIDUALCode so that your app gracefully handles any future changes to this list.
		/// </summary>
		public string SellerAccountType { get; set; }
		
		/// <summary>
		/// The user name created by the seller for use on eBay.
		/// </summary>
		public string Username { get; set; }
	}
	
	/// <summary>
	/// The type that defines the fields for the details of a shipping event, such as DELIVERED.
	/// </summary>
	public class ShipmentTrackingEvents
	{
		
		/// <summary>
		/// A string describing the tracking event. For example: On FedEx vehicle for delivery
		/// </summary>
		public string Description { get; set; }
		
		/// <summary>
		/// The date of the shipment tracking event. UTC Format: yyyy-MM-ddThh:00:00.000Z For example: 2019-03-01T12:12:00.000Z
		/// </summary>
		public string EventDate { get; set; }
		
		/// <summary>
		/// A normalized string for shipment tracking event. For example: OUT_FOR_DELIVERY
		/// </summary>
		public string EventType { get; set; }
		
		/// <summary>
		/// The type that defines the fields for the location of a tracking event.
		/// </summary>
		public EventLocation Location { get; set; }
	}
	
	/// <summary>
	/// The type that defines the fields for a shipping address. For restrictions, see Shipping restrictions.
	/// </summary>
	public class ShippingAddress
	{
		
		/// <summary>
		/// The first line of the street address where the item is being shipped.
		/// </summary>
		public string AddressLine1 { get; set; }
		
		/// <summary>
		/// The second line of the street address where the item is being shipped. This optional field can be used for information such as 'Suite Number' or 'Apt Number'.
		/// </summary>
		public string AddressLine2 { get; set; }
		
		/// <summary>
		/// The city of the address where the item is being shipped.
		/// </summary>
		public string City { get; set; }
		
		/// <summary>
		/// The two letter code representing the country of the address. For implementation help, refer to <a href='https://developer.ebay.com/devzone/rest/api-ref/order/types/CountryCodeEnum.html'>eBay API documentation</a>
		/// </summary>
		public string Country { get; set; }
		
		/// <summary>
		/// The county of the address where the item is being shipped.
		/// </summary>
		public string County { get; set; }
		
		/// <summary>
		/// The phone number of the person receiving the package.
		/// </summary>
		public string PhoneNumber { get; set; }
		
		/// <summary>
		/// The postal code of the address where the item is being shipped.
		/// </summary>
		public string PostalCode { get; set; }
		
		/// <summary>
		/// Name of the person receiving the package.
		/// </summary>
		public string Recipient { get; set; }
		
		/// <summary>
		/// The state or province of the address where the item is being shipped.
		/// </summary>
		public string StateOrProvince { get; set; }
	}
	
	/// <summary>
	/// The type that defines the shipping address fields. Note: If the address cannot be validated, a warning message is be returned along with the response.
	/// </summary>
	public class ShippingAddressImpl
	{
		
		/// <summary>
		/// The first line of the street address. Maximun characters: AU, CA, &amp; US: 40 DE &amp; GB: 35 All other marketplaces: 50
		/// </summary>
		public string AddressLine1 { get; set; }
		
		/// <summary>
		/// The second line of the street address where the item is being shipped. This optional field can be used for information such as 'Suite Number' or 'Apt Number'.
		/// </summary>
		public string AddressLine2 { get; set; }
		
		/// <summary>
		/// The city of the address.
		/// </summary>
		public string City { get; set; }
		
		/// <summary>
		/// The two letter code representing the country of the address. For implementation help, refer to <a href='https://developer.ebay.com/devzone/rest/api-ref/order/types/CountryCodeEnum.html'>eBay API documentation</a>
		/// </summary>
		public string Country { get; set; }
		
		/// <summary>
		/// The county of the address.
		/// </summary>
		public string County { get; set; }
		
		/// <summary>
		/// The phone number of the person receiving the package. Note: It is highly recommended that when entering the phone number you include the country code. For example, if a US phone number is 4081231234 you would enter +14081231234. If you do not include this code, the service will use the country specified in the country field. You can find the country code at https://countrycode.org.
		/// </summary>
		public string PhoneNumber { get; set; }
		
		/// <summary>
		/// The postal code of the address.
		/// </summary>
		public string PostalCode { get; set; }
		
		/// <summary>
		/// Full name of the person receiving the purchase order.
		/// </summary>
		public string Recipient { get; set; }
		
		/// <summary>
		/// The state or province of the address. Note: For the US marketplace, this is a 2 character value. For a list of these, see US State and Canada Province Codes.
		/// </summary>
		public string StateOrProvince { get; set; }
	}
	
	/// <summary>
	/// The type that defines the fields for the shipping information, such as delivery date estimates and shipping provider.
	/// </summary>
	public class ShippingDetail
	{
		
		/// <summary>
		/// The end of the date range in which the purchase order is expected to be delivered to the shipping address (final destination).
		/// </summary>
		public string MaxEstimatedDeliveryDate { get; set; }
		
		/// <summary>
		/// The beginning of the date range in which the purchase order is expected to be delivered to the shipping address (final destination).
		/// </summary>
		public string MinEstimatedDeliveryDate { get; set; }
		
		/// <summary>
		/// The shipping provider, such as FedEx, or USPS for the line item.
		/// </summary>
		public string ShippingCarrierCode { get; set; }
		
		/// <summary>
		/// A name of a shipping type. For example, Priority Mail Express (provided by USPS) or FedEx International Priority (Provided by FedEx).
		/// </summary>
		public string ShippingServiceCode { get; set; }
	}
	
	/// <summary>
	/// The type that defines the fields for the shipping details.
	/// </summary>
	public class ShippingFulfillment
	{
		
		/// <summary>
		/// The date the purchase order was delivered.
		/// </summary>
		public string ActualDeliveryDate { get; set; }
		
		/// <summary>
		/// The container the returns the fields for the line item ID and the quantity.
		/// </summary>
		public LineItemReference[] LineItemReferences { get; set; }
		
		/// <summary>
		/// The end of the date range in which the purchase order is expected to be delivered to the shipping address.
		/// </summary>
		public string MaxEstimatedDeliveryDate { get; set; }
		
		/// <summary>
		/// The beginning of the date range in which the purchase order is expected to be delivered to the shipping address.
		/// </summary>
		public string MinEstimatedDeliveryDate { get; set; }
		
		/// <summary>
		/// The container that returns all the shipment tracking events.
		/// </summary>
		public ShipmentTrackingEvents[] ShipmentTrackingEvents { get; set; }
		
		/// <summary>
		/// The shipping provider number associated with the purchase order that can be used to track the package.
		/// </summary>
		public string ShipmentTrackingNumber { get; set; }
		
		/// <summary>
		/// The URL of the shipping provider's shipment tracking page.
		/// </summary>
		public string ShipmentTrackingUrl { get; set; }
		
		/// <summary>
		/// The date the seller gave the purchase order to the shipping provider.
		/// </summary>
		public string ShippedDate { get; set; }
		
		/// <summary>
		/// A name of the shipping provider, such as FedEx, or USPS.
		/// </summary>
		public string ShippingCarrierCode { get; set; }
		
		/// <summary>
		/// A name of a shipping type. For example, Priority Mail Express (provided by USPS) or FedEx International Priority (Provided by FedEx).
		/// </summary>
		public string ShippingServiceCode { get; set; }
	}
	
	/// <summary>
	/// The type that defines the fields for the shipping options.
	/// </summary>
	public class ShippingOption
	{
		
		/// <summary>
		/// The type the defines the fields for the details of a monetary amount, in the currency used by the method and in the original currency, if the amount was converted between currencies.
		/// </summary>
		public Amount BaseDeliveryCost { get; set; }
		
		/// <summary>
		/// The type the defines the fields for the details of a monetary amount, in the currency used by the method and in the original currency, if the amount was converted between currencies.
		/// </summary>
		public Amount DeliveryDiscount { get; set; }
		
		/// <summary>
		/// The type the defines the fields for the details of a monetary amount, in the currency used by the method and in the original currency, if the amount was converted between currencies.
		/// </summary>
		public Amount ImportCharges { get; set; }
		
		/// <summary>
		/// The end of the date range in which the purchase order is expected to be delivered to the shipping address.
		/// </summary>
		public string MaxEstimatedDeliveryDate { get; set; }
		
		/// <summary>
		/// The beginning of the date range in which the purchase order is expected to be delivered to the shipping address.
		/// </summary>
		public string MinEstimatedDeliveryDate { get; set; }
		
		/// <summary>
		/// Indicates if the shipping method is selected.
		/// </summary>
		public bool Selected { get; set; }
		
		/// <summary>
		/// The shipping provider, such as FedEx, or USPS for the line item.
		/// </summary>
		public string ShippingCarrierCode { get; set; }
		
		/// <summary>
		/// A unique ID for the selected shipping option/method.
		/// </summary>
		public string ShippingOptionId { get; set; }
		
		/// <summary>
		/// A name of a shipping type. For example, Priority Mail Express (provided by USPS) or FedEx International Priority (Provided by FedEx).
		/// </summary>
		public string ShippingServiceCode { get; set; }
	}
	
	/// <summary>
	/// The type that defines the fields for payment information.
	/// </summary>
	public class UpdatePaymentInformation
	{
		
		/// <summary>
		/// The type that defines the fields for the credit card that's used to pay for the items.
		/// </summary>
		public CreditCard CreditCard { get; set; }
		
		/// <summary>
		/// The type that defines the fields for payment tokens. Note: This is supported only for eBay Guest checkouts.
		/// </summary>
		public Wallet Wallet { get; set; }
	}
	
	/// <summary>
	/// The type that defines the fields used to update the quantity of a line item.
	/// </summary>
	public class UpdateQuantity
	{
		
		/// <summary>
		/// A unique eBay-assigned ID value that identifys a line item in a purchase order.
		/// </summary>
		public string LineItemId { get; set; }
		
		/// <summary>
		/// The number of individual items ordered in this line item, as specified by the buyer.
		/// </summary>
		public int Quantity { get; set; }
	}
	
	/// <summary>
	/// The type that defines the fields used to update the shipping option of a line item.
	/// </summary>
	public class UpdateShippingOption
	{
		
		/// <summary>
		/// A unique eBay-assigned ID value that identifies the line item in a checkout session.
		/// </summary>
		public string LineItemId { get; set; }
		
		/// <summary>
		/// A unique ID for the selected shipping option/method.
		/// </summary>
		public string ShippingOptionId { get; set; }
	}
	
	/// <summary>
	/// The type that defines the fields for payment tokens. Note: This is supported only for eBay Guest checkouts.
	/// </summary>
	public class Wallet
	{
		
		/// <summary>
		/// This token is a payment nonce. A payment method nonce is a secure, one-time-use reference to payment information. It's the key element that allows your server to communicate sensitive payment information to the payment processor server without ever touching the raw data. The nonce is generated by the payment processor. Note: This is supported only for eBay Guest checkouts.
		/// </summary>
		public string PaymentToken { get; set; }
	}
	
	public partial class Checkout_sessionClient
	{
		
		private System.Net.Http.HttpClient client;
		
		public Checkout_sessionClient(System.Net.Http.HttpClient client)
		{
			if (client == null)
				throw new ArgumentNullException("Null HttpClient.", "client");

			if (client.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "client");

			this.client = client;
		}
		
		/// <summary>
		/// (Limited Release) You must be whitelisted to use this method. This method adds a coupon to an eBay proxy guest checkout session and applies it to all the eligible items in the order. The checkoutSessionId is passed in as a URI parameter and is required. The redemption code of the coupon is in the payload and is also required. To meet security requirements for payments, the URLs for this method are: Production URL: https://apix.ebay.com/buy/order/v1 Sandbox URL: https://apix.sandbox.ebay.com/buy/order/v1 Restrictions Maximum: One coupon per order For a list of supported sites and other restrictions, see API Restrictions in the Order API overview.
		/// ApplyCoupon checkout_session/{checkoutSessionId}/apply_coupon
		/// </summary>
		/// <param name="checkoutSessionId">The eBay-assigned session ID, for a specific eBay marketplace, that is returned by the initiateCheckoutSession method. Note: When using this ID, the X-EBAY-C-MARKETPLACE-ID value and developer App ID must be the same as what was used when this checkout session was created. See Checkout session restrictions in the Buy Integration Guide.</param>
		/// <param name="requestBody">The container for the fields used to apply a coupon to a checkout session.</param>
		/// <returns>OK</returns>
		public async Task<CheckoutSessionResponse> ApplyCouponAsync(string checkoutSessionId, CouponRequest requestBody)
		{
			var requestUri = "checkout_session/"+Uri.EscapeDataString(checkoutSessionId)+"/apply_coupon";
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create();
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			var responseMessage = await client.PostAsync(requestUri, content);
			try
			{
				responseMessage.EnsureSuccessStatusCode();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<CheckoutSessionResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// (Limited Release) You must be whitelisted to use this method. This method adds a coupon to an eBay proxy guest checkout session and applies it to all the eligible items in the order. The checkoutSessionId is passed in as a URI parameter and is required. The redemption code of the coupon is in the payload and is also required. To meet security requirements for payments, the URLs for this method are: Production URL: https://apix.ebay.com/buy/order/v1 Sandbox URL: https://apix.sandbox.ebay.com/buy/order/v1 Restrictions Maximum: One coupon per order For a list of supported sites and other restrictions, see API Restrictions in the Order API overview.
		/// ApplyCoupon checkout_session/{checkoutSessionId}/apply_coupon
		/// </summary>
		/// <param name="checkoutSessionId">The eBay-assigned session ID, for a specific eBay marketplace, that is returned by the initiateCheckoutSession method. Note: When using this ID, the X-EBAY-C-MARKETPLACE-ID value and developer App ID must be the same as what was used when this checkout session was created. See Checkout session restrictions in the Buy Integration Guide.</param>
		/// <param name="requestBody">The container for the fields used to apply a coupon to a checkout session.</param>
		/// <returns>OK</returns>
		public CheckoutSessionResponse ApplyCoupon(string checkoutSessionId, CouponRequest requestBody)
		{
			var requestUri = "checkout_session/"+Uri.EscapeDataString(checkoutSessionId)+"/apply_coupon";
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create();
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			var responseMessage = this.client.PostAsync(requestUri, content).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCode();
				var stream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<CheckoutSessionResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// This method returns the details of the specified eBay member checkout session. The checkoutSessionId is passed in as a URI parameter and is required. This method has no request payload. To meet security requirements for payments, the URLs for this method are: Production URL: https://apix.ebay.com/buy/order/v1 Sandbox URL: https://apix.sandbox.ebay.com/buy/order/v1 Restrictions For a list of supported sites and other restrictions, see API Restrictions in the Order API overview.
		/// GetCheckoutSession checkout_session/{checkoutSessionId}
		/// </summary>
		/// <param name="checkoutSessionId">The eBay-assigned session ID, for a specific eBay marketplace, that is returned by the initiateCheckoutSession method. Note: When using this ID, the X-EBAY-C-MARKETPLACE-ID value and developer App ID must be the same as what was used when this checkout session was created. See Checkout session restrictions in the Buy Integration Guide.</param>
		/// <returns>OK</returns>
		public async Task<CheckoutSessionResponse> GetCheckoutSessionAsync(string checkoutSessionId)
		{
			var requestUri = "checkout_session/"+Uri.EscapeDataString(checkoutSessionId);
			var responseMessage = await client.GetAsync(requestUri);
			try
			{
				responseMessage.EnsureSuccessStatusCode();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<CheckoutSessionResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// This method returns the details of the specified eBay member checkout session. The checkoutSessionId is passed in as a URI parameter and is required. This method has no request payload. To meet security requirements for payments, the URLs for this method are: Production URL: https://apix.ebay.com/buy/order/v1 Sandbox URL: https://apix.sandbox.ebay.com/buy/order/v1 Restrictions For a list of supported sites and other restrictions, see API Restrictions in the Order API overview.
		/// GetCheckoutSession checkout_session/{checkoutSessionId}
		/// </summary>
		/// <param name="checkoutSessionId">The eBay-assigned session ID, for a specific eBay marketplace, that is returned by the initiateCheckoutSession method. Note: When using this ID, the X-EBAY-C-MARKETPLACE-ID value and developer App ID must be the same as what was used when this checkout session was created. See Checkout session restrictions in the Buy Integration Guide.</param>
		/// <returns>OK</returns>
		public CheckoutSessionResponse GetCheckoutSession(string checkoutSessionId)
		{
			var requestUri = "checkout_session/"+Uri.EscapeDataString(checkoutSessionId);
			var responseMessage = this.client.GetAsync(requestUri).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCode();
				var stream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<CheckoutSessionResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// This method creates a eBay member checkout session, which is the first step in performing a checkout. You use this method to create a checkout session before you can process a checkout. This method assumes (and checks for) payment using PayPal, which is linked to the buyer's eBay account. You can use the updatePaymentInfo method to pay by a credit card. If the address submitted cannot be validated, a warning message will be returned. The method returns a checkoutSessionId that you use as a URI parameter in subsequent checkout methods. To meet security requirements for payments, the URLs for this method are: Production URL: https://apix.ebay.com/buy/order/v1 Sandbox URL: https://apix.sandbox.ebay.com/buy/order/v1 Also see Negative Testing Using Stubs for information on how to emulate error conditions for this method using stubs. Tip: To test the entire checkout flow, you might need a &quot;test&quot; credit card. You can generate a credit card number from http://www.getcreditcardnumbers.com. Restrictions For a list of supported sites and other restrictions, see API Restrictions in the Order API overview.
		/// InitiateCheckoutSession checkout_session/initiate
		/// </summary>
		/// <param name="requestBody">The container for the fields used by the initiateCheckoutSession method.</param>
		/// <returns>OK</returns>
		public async Task<CheckoutSessionResponse> InitiateCheckoutSessionAsync(CreateSignInCheckoutSessionRequest requestBody)
		{
			var requestUri = "checkout_session/initiate";
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create();
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			var responseMessage = await client.PostAsync(requestUri, content);
			try
			{
				responseMessage.EnsureSuccessStatusCode();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<CheckoutSessionResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// This method creates a eBay member checkout session, which is the first step in performing a checkout. You use this method to create a checkout session before you can process a checkout. This method assumes (and checks for) payment using PayPal, which is linked to the buyer's eBay account. You can use the updatePaymentInfo method to pay by a credit card. If the address submitted cannot be validated, a warning message will be returned. The method returns a checkoutSessionId that you use as a URI parameter in subsequent checkout methods. To meet security requirements for payments, the URLs for this method are: Production URL: https://apix.ebay.com/buy/order/v1 Sandbox URL: https://apix.sandbox.ebay.com/buy/order/v1 Also see Negative Testing Using Stubs for information on how to emulate error conditions for this method using stubs. Tip: To test the entire checkout flow, you might need a &quot;test&quot; credit card. You can generate a credit card number from http://www.getcreditcardnumbers.com. Restrictions For a list of supported sites and other restrictions, see API Restrictions in the Order API overview.
		/// InitiateCheckoutSession checkout_session/initiate
		/// </summary>
		/// <param name="requestBody">The container for the fields used by the initiateCheckoutSession method.</param>
		/// <returns>OK</returns>
		public CheckoutSessionResponse InitiateCheckoutSession(CreateSignInCheckoutSessionRequest requestBody)
		{
			var requestUri = "checkout_session/initiate";
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create();
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			var responseMessage = this.client.PostAsync(requestUri, content).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCode();
				var stream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<CheckoutSessionResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// This method creates the purchase order, pays for the items, and terminates the specified eBay member checkout session. The checkoutSessionId is passed in as a URI parameter and is required. Although there is not a request payload, for this method you must pass in { } in the request body. To meet security requirements for payments, the URLs for this method are: Production URL: https://apix.ebay.com/buy/order/v1 Sandbox URL: https://apix.sandbox.ebay.com/buy/order/v1 Also see Negative Testing Using Stubs for information on how to emulate error conditions for this method using stubs. Restrictions For a list of supported sites and other restrictions, see API Restrictions in the Order API overview. Note: If the credit card is declined, the checkout session is unusable. You will need to create a new checkout session for the order using the initiateCheckoutSession method.
		/// PlaceOrder checkout_session/{checkoutSessionId}/place_order
		/// </summary>
		/// <param name="checkoutSessionId">The eBay-assigned session ID, for a specific eBay marketplace, that is returned by the initiateCheckoutSession method. Note: When using this ID, the X-EBAY-C-MARKETPLACE-ID value and developer App ID must be the same as what was used when this checkout session was created.</param>
		/// <returns>OK</returns>
		public async Task<PurchaseOrderSummary> PlaceOrderAsync(string checkoutSessionId)
		{
			var requestUri = "checkout_session/"+Uri.EscapeDataString(checkoutSessionId)+"/place_order";
			var responseMessage = await client.PostAsync(requestUri, new StringContent(String.Empty));
			try
			{
				responseMessage.EnsureSuccessStatusCode();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<PurchaseOrderSummary>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// This method creates the purchase order, pays for the items, and terminates the specified eBay member checkout session. The checkoutSessionId is passed in as a URI parameter and is required. Although there is not a request payload, for this method you must pass in { } in the request body. To meet security requirements for payments, the URLs for this method are: Production URL: https://apix.ebay.com/buy/order/v1 Sandbox URL: https://apix.sandbox.ebay.com/buy/order/v1 Also see Negative Testing Using Stubs for information on how to emulate error conditions for this method using stubs. Restrictions For a list of supported sites and other restrictions, see API Restrictions in the Order API overview. Note: If the credit card is declined, the checkout session is unusable. You will need to create a new checkout session for the order using the initiateCheckoutSession method.
		/// PlaceOrder checkout_session/{checkoutSessionId}/place_order
		/// </summary>
		/// <param name="checkoutSessionId">The eBay-assigned session ID, for a specific eBay marketplace, that is returned by the initiateCheckoutSession method. Note: When using this ID, the X-EBAY-C-MARKETPLACE-ID value and developer App ID must be the same as what was used when this checkout session was created.</param>
		/// <returns>OK</returns>
		public PurchaseOrderSummary PlaceOrder(string checkoutSessionId)
		{
			var requestUri = "checkout_session/"+Uri.EscapeDataString(checkoutSessionId)+"/place_order";
			var responseMessage = this.client.PostAsync(requestUri, new StringContent(String.Empty)).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCode();
				var stream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<PurchaseOrderSummary>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// (Limited Release) You must be whitelisted to use this method. This method removes a coupon from an eBay member checkout session. The checkoutSessionId is passed in as a URI parameter and is required. The redemption code of the coupon is specified in the payload and is also required. To meet security requirements for payments, the URLs for this method are: Production URL: https://apix.ebay.com/buy/order/v1 Sandbox URL: https://apix.sandbox.ebay.com/buy/order/v1 Restrictions For a list of supported sites and other restrictions, see API Restrictions in the Order API overview.
		/// RemoveCoupon checkout_session/{checkoutSessionId}/remove_coupon
		/// </summary>
		/// <param name="checkoutSessionId">The eBay-assigned session ID, for a specific eBay marketplace, that is returned by the initiateCheckoutSession method. Note: When using this ID, the X-EBAY-C-MARKETPLACE-ID value and developer App ID must be the same as what was used when this checkout session was created. See Checkout session restrictions in the Buy Integration Guide.</param>
		/// <param name="requestBody">The container for the fields used to remove a coupon from a checkout session.</param>
		/// <returns>OK</returns>
		public async Task<CheckoutSessionResponse> RemoveCouponAsync(string checkoutSessionId, CouponRequest requestBody)
		{
			var requestUri = "checkout_session/"+Uri.EscapeDataString(checkoutSessionId)+"/remove_coupon";
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create();
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			var responseMessage = await client.PostAsync(requestUri, content);
			try
			{
				responseMessage.EnsureSuccessStatusCode();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<CheckoutSessionResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// (Limited Release) You must be whitelisted to use this method. This method removes a coupon from an eBay member checkout session. The checkoutSessionId is passed in as a URI parameter and is required. The redemption code of the coupon is specified in the payload and is also required. To meet security requirements for payments, the URLs for this method are: Production URL: https://apix.ebay.com/buy/order/v1 Sandbox URL: https://apix.sandbox.ebay.com/buy/order/v1 Restrictions For a list of supported sites and other restrictions, see API Restrictions in the Order API overview.
		/// RemoveCoupon checkout_session/{checkoutSessionId}/remove_coupon
		/// </summary>
		/// <param name="checkoutSessionId">The eBay-assigned session ID, for a specific eBay marketplace, that is returned by the initiateCheckoutSession method. Note: When using this ID, the X-EBAY-C-MARKETPLACE-ID value and developer App ID must be the same as what was used when this checkout session was created. See Checkout session restrictions in the Buy Integration Guide.</param>
		/// <param name="requestBody">The container for the fields used to remove a coupon from a checkout session.</param>
		/// <returns>OK</returns>
		public CheckoutSessionResponse RemoveCoupon(string checkoutSessionId, CouponRequest requestBody)
		{
			var requestUri = "checkout_session/"+Uri.EscapeDataString(checkoutSessionId)+"/remove_coupon";
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create();
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			var responseMessage = this.client.PostAsync(requestUri, content).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCode();
				var stream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<CheckoutSessionResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// This method changes the payment method information of the specified eBay member checkout session. To meet security requirements for payments, the URLs for this method are: Production URL: https://apix.ebay.com/buy/order/v1 Sandbox URL: https://apix.sandbox.ebay.com/buy/order/v1 Restrictions For a list of supported sites and other restrictions, see API Restrictions in the Order API overview.
		/// UpdatePaymentInfo checkout_session/{checkoutSessionId}/update_payment_info
		/// </summary>
		/// <param name="checkoutSessionId">The eBay-assigned session ID, for a specific eBay marketplace, that is returned by the initiateCheckoutSession method. Note: When using this ID, the X-EBAY-C-MARKETPLACE-ID value and developer App ID must be the same as what was used when this checkout session was created. See Checkout session restrictions in the Buy Integration Guide.</param>
		/// <param name="requestBody">The container for the fields used by the updatePaymentInfo method.</param>
		/// <returns>OK</returns>
		public async Task<CheckoutSessionResponse> UpdatePaymentInfoAsync(string checkoutSessionId, UpdatePaymentInformation requestBody)
		{
			var requestUri = "checkout_session/"+Uri.EscapeDataString(checkoutSessionId)+"/update_payment_info";
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create();
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			var responseMessage = await client.PostAsync(requestUri, content);
			try
			{
				responseMessage.EnsureSuccessStatusCode();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<CheckoutSessionResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// This method changes the payment method information of the specified eBay member checkout session. To meet security requirements for payments, the URLs for this method are: Production URL: https://apix.ebay.com/buy/order/v1 Sandbox URL: https://apix.sandbox.ebay.com/buy/order/v1 Restrictions For a list of supported sites and other restrictions, see API Restrictions in the Order API overview.
		/// UpdatePaymentInfo checkout_session/{checkoutSessionId}/update_payment_info
		/// </summary>
		/// <param name="checkoutSessionId">The eBay-assigned session ID, for a specific eBay marketplace, that is returned by the initiateCheckoutSession method. Note: When using this ID, the X-EBAY-C-MARKETPLACE-ID value and developer App ID must be the same as what was used when this checkout session was created. See Checkout session restrictions in the Buy Integration Guide.</param>
		/// <param name="requestBody">The container for the fields used by the updatePaymentInfo method.</param>
		/// <returns>OK</returns>
		public CheckoutSessionResponse UpdatePaymentInfo(string checkoutSessionId, UpdatePaymentInformation requestBody)
		{
			var requestUri = "checkout_session/"+Uri.EscapeDataString(checkoutSessionId)+"/update_payment_info";
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create();
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			var responseMessage = this.client.PostAsync(requestUri, content).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCode();
				var stream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<CheckoutSessionResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// This method changes the quantity of the specified line item in an eBay member checkout session. To meet security requirements for payments, the URLs for this method are: Production URL: https://apix.ebay.com/buy/order/v1 Sandbox URL: https://apix.sandbox.ebay.com/buy/order/v1 Restrictions For a list of supported sites and other restrictions, see API Restrictions in the Order API overview.
		/// UpdateQuantity checkout_session/{checkoutSessionId}/update_quantity
		/// </summary>
		/// <param name="checkoutSessionId">The eBay-assigned session ID, for a specific eBay marketplace, that is returned by the initiateCheckoutSession method. Note: When using this ID, the X-EBAY-C-MARKETPLACE-ID value and developer App ID must be the same as what was used when this checkout session was created. See Checkout session restrictions in the Buy Integration Guide.</param>
		/// <param name="requestBody">The container for the fields used by the updateQuantity method.</param>
		/// <returns>OK</returns>
		public async Task<CheckoutSessionResponse> UpdateQuantityAsync(string checkoutSessionId, UpdateQuantity requestBody)
		{
			var requestUri = "checkout_session/"+Uri.EscapeDataString(checkoutSessionId)+"/update_quantity";
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create();
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			var responseMessage = await client.PostAsync(requestUri, content);
			try
			{
				responseMessage.EnsureSuccessStatusCode();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<CheckoutSessionResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// This method changes the quantity of the specified line item in an eBay member checkout session. To meet security requirements for payments, the URLs for this method are: Production URL: https://apix.ebay.com/buy/order/v1 Sandbox URL: https://apix.sandbox.ebay.com/buy/order/v1 Restrictions For a list of supported sites and other restrictions, see API Restrictions in the Order API overview.
		/// UpdateQuantity checkout_session/{checkoutSessionId}/update_quantity
		/// </summary>
		/// <param name="checkoutSessionId">The eBay-assigned session ID, for a specific eBay marketplace, that is returned by the initiateCheckoutSession method. Note: When using this ID, the X-EBAY-C-MARKETPLACE-ID value and developer App ID must be the same as what was used when this checkout session was created. See Checkout session restrictions in the Buy Integration Guide.</param>
		/// <param name="requestBody">The container for the fields used by the updateQuantity method.</param>
		/// <returns>OK</returns>
		public CheckoutSessionResponse UpdateQuantity(string checkoutSessionId, UpdateQuantity requestBody)
		{
			var requestUri = "checkout_session/"+Uri.EscapeDataString(checkoutSessionId)+"/update_quantity";
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create();
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			var responseMessage = this.client.PostAsync(requestUri, content).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCode();
				var stream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<CheckoutSessionResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// This method changes the shipping address for in an eBay member checkout session. All the line items in an order must be shipped to the same address, but the shipping method can be specific to the line item. Note: If the address submitted cannot be validated, a warning message will be returned. This does not prevent the method from executing, but you may want to verify the address. To meet security requirements for payments, the URLs for this method are: Production URL: https://apix.ebay.com/buy/order/v1 Sandbox URL: https://apix.sandbox.ebay.com/buy/order/v1 Restrictions For a list of supported sites and other restrictions, see API Restrictions in the Order API overview.
		/// UpdateShippingAddress checkout_session/{checkoutSessionId}/update_shipping_address
		/// </summary>
		/// <param name="checkoutSessionId">The eBay-assigned session ID, for a specific eBay marketplace, that is returned by the initiateCheckoutSession method. Note: When using this ID, the X-EBAY-C-MARKETPLACE-ID value and developer App ID must be the same as what was used when this checkout session was created. See Checkout session restrictions in the Buy Integration Guide.</param>
		/// <param name="requestBody">The container for the fields used by the updateShippingAddress method.</param>
		/// <returns>OK</returns>
		public async Task<CheckoutSessionResponse> UpdateShippingAddressAsync(string checkoutSessionId, ShippingAddressImpl requestBody)
		{
			var requestUri = "checkout_session/"+Uri.EscapeDataString(checkoutSessionId)+"/update_shipping_address";
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create();
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			var responseMessage = await client.PostAsync(requestUri, content);
			try
			{
				responseMessage.EnsureSuccessStatusCode();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<CheckoutSessionResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// This method changes the shipping address for in an eBay member checkout session. All the line items in an order must be shipped to the same address, but the shipping method can be specific to the line item. Note: If the address submitted cannot be validated, a warning message will be returned. This does not prevent the method from executing, but you may want to verify the address. To meet security requirements for payments, the URLs for this method are: Production URL: https://apix.ebay.com/buy/order/v1 Sandbox URL: https://apix.sandbox.ebay.com/buy/order/v1 Restrictions For a list of supported sites and other restrictions, see API Restrictions in the Order API overview.
		/// UpdateShippingAddress checkout_session/{checkoutSessionId}/update_shipping_address
		/// </summary>
		/// <param name="checkoutSessionId">The eBay-assigned session ID, for a specific eBay marketplace, that is returned by the initiateCheckoutSession method. Note: When using this ID, the X-EBAY-C-MARKETPLACE-ID value and developer App ID must be the same as what was used when this checkout session was created. See Checkout session restrictions in the Buy Integration Guide.</param>
		/// <param name="requestBody">The container for the fields used by the updateShippingAddress method.</param>
		/// <returns>OK</returns>
		public CheckoutSessionResponse UpdateShippingAddress(string checkoutSessionId, ShippingAddressImpl requestBody)
		{
			var requestUri = "checkout_session/"+Uri.EscapeDataString(checkoutSessionId)+"/update_shipping_address";
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create();
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			var responseMessage = this.client.PostAsync(requestUri, content).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCode();
				var stream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<CheckoutSessionResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// This method changes the shipping method for the specified line item in an eBay member checkout session. The shipping option can be set for each line item. This gives the shopper the ability choose the cost of shipping for each line item. To meet security requirements for payments, the URLs for this method are: Production URL: https://apix.ebay.com/buy/order/v1 Sandbox URL: https://apix.sandbox.ebay.com/buy/order/v1 Restrictions For a list of supported sites and other restrictions, see API Restrictions in the Order API overview.
		/// UpdateShippingOption checkout_session/{checkoutSessionId}/update_shipping_option
		/// </summary>
		/// <param name="checkoutSessionId">The eBay-assigned checkout session ID, for a specific eBay marketplace, that is returned by initiateCheckoutSession method. Note: When using this ID, the X-EBAY-C-MARKETPLACE-ID value and developer App ID must be the same as what was used when this checkout session was created. See Checkout session restrictions in the Buy Integration Guide.</param>
		/// <param name="requestBody">The container for the fields used by the updateShippingOption method.</param>
		/// <returns>OK</returns>
		public async Task<CheckoutSessionResponse> UpdateShippingOptionAsync(string checkoutSessionId, UpdateShippingOption requestBody)
		{
			var requestUri = "checkout_session/"+Uri.EscapeDataString(checkoutSessionId)+"/update_shipping_option";
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create();
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			var responseMessage = await client.PostAsync(requestUri, content);
			try
			{
				responseMessage.EnsureSuccessStatusCode();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<CheckoutSessionResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// This method changes the shipping method for the specified line item in an eBay member checkout session. The shipping option can be set for each line item. This gives the shopper the ability choose the cost of shipping for each line item. To meet security requirements for payments, the URLs for this method are: Production URL: https://apix.ebay.com/buy/order/v1 Sandbox URL: https://apix.sandbox.ebay.com/buy/order/v1 Restrictions For a list of supported sites and other restrictions, see API Restrictions in the Order API overview.
		/// UpdateShippingOption checkout_session/{checkoutSessionId}/update_shipping_option
		/// </summary>
		/// <param name="checkoutSessionId">The eBay-assigned checkout session ID, for a specific eBay marketplace, that is returned by initiateCheckoutSession method. Note: When using this ID, the X-EBAY-C-MARKETPLACE-ID value and developer App ID must be the same as what was used when this checkout session was created. See Checkout session restrictions in the Buy Integration Guide.</param>
		/// <param name="requestBody">The container for the fields used by the updateShippingOption method.</param>
		/// <returns>OK</returns>
		public CheckoutSessionResponse UpdateShippingOption(string checkoutSessionId, UpdateShippingOption requestBody)
		{
			var requestUri = "checkout_session/"+Uri.EscapeDataString(checkoutSessionId)+"/update_shipping_option";
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create();
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			var responseMessage = this.client.PostAsync(requestUri, content).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCode();
				var stream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<CheckoutSessionResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
	
	public partial class Guest_checkout_sessionClient
	{
		
		private System.Net.Http.HttpClient client;
		
		public Guest_checkout_sessionClient(System.Net.Http.HttpClient client)
		{
			if (client == null)
				throw new ArgumentNullException("Null HttpClient.", "client");

			if (client.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "client");

			this.client = client;
		}
		
		/// <summary>
		/// (Limited Release) You must be whitelisted to use this method. This method adds a coupon to an eBay guest checkout session and applies it to all the eligible items in the order. The checkoutSessionId is passed in as a URI parameter and is required. The redemption code of the coupon is in the payload and is also required. IMPORTANT: If you are using the PayPal Smart Button guest payment flow and you need to add a coupon, you must add the coupon before using the initiateGuestPayment method. To meet security requirements for payments, the URLs for this method are: Production URL: https://apix.ebay.com/buy/order/v1 Sandbox URL: https://apix.sandbox.ebay.com/buy/order/v1 Restrictions For a list of supported sites and other restrictions, see API Restrictions in the Order API overview.
		/// ApplyGuestCoupon guest_checkout_session/{checkoutSessionId}/apply_coupon
		/// </summary>
		/// <param name="checkoutSessionId">The eBay-assigned session ID, for a specific eBay marketplace, that is returned by the initiateCheckoutSession method. Note: When using this ID, the X-EBAY-C-MARKETPLACE-ID value and developer App ID must be the same as what was used when this checkout session was created. See Checkout session restrictions in the Buy Integration Guide.</param>
		/// <param name="requestBody">The container for the fields used to apply a coupon to a checkout session.</param>
		/// <returns>OK</returns>
		public async Task<CheckoutSessionResponse> ApplyGuestCouponAsync(string checkoutSessionId, CouponRequest requestBody)
		{
			var requestUri = "guest_checkout_session/"+Uri.EscapeDataString(checkoutSessionId)+"/apply_coupon";
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create();
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			var responseMessage = await client.PostAsync(requestUri, content);
			try
			{
				responseMessage.EnsureSuccessStatusCode();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<CheckoutSessionResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// (Limited Release) You must be whitelisted to use this method. This method adds a coupon to an eBay guest checkout session and applies it to all the eligible items in the order. The checkoutSessionId is passed in as a URI parameter and is required. The redemption code of the coupon is in the payload and is also required. IMPORTANT: If you are using the PayPal Smart Button guest payment flow and you need to add a coupon, you must add the coupon before using the initiateGuestPayment method. To meet security requirements for payments, the URLs for this method are: Production URL: https://apix.ebay.com/buy/order/v1 Sandbox URL: https://apix.sandbox.ebay.com/buy/order/v1 Restrictions For a list of supported sites and other restrictions, see API Restrictions in the Order API overview.
		/// ApplyGuestCoupon guest_checkout_session/{checkoutSessionId}/apply_coupon
		/// </summary>
		/// <param name="checkoutSessionId">The eBay-assigned session ID, for a specific eBay marketplace, that is returned by the initiateCheckoutSession method. Note: When using this ID, the X-EBAY-C-MARKETPLACE-ID value and developer App ID must be the same as what was used when this checkout session was created. See Checkout session restrictions in the Buy Integration Guide.</param>
		/// <param name="requestBody">The container for the fields used to apply a coupon to a checkout session.</param>
		/// <returns>OK</returns>
		public CheckoutSessionResponse ApplyGuestCoupon(string checkoutSessionId, CouponRequest requestBody)
		{
			var requestUri = "guest_checkout_session/"+Uri.EscapeDataString(checkoutSessionId)+"/apply_coupon";
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create();
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			var responseMessage = this.client.PostAsync(requestUri, content).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCode();
				var stream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<CheckoutSessionResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// This method returns the details of the specified guest checkout session. The checkoutSessionId is passed in as a URI parameter and is required. This method has no request payload. To meet security requirements for payments, the URLs for this method are: Production URL: https://apix.ebay.com/buy/order/v1 Sandbox URL: https://apix.sandbox.ebay.com/buy/order/v1 Restrictions For a list of supported sites and other restrictions, see API Restrictions in the Order API overview.
		/// GetGuestCheckoutSession guest_checkout_session/{checkoutSessionId}
		/// </summary>
		/// <param name="checkoutSessionId">The eBay-assigned session ID, for a specific eBay marketplace, that is returned by the initiateGuestCheckoutSession method. Note: When using this ID, the X-EBAY-C-MARKETPLACE-ID value and developer App ID must be the same as what was used when this checkout session was created. See Checkout session restrictions in the Buy Integration Guide.</param>
		/// <returns>OK</returns>
		public async Task<GuestCheckoutSessionResponse> GetGuestCheckoutSessionAsync(string checkoutSessionId)
		{
			var requestUri = "guest_checkout_session/"+Uri.EscapeDataString(checkoutSessionId);
			var responseMessage = await client.GetAsync(requestUri);
			try
			{
				responseMessage.EnsureSuccessStatusCode();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<GuestCheckoutSessionResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// This method returns the details of the specified guest checkout session. The checkoutSessionId is passed in as a URI parameter and is required. This method has no request payload. To meet security requirements for payments, the URLs for this method are: Production URL: https://apix.ebay.com/buy/order/v1 Sandbox URL: https://apix.sandbox.ebay.com/buy/order/v1 Restrictions For a list of supported sites and other restrictions, see API Restrictions in the Order API overview.
		/// GetGuestCheckoutSession guest_checkout_session/{checkoutSessionId}
		/// </summary>
		/// <param name="checkoutSessionId">The eBay-assigned session ID, for a specific eBay marketplace, that is returned by the initiateGuestCheckoutSession method. Note: When using this ID, the X-EBAY-C-MARKETPLACE-ID value and developer App ID must be the same as what was used when this checkout session was created. See Checkout session restrictions in the Buy Integration Guide.</param>
		/// <returns>OK</returns>
		public GuestCheckoutSessionResponse GetGuestCheckoutSession(string checkoutSessionId)
		{
			var requestUri = "guest_checkout_session/"+Uri.EscapeDataString(checkoutSessionId);
			var responseMessage = this.client.GetAsync(requestUri).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCode();
				var stream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<GuestCheckoutSessionResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// This method creates an eBay guest checkout session, which is the first step in performing a checkout. The method returns a checkoutSessionId that you use as a URI parameter in subsequent checkout methods. To meet security requirements for payments, the URLs for this method are: Production URL: https://apix.ebay.com/buy/order/v1 Sandbox URL: https://apix.sandbox.ebay.com/buy/order/v1 Also see Negative Testing Using Stubs for information on how to emulate error conditions for this method using stubs. TIP: To test the entire checkout flow, you might need a &quot;test&quot; credit card. You can generate a credit card number from http://www.getcreditcardnumbers.com. Restrictions For a list of supported sites and other restrictions, see API Restrictions in the Order API overview.
		/// InitiateGuestCheckoutSession guest_checkout_session/initiate
		/// </summary>
		/// <param name="requestBody">The container for the fields used by the initiateGuestCheckoutSession method.</param>
		/// <returns>OK</returns>
		public async Task<GuestCheckoutSessionResponse> InitiateGuestCheckoutSessionAsync(CreateGuestCheckoutSessionRequest requestBody)
		{
			var requestUri = "guest_checkout_session/initiate";
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create();
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			var responseMessage = await client.PostAsync(requestUri, content);
			try
			{
				responseMessage.EnsureSuccessStatusCode();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<GuestCheckoutSessionResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// This method creates an eBay guest checkout session, which is the first step in performing a checkout. The method returns a checkoutSessionId that you use as a URI parameter in subsequent checkout methods. To meet security requirements for payments, the URLs for this method are: Production URL: https://apix.ebay.com/buy/order/v1 Sandbox URL: https://apix.sandbox.ebay.com/buy/order/v1 Also see Negative Testing Using Stubs for information on how to emulate error conditions for this method using stubs. TIP: To test the entire checkout flow, you might need a &quot;test&quot; credit card. You can generate a credit card number from http://www.getcreditcardnumbers.com. Restrictions For a list of supported sites and other restrictions, see API Restrictions in the Order API overview.
		/// InitiateGuestCheckoutSession guest_checkout_session/initiate
		/// </summary>
		/// <param name="requestBody">The container for the fields used by the initiateGuestCheckoutSession method.</param>
		/// <returns>OK</returns>
		public GuestCheckoutSessionResponse InitiateGuestCheckoutSession(CreateGuestCheckoutSessionRequest requestBody)
		{
			var requestUri = "guest_checkout_session/initiate";
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create();
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			var responseMessage = this.client.PostAsync(requestUri, content).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCode();
				var stream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<GuestCheckoutSessionResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// This method is used only in the PayPal Smart Button guest payment flow. It sets the payment to the PayPal Checkout, which enables eBay guests to pay for their items with or without having a PayPal account without leaving your App or site. You can use this payment flow whether you are PCI compliant or not. To pay for items, buyers can either: Sign into their PayPal account and use any payment method associated with that account. Without a PayPal account, they can pay using a credit card or a direct debit from their bank account. For details about this flow, see PayPal Smart Button guest payment flow. Requirement: To use this method you must integrate with PayPal's checkout.js on the client side. API URLs To meet security requirements for payments, the URLs for this method are: Production URL: https://apix.ebay.com/buy/order/v1 Sandbox URL: https://apix.sandbox.ebay.com/buy/order/v1 Restrictions If you want to apply or remove a coupon, you must do that before using this method. For a list of supported sites and other restrictions, see API Restrictions in the Order API overview.
		/// InitiateGuestPayment guest_checkout_session/{checkoutSessionId}/initiate_payment
		/// </summary>
		/// <param name="checkoutSessionId">The eBay-assigned session ID, for a specific eBay marketplace, that is returned by the initiateGuestCheckoutSession method. Note: When using this ID, the X-EBAY-C-MARKETPLACE-ID value and developer App ID must be the same as what was used when this checkout session was created. See Checkout session restrictions in the Buy Integration Guide.</param>
		/// <param name="requestBody">The container for the fields used by the initiateGuestPayment method.</param>
		/// <returns>OK</returns>
		public async Task<GuestCheckoutSessionResponse> InitiateGuestPaymentAsync(string checkoutSessionId, InitiatePaymentRequest requestBody)
		{
			var requestUri = "guest_checkout_session/"+Uri.EscapeDataString(checkoutSessionId)+"/initiate_payment";
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create();
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			var responseMessage = await client.PostAsync(requestUri, content);
			try
			{
				responseMessage.EnsureSuccessStatusCode();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<GuestCheckoutSessionResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// This method is used only in the PayPal Smart Button guest payment flow. It sets the payment to the PayPal Checkout, which enables eBay guests to pay for their items with or without having a PayPal account without leaving your App or site. You can use this payment flow whether you are PCI compliant or not. To pay for items, buyers can either: Sign into their PayPal account and use any payment method associated with that account. Without a PayPal account, they can pay using a credit card or a direct debit from their bank account. For details about this flow, see PayPal Smart Button guest payment flow. Requirement: To use this method you must integrate with PayPal's checkout.js on the client side. API URLs To meet security requirements for payments, the URLs for this method are: Production URL: https://apix.ebay.com/buy/order/v1 Sandbox URL: https://apix.sandbox.ebay.com/buy/order/v1 Restrictions If you want to apply or remove a coupon, you must do that before using this method. For a list of supported sites and other restrictions, see API Restrictions in the Order API overview.
		/// InitiateGuestPayment guest_checkout_session/{checkoutSessionId}/initiate_payment
		/// </summary>
		/// <param name="checkoutSessionId">The eBay-assigned session ID, for a specific eBay marketplace, that is returned by the initiateGuestCheckoutSession method. Note: When using this ID, the X-EBAY-C-MARKETPLACE-ID value and developer App ID must be the same as what was used when this checkout session was created. See Checkout session restrictions in the Buy Integration Guide.</param>
		/// <param name="requestBody">The container for the fields used by the initiateGuestPayment method.</param>
		/// <returns>OK</returns>
		public GuestCheckoutSessionResponse InitiateGuestPayment(string checkoutSessionId, InitiatePaymentRequest requestBody)
		{
			var requestUri = "guest_checkout_session/"+Uri.EscapeDataString(checkoutSessionId)+"/initiate_payment";
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create();
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			var responseMessage = this.client.PostAsync(requestUri, content).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCode();
				var stream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<GuestCheckoutSessionResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// This method creates the purchase order, pays for the items, and terminates the specified guest checkout session. The checkoutSessionId is passed in as a URI parameter and is required. To meet security requirements for payments, the URLs for this method are: Production URL: https://apix.ebay.com/buy/order/v1 Sandbox URL: https://apix.sandbox.ebay.com/buy/order/v1 Also see Negative Testing Using Stubs for information on how to emulate error conditions for this method using stubs. Request headers This method requires specific request headers. For details see, HTTP request headers section. Restrictions For a list of supported sites and other restrictions, see API Restrictions in the Order API overview. Note: If the credit card is declined, the checkout session is unusable. You will need to create a new checkout session for the order using the initiateGuestCheckoutSession method.
		/// PlaceGuestOrder guest_checkout_session/{checkoutSessionId}/place_order
		/// </summary>
		/// <param name="checkoutSessionId">The eBay-assigned session ID, for a specific, eBay marketplace that is returned by the initiateGuestCheckoutSession method. Note: When using this ID, the X-EBAY-C-MARKETPLACE-ID value and developer App ID must be the same as what was used when this checkout session was created. See Checkout session restrictions in the Buy Integration Guide.</param>
		/// <param name="requestBody">The container for the fields used by the placeGuestOrder method.</param>
		/// <returns>OK</returns>
		public async Task<PurchaseOrderSummary> PlaceGuestOrderAsync(string checkoutSessionId, GuestPlaceOrderRequest requestBody)
		{
			var requestUri = "guest_checkout_session/"+Uri.EscapeDataString(checkoutSessionId)+"/place_order";
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create();
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			var responseMessage = await client.PostAsync(requestUri, content);
			try
			{
				responseMessage.EnsureSuccessStatusCode();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<PurchaseOrderSummary>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// This method creates the purchase order, pays for the items, and terminates the specified guest checkout session. The checkoutSessionId is passed in as a URI parameter and is required. To meet security requirements for payments, the URLs for this method are: Production URL: https://apix.ebay.com/buy/order/v1 Sandbox URL: https://apix.sandbox.ebay.com/buy/order/v1 Also see Negative Testing Using Stubs for information on how to emulate error conditions for this method using stubs. Request headers This method requires specific request headers. For details see, HTTP request headers section. Restrictions For a list of supported sites and other restrictions, see API Restrictions in the Order API overview. Note: If the credit card is declined, the checkout session is unusable. You will need to create a new checkout session for the order using the initiateGuestCheckoutSession method.
		/// PlaceGuestOrder guest_checkout_session/{checkoutSessionId}/place_order
		/// </summary>
		/// <param name="checkoutSessionId">The eBay-assigned session ID, for a specific, eBay marketplace that is returned by the initiateGuestCheckoutSession method. Note: When using this ID, the X-EBAY-C-MARKETPLACE-ID value and developer App ID must be the same as what was used when this checkout session was created. See Checkout session restrictions in the Buy Integration Guide.</param>
		/// <param name="requestBody">The container for the fields used by the placeGuestOrder method.</param>
		/// <returns>OK</returns>
		public PurchaseOrderSummary PlaceGuestOrder(string checkoutSessionId, GuestPlaceOrderRequest requestBody)
		{
			var requestUri = "guest_checkout_session/"+Uri.EscapeDataString(checkoutSessionId)+"/place_order";
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create();
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			var responseMessage = this.client.PostAsync(requestUri, content).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCode();
				var stream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<PurchaseOrderSummary>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// (Limited Release) You must be whitelisted to use this method. This method removes a coupon from an eBay guest checkout session. The checkoutSessionId is passed in as a URI parameter and is required. The redemption code of the coupon is specified in the payload and is also required. IMPORTANT: If you are using the PayPal Smart Button guest payment flow and you need to remove the coupon, you must remove the coupon before using the initiateGuestPayment method. To meet security requirements for payments, the URLs for this method are: Production URL: https://apix.ebay.com/buy/order/v1 Sandbox URL: https://apix.sandbox.ebay.com/buy/order/v1 Restrictions For a list of supported sites and other restrictions, see API Restrictions in the Order API overview.
		/// RemoveGuestCoupon guest_checkout_session/{checkoutSessionId}/remove_coupon
		/// </summary>
		/// <param name="checkoutSessionId">The eBay-assigned session ID, for a specific eBay marketplace, that is returned by the initiateGuestCheckoutSession method. Note: When using this ID, the X-EBAY-C-MARKETPLACE-ID value and developer App ID must be the same as what was used when this checkout session was created. See Checkout session restrictions in the Buy Integration Guide.</param>
		/// <param name="requestBody">The container for the fields used to remove a coupon from a checkout session.</param>
		/// <returns>OK</returns>
		public async Task<CheckoutSessionResponse> RemoveGuestCouponAsync(string checkoutSessionId, CouponRequest requestBody)
		{
			var requestUri = "guest_checkout_session/"+Uri.EscapeDataString(checkoutSessionId)+"/remove_coupon";
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create();
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			var responseMessage = await client.PostAsync(requestUri, content);
			try
			{
				responseMessage.EnsureSuccessStatusCode();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<CheckoutSessionResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// (Limited Release) You must be whitelisted to use this method. This method removes a coupon from an eBay guest checkout session. The checkoutSessionId is passed in as a URI parameter and is required. The redemption code of the coupon is specified in the payload and is also required. IMPORTANT: If you are using the PayPal Smart Button guest payment flow and you need to remove the coupon, you must remove the coupon before using the initiateGuestPayment method. To meet security requirements for payments, the URLs for this method are: Production URL: https://apix.ebay.com/buy/order/v1 Sandbox URL: https://apix.sandbox.ebay.com/buy/order/v1 Restrictions For a list of supported sites and other restrictions, see API Restrictions in the Order API overview.
		/// RemoveGuestCoupon guest_checkout_session/{checkoutSessionId}/remove_coupon
		/// </summary>
		/// <param name="checkoutSessionId">The eBay-assigned session ID, for a specific eBay marketplace, that is returned by the initiateGuestCheckoutSession method. Note: When using this ID, the X-EBAY-C-MARKETPLACE-ID value and developer App ID must be the same as what was used when this checkout session was created. See Checkout session restrictions in the Buy Integration Guide.</param>
		/// <param name="requestBody">The container for the fields used to remove a coupon from a checkout session.</param>
		/// <returns>OK</returns>
		public CheckoutSessionResponse RemoveGuestCoupon(string checkoutSessionId, CouponRequest requestBody)
		{
			var requestUri = "guest_checkout_session/"+Uri.EscapeDataString(checkoutSessionId)+"/remove_coupon";
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create();
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			var responseMessage = this.client.PostAsync(requestUri, content).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCode();
				var stream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<CheckoutSessionResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// This method changes the payment method information of the specified guest checkout session. To meet security requirements for payments, the URLs for this method are: Production URL: https://apix.ebay.com/buy/order/v1 Sandbox URL: https://apix.sandbox.ebay.com/buy/order/v1 Restrictions For a list of supported sites and other restrictions, see API Restrictions in the Order API overview.
		/// UpdateGuestPaymentInfo guest_checkout_session/{checkoutSessionId}/update_payment_info
		/// </summary>
		/// <param name="checkoutSessionId">The eBay-assigned session ID, for a specific eBay marketplace, that is returned by the initiateGuestCheckoutSession method. Note: When using this ID, the X-EBAY-C-MARKETPLACE-ID value and developer App ID must be the same as what was used when this checkout session was created. See Checkout session restrictions in the Buy Integration Guide.</param>
		/// <param name="requestBody">The container for the fields used by the updateGuestPaymentInfo method.</param>
		/// <returns>OK</returns>
		public async Task<GuestCheckoutSessionResponse> UpdateGuestPaymentInfoAsync(string checkoutSessionId, UpdatePaymentInformation requestBody)
		{
			var requestUri = "guest_checkout_session/"+Uri.EscapeDataString(checkoutSessionId)+"/update_payment_info";
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create();
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			var responseMessage = await client.PostAsync(requestUri, content);
			try
			{
				responseMessage.EnsureSuccessStatusCode();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<GuestCheckoutSessionResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// This method changes the payment method information of the specified guest checkout session. To meet security requirements for payments, the URLs for this method are: Production URL: https://apix.ebay.com/buy/order/v1 Sandbox URL: https://apix.sandbox.ebay.com/buy/order/v1 Restrictions For a list of supported sites and other restrictions, see API Restrictions in the Order API overview.
		/// UpdateGuestPaymentInfo guest_checkout_session/{checkoutSessionId}/update_payment_info
		/// </summary>
		/// <param name="checkoutSessionId">The eBay-assigned session ID, for a specific eBay marketplace, that is returned by the initiateGuestCheckoutSession method. Note: When using this ID, the X-EBAY-C-MARKETPLACE-ID value and developer App ID must be the same as what was used when this checkout session was created. See Checkout session restrictions in the Buy Integration Guide.</param>
		/// <param name="requestBody">The container for the fields used by the updateGuestPaymentInfo method.</param>
		/// <returns>OK</returns>
		public GuestCheckoutSessionResponse UpdateGuestPaymentInfo(string checkoutSessionId, UpdatePaymentInformation requestBody)
		{
			var requestUri = "guest_checkout_session/"+Uri.EscapeDataString(checkoutSessionId)+"/update_payment_info";
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create();
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			var responseMessage = this.client.PostAsync(requestUri, content).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCode();
				var stream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<GuestCheckoutSessionResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// This method changes the quantity of the specified line item in an eBay guest checkout session. To meet security requirements for payments, the URLs for this method are: Production URL: https://apix.ebay.com/buy/order/v1 Sandbox URL: https://apix.sandbox.ebay.com/buy/order/v1 Restrictions For a list of supported sites and other restrictions, see API Restrictions in the Order API overview.
		/// UpdateGuestQuantity guest_checkout_session/{checkoutSessionId}/update_quantity
		/// </summary>
		/// <param name="checkoutSessionId">The eBay-assigned session ID, for a specific eBay marketplace, that is returned by the initiateGuestCheckoutSession method. Note: When using this ID, the X-EBAY-C-MARKETPLACE-ID value and developer App ID must be the same as what was used when this checkout session was created. See Checkout session restrictions in the Buy Integration Guide.</param>
		/// <param name="requestBody">The container for the fields used by the updateGuestQuantity method.</param>
		/// <returns>OK</returns>
		public async Task<GuestCheckoutSessionResponse> UpdateGuestQuantityAsync(string checkoutSessionId, UpdateQuantity requestBody)
		{
			var requestUri = "guest_checkout_session/"+Uri.EscapeDataString(checkoutSessionId)+"/update_quantity";
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create();
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			var responseMessage = await client.PostAsync(requestUri, content);
			try
			{
				responseMessage.EnsureSuccessStatusCode();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<GuestCheckoutSessionResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// This method changes the quantity of the specified line item in an eBay guest checkout session. To meet security requirements for payments, the URLs for this method are: Production URL: https://apix.ebay.com/buy/order/v1 Sandbox URL: https://apix.sandbox.ebay.com/buy/order/v1 Restrictions For a list of supported sites and other restrictions, see API Restrictions in the Order API overview.
		/// UpdateGuestQuantity guest_checkout_session/{checkoutSessionId}/update_quantity
		/// </summary>
		/// <param name="checkoutSessionId">The eBay-assigned session ID, for a specific eBay marketplace, that is returned by the initiateGuestCheckoutSession method. Note: When using this ID, the X-EBAY-C-MARKETPLACE-ID value and developer App ID must be the same as what was used when this checkout session was created. See Checkout session restrictions in the Buy Integration Guide.</param>
		/// <param name="requestBody">The container for the fields used by the updateGuestQuantity method.</param>
		/// <returns>OK</returns>
		public GuestCheckoutSessionResponse UpdateGuestQuantity(string checkoutSessionId, UpdateQuantity requestBody)
		{
			var requestUri = "guest_checkout_session/"+Uri.EscapeDataString(checkoutSessionId)+"/update_quantity";
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create();
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			var responseMessage = this.client.PostAsync(requestUri, content).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCode();
				var stream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<GuestCheckoutSessionResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// This method changes the shipping address for the order in an eBay guest checkout session. All the line items in an order must be shipped to the same address, but the shipping method can be specific to the line item. Note: If the address submitted cannot be validated, a warning message will be returned. This does not prevent the method from executing, but you may want to verify the address. To meet security requirements for payments, the URLs for this method are: Production URL: https://apix.ebay.com/buy/order/v1 Sandbox URL: https://apix.sandbox.ebay.com/buy/order/v1 Restrictions For a list of supported sites and other restrictions, see API Restrictions in the Order API overview.
		/// UpdateGuestShippingAddress guest_checkout_session/{checkoutSessionId}/update_shipping_address
		/// </summary>
		/// <param name="checkoutSessionId">The eBay-assigned session ID, for a specific eBay marketplace, that is returned by the initiateGuestCheckoutSession method. Note: When using this ID, the X-EBAY-C-MARKETPLACE-ID value and developer App ID must be the same as what was used when this checkout session was created. See Checkout session restrictions in the Buy Integration Guide.</param>
		/// <param name="requestBody">The container for the fields used by the updateGuestShippingAddress method.</param>
		/// <returns>OK</returns>
		public async Task<GuestCheckoutSessionResponse> UpdateGuestShippingAddressAsync(string checkoutSessionId, ShippingAddressImpl requestBody)
		{
			var requestUri = "guest_checkout_session/"+Uri.EscapeDataString(checkoutSessionId)+"/update_shipping_address";
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create();
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			var responseMessage = await client.PostAsync(requestUri, content);
			try
			{
				responseMessage.EnsureSuccessStatusCode();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<GuestCheckoutSessionResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// This method changes the shipping address for the order in an eBay guest checkout session. All the line items in an order must be shipped to the same address, but the shipping method can be specific to the line item. Note: If the address submitted cannot be validated, a warning message will be returned. This does not prevent the method from executing, but you may want to verify the address. To meet security requirements for payments, the URLs for this method are: Production URL: https://apix.ebay.com/buy/order/v1 Sandbox URL: https://apix.sandbox.ebay.com/buy/order/v1 Restrictions For a list of supported sites and other restrictions, see API Restrictions in the Order API overview.
		/// UpdateGuestShippingAddress guest_checkout_session/{checkoutSessionId}/update_shipping_address
		/// </summary>
		/// <param name="checkoutSessionId">The eBay-assigned session ID, for a specific eBay marketplace, that is returned by the initiateGuestCheckoutSession method. Note: When using this ID, the X-EBAY-C-MARKETPLACE-ID value and developer App ID must be the same as what was used when this checkout session was created. See Checkout session restrictions in the Buy Integration Guide.</param>
		/// <param name="requestBody">The container for the fields used by the updateGuestShippingAddress method.</param>
		/// <returns>OK</returns>
		public GuestCheckoutSessionResponse UpdateGuestShippingAddress(string checkoutSessionId, ShippingAddressImpl requestBody)
		{
			var requestUri = "guest_checkout_session/"+Uri.EscapeDataString(checkoutSessionId)+"/update_shipping_address";
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create();
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			var responseMessage = this.client.PostAsync(requestUri, content).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCode();
				var stream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<GuestCheckoutSessionResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// This method changes the shipping method for the specified line item in an eBay guest checkout session. The shipping option can be set for each line item. This gives the shopper the ability choose the cost of shipping for each line item. To meet security requirements for payments, the URLs for this method are: Production URL: https://apix.ebay.com/buy/order/v1 Sandbox URL: https://apix.sandbox.ebay.com/buy/order/v1 Restrictions For a list of supported sites and other restrictions, see API Restrictions in the Order API overview.
		/// UpdateGuestShippingOption guest_checkout_session/{checkoutSessionId}/update_shipping_option
		/// </summary>
		/// <param name="checkoutSessionId">The eBay-assigned session ID, for a specific eBay marketplace, that is returned by the initiateGuestCheckoutSession method. Note: When using this ID, the X-EBAY-C-MARKETPLACE-ID value and developer App ID must be the same as what was used when this checkout session was created. See Checkout session restrictions in the Buy Integration Guide.</param>
		/// <param name="requestBody">The container for the fields used by the updateGuestShippingOption method.</param>
		/// <returns>OK</returns>
		public async Task<GuestCheckoutSessionResponse> UpdateGuestShippingOptionAsync(string checkoutSessionId, UpdateShippingOption requestBody)
		{
			var requestUri = "guest_checkout_session/"+Uri.EscapeDataString(checkoutSessionId)+"/update_shipping_option";
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create();
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			var responseMessage = await client.PostAsync(requestUri, content);
			try
			{
				responseMessage.EnsureSuccessStatusCode();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<GuestCheckoutSessionResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// This method changes the shipping method for the specified line item in an eBay guest checkout session. The shipping option can be set for each line item. This gives the shopper the ability choose the cost of shipping for each line item. To meet security requirements for payments, the URLs for this method are: Production URL: https://apix.ebay.com/buy/order/v1 Sandbox URL: https://apix.sandbox.ebay.com/buy/order/v1 Restrictions For a list of supported sites and other restrictions, see API Restrictions in the Order API overview.
		/// UpdateGuestShippingOption guest_checkout_session/{checkoutSessionId}/update_shipping_option
		/// </summary>
		/// <param name="checkoutSessionId">The eBay-assigned session ID, for a specific eBay marketplace, that is returned by the initiateGuestCheckoutSession method. Note: When using this ID, the X-EBAY-C-MARKETPLACE-ID value and developer App ID must be the same as what was used when this checkout session was created. See Checkout session restrictions in the Buy Integration Guide.</param>
		/// <param name="requestBody">The container for the fields used by the updateGuestShippingOption method.</param>
		/// <returns>OK</returns>
		public GuestCheckoutSessionResponse UpdateGuestShippingOption(string checkoutSessionId, UpdateShippingOption requestBody)
		{
			var requestUri = "guest_checkout_session/"+Uri.EscapeDataString(checkoutSessionId)+"/update_shipping_option";
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create();
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			var responseMessage = this.client.PostAsync(requestUri, content).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCode();
				var stream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<GuestCheckoutSessionResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
	
	public partial class Proxy_guest_checkout_sessionClient
	{
		
		private System.Net.Http.HttpClient client;
		
		public Proxy_guest_checkout_sessionClient(System.Net.Http.HttpClient client)
		{
			if (client == null)
				throw new ArgumentNullException("Null HttpClient.", "client");

			if (client.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "client");

			this.client = client;
		}
		
		/// <summary>
		/// (Limited Release) You must be whitelisted to use this method. This method adds a coupon to an eBay proxy guest checkout session and applies it to all the eligible items in the order. The checkoutSessionId is passed in as a URI parameter and is required. The redemption code of the coupon is in the payload and is also required. To meet security requirements for payments, the URLs for this method are: Production URL: https://apix.ebay.com/buy/order/v1 Sandbox URL: https://apix.sandbox.ebay.com/buy/order/v1 Note: This method is not available in the eBay API Explorer. Restrictions Maximum: One coupon per order For a list of supported sites and other restrictions, see API Restrictions in the Order API overview.
		/// ApplyProxyGuestCoupon proxy_guest_checkout_session/{checkoutSessionId}/apply_coupon
		/// </summary>
		/// <param name="checkoutSessionId">The eBay-assigned session ID, for a specific eBay marketplace, that is returned by the initiateProxyGuestCheckoutSession method. Note: When using this ID, the X-EBAY-C-MARKETPLACE-ID value and developer App ID must be the same as what was used when this checkout session was created. See Checkout session restrictions in the Buy Integration Guide.</param>
		/// <param name="requestBody">The container for the fields used to apply a coupon to a checkout session.</param>
		/// <returns>OK</returns>
		public async Task<CheckoutSessionResponse> ApplyProxyGuestCouponAsync(string checkoutSessionId, CouponRequest requestBody)
		{
			var requestUri = "proxy_guest_checkout_session/"+Uri.EscapeDataString(checkoutSessionId)+"/apply_coupon";
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create();
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			var responseMessage = await client.PostAsync(requestUri, content);
			try
			{
				responseMessage.EnsureSuccessStatusCode();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<CheckoutSessionResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// (Limited Release) You must be whitelisted to use this method. This method adds a coupon to an eBay proxy guest checkout session and applies it to all the eligible items in the order. The checkoutSessionId is passed in as a URI parameter and is required. The redemption code of the coupon is in the payload and is also required. To meet security requirements for payments, the URLs for this method are: Production URL: https://apix.ebay.com/buy/order/v1 Sandbox URL: https://apix.sandbox.ebay.com/buy/order/v1 Note: This method is not available in the eBay API Explorer. Restrictions Maximum: One coupon per order For a list of supported sites and other restrictions, see API Restrictions in the Order API overview.
		/// ApplyProxyGuestCoupon proxy_guest_checkout_session/{checkoutSessionId}/apply_coupon
		/// </summary>
		/// <param name="checkoutSessionId">The eBay-assigned session ID, for a specific eBay marketplace, that is returned by the initiateProxyGuestCheckoutSession method. Note: When using this ID, the X-EBAY-C-MARKETPLACE-ID value and developer App ID must be the same as what was used when this checkout session was created. See Checkout session restrictions in the Buy Integration Guide.</param>
		/// <param name="requestBody">The container for the fields used to apply a coupon to a checkout session.</param>
		/// <returns>OK</returns>
		public CheckoutSessionResponse ApplyProxyGuestCoupon(string checkoutSessionId, CouponRequest requestBody)
		{
			var requestUri = "proxy_guest_checkout_session/"+Uri.EscapeDataString(checkoutSessionId)+"/apply_coupon";
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create();
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			var responseMessage = this.client.PostAsync(requestUri, content).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCode();
				var stream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<CheckoutSessionResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// This method returns the details of the specified eBay proxy guest checkout session. The checkoutSessionId is passed in as a URI parameter and is required. This method has no request payload. To meet security requirements for payments, the URLs for this method are: Production URL: https://apix.ebay.com/buy/order/v1 Sandbox URL: https://apix.sandbox.ebay.com/buy/order/v1 Note: This method is not available in the eBay API Explorer. Restrictions This method is used only when the eBay partner is using a payment vault service, such as Braintree, to process payments. The Vault service eBay guest payment flow is supported only for the EBAY_US marketplace. For a list of supported sites and other restrictions, see API Restrictions in the Order API overview.
		/// GetProxyGuestCheckoutSession proxy_guest_checkout_session/{checkoutSessionId}
		/// </summary>
		/// <param name="checkoutSessionId">The eBay-assigned session ID, for a specific eBay marketplace, that is returned by the initiateProxyGuestCheckoutSession method. Note: When using this ID, the X-EBAY-C-MARKETPLACE-ID value and developer App ID must be the same as what was used when this checkout session was created. See Checkout session restrictions in the Buy Integration Guide.</param>
		/// <returns>OK</returns>
		public async Task<GuestCheckoutSessionResponse> GetProxyGuestCheckoutSessionAsync(string checkoutSessionId)
		{
			var requestUri = "proxy_guest_checkout_session/"+Uri.EscapeDataString(checkoutSessionId);
			var responseMessage = await client.GetAsync(requestUri);
			try
			{
				responseMessage.EnsureSuccessStatusCode();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<GuestCheckoutSessionResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// This method returns the details of the specified eBay proxy guest checkout session. The checkoutSessionId is passed in as a URI parameter and is required. This method has no request payload. To meet security requirements for payments, the URLs for this method are: Production URL: https://apix.ebay.com/buy/order/v1 Sandbox URL: https://apix.sandbox.ebay.com/buy/order/v1 Note: This method is not available in the eBay API Explorer. Restrictions This method is used only when the eBay partner is using a payment vault service, such as Braintree, to process payments. The Vault service eBay guest payment flow is supported only for the EBAY_US marketplace. For a list of supported sites and other restrictions, see API Restrictions in the Order API overview.
		/// GetProxyGuestCheckoutSession proxy_guest_checkout_session/{checkoutSessionId}
		/// </summary>
		/// <param name="checkoutSessionId">The eBay-assigned session ID, for a specific eBay marketplace, that is returned by the initiateProxyGuestCheckoutSession method. Note: When using this ID, the X-EBAY-C-MARKETPLACE-ID value and developer App ID must be the same as what was used when this checkout session was created. See Checkout session restrictions in the Buy Integration Guide.</param>
		/// <returns>OK</returns>
		public GuestCheckoutSessionResponse GetProxyGuestCheckoutSession(string checkoutSessionId)
		{
			var requestUri = "proxy_guest_checkout_session/"+Uri.EscapeDataString(checkoutSessionId);
			var responseMessage = this.client.GetAsync(requestUri).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCode();
				var stream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<GuestCheckoutSessionResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// This method creates an eBay proxy guest checkout session, which is a payment flow that requires integration with a VSP (vault service provider), such as Braintree. The VSP handles only the methods within this flow that contain payment information. This method returns the details of the order and a marketplace specific checkoutSessionId that you use as a URI parameter in subsequent proxy_guest_checkout_session resource checkout methods. For details about the VSP payment flow, see Vault service eBay guest payment flow. To meet security requirements for payments, the URLs for this method are: Production URL: https://apix.ebay.com/buy/order/v1 Sandbox URL: https://apix.sandbox.ebay.com/buy/order/v1 Note: This method is not available in the eBay API Explorer. Also see Negative Testing Using Stubs for information on how to emulate error conditions for this method using stubs. TIP: To test the entire checkout flow, you might need a &quot;test&quot; credit card. You can generate a credit card number from http://www.getcreditcardnumbers.com. Restrictions This method is used only when the eBay partner is using a payment vault service, such as Braintree, to process payments. The Vault service eBay guest payment flow is supported only for the EBAY_US marketplace. For a list of supported sites and other restrictions, see API Restrictions in the Order API overview.
		/// InitiateProxyGuestCheckoutSession proxy_guest_checkout_session/initiate
		/// </summary>
		/// <param name="requestBody">The container for the fields used by the initiateProxyGuestCheckoutSession method.</param>
		/// <returns>OK</returns>
		public async Task<GuestCheckoutSessionResponse> InitiateProxyGuestCheckoutSessionAsync(CheckoutSessionRequestWithoutPayment requestBody)
		{
			var requestUri = "proxy_guest_checkout_session/initiate";
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create();
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			var responseMessage = await client.PostAsync(requestUri, content);
			try
			{
				responseMessage.EnsureSuccessStatusCode();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<GuestCheckoutSessionResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// This method creates an eBay proxy guest checkout session, which is a payment flow that requires integration with a VSP (vault service provider), such as Braintree. The VSP handles only the methods within this flow that contain payment information. This method returns the details of the order and a marketplace specific checkoutSessionId that you use as a URI parameter in subsequent proxy_guest_checkout_session resource checkout methods. For details about the VSP payment flow, see Vault service eBay guest payment flow. To meet security requirements for payments, the URLs for this method are: Production URL: https://apix.ebay.com/buy/order/v1 Sandbox URL: https://apix.sandbox.ebay.com/buy/order/v1 Note: This method is not available in the eBay API Explorer. Also see Negative Testing Using Stubs for information on how to emulate error conditions for this method using stubs. TIP: To test the entire checkout flow, you might need a &quot;test&quot; credit card. You can generate a credit card number from http://www.getcreditcardnumbers.com. Restrictions This method is used only when the eBay partner is using a payment vault service, such as Braintree, to process payments. The Vault service eBay guest payment flow is supported only for the EBAY_US marketplace. For a list of supported sites and other restrictions, see API Restrictions in the Order API overview.
		/// InitiateProxyGuestCheckoutSession proxy_guest_checkout_session/initiate
		/// </summary>
		/// <param name="requestBody">The container for the fields used by the initiateProxyGuestCheckoutSession method.</param>
		/// <returns>OK</returns>
		public GuestCheckoutSessionResponse InitiateProxyGuestCheckoutSession(CheckoutSessionRequestWithoutPayment requestBody)
		{
			var requestUri = "proxy_guest_checkout_session/initiate";
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create();
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			var responseMessage = this.client.PostAsync(requestUri, content).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCode();
				var stream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<GuestCheckoutSessionResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// This method creates the proxy guest purchase order, pays for the items, and terminates the specified guest checkout session. The checkoutSessionId is passed in as a URI parameter and is required. To meet security requirements for payments, the URLs for this method are: Production URL: https://apix.ebay.com/buy/order/v1 Sandbox URL: https://apix.sandbox.ebay.com/buy/order/v1 Note: This method is not available in the eBay API Explorer. Also see Negative Testing Using Stubs for information on how to emulate error conditions for this method using stubs. Restrictions This method is used only when the eBay partner is using a payment vault service, such as Braintree, to process payments. The Vault service eBay guest payment flow is supported only for the EBAY_US marketplace. For a list of supported sites and other restrictions, see API Restrictions in the Order API overview.
		/// PlaceProxyGuestOrder proxy_guest_checkout_session/{checkoutSessionId}/place_order
		/// </summary>
		/// <param name="checkoutSessionId">The eBay-assigned session ID, for a specific eBay marketplace, that is returned by the initiateProxyGuestCheckoutSession method. Note: When using this ID, the X-EBAY-C-MARKETPLACE-ID value and developer App ID must be the same as what was used when this checkout session was created. See Checkout session restrictions in the Buy Integration Guide.</param>
		/// <param name="requestBody">The container for the fields used by the placeProxyGuestOrder method.</param>
		/// <returns>OK</returns>
		public async Task<PurchaseOrderSummary> PlaceProxyGuestOrderAsync(string checkoutSessionId, GuestPlaceOrderRequest requestBody)
		{
			var requestUri = "proxy_guest_checkout_session/"+Uri.EscapeDataString(checkoutSessionId)+"/place_order";
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create();
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			var responseMessage = await client.PostAsync(requestUri, content);
			try
			{
				responseMessage.EnsureSuccessStatusCode();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<PurchaseOrderSummary>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// This method creates the proxy guest purchase order, pays for the items, and terminates the specified guest checkout session. The checkoutSessionId is passed in as a URI parameter and is required. To meet security requirements for payments, the URLs for this method are: Production URL: https://apix.ebay.com/buy/order/v1 Sandbox URL: https://apix.sandbox.ebay.com/buy/order/v1 Note: This method is not available in the eBay API Explorer. Also see Negative Testing Using Stubs for information on how to emulate error conditions for this method using stubs. Restrictions This method is used only when the eBay partner is using a payment vault service, such as Braintree, to process payments. The Vault service eBay guest payment flow is supported only for the EBAY_US marketplace. For a list of supported sites and other restrictions, see API Restrictions in the Order API overview.
		/// PlaceProxyGuestOrder proxy_guest_checkout_session/{checkoutSessionId}/place_order
		/// </summary>
		/// <param name="checkoutSessionId">The eBay-assigned session ID, for a specific eBay marketplace, that is returned by the initiateProxyGuestCheckoutSession method. Note: When using this ID, the X-EBAY-C-MARKETPLACE-ID value and developer App ID must be the same as what was used when this checkout session was created. See Checkout session restrictions in the Buy Integration Guide.</param>
		/// <param name="requestBody">The container for the fields used by the placeProxyGuestOrder method.</param>
		/// <returns>OK</returns>
		public PurchaseOrderSummary PlaceProxyGuestOrder(string checkoutSessionId, GuestPlaceOrderRequest requestBody)
		{
			var requestUri = "proxy_guest_checkout_session/"+Uri.EscapeDataString(checkoutSessionId)+"/place_order";
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create();
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			var responseMessage = this.client.PostAsync(requestUri, content).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCode();
				var stream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<PurchaseOrderSummary>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// (Limited Release) You must be whitelisted to use this method. This method removes a coupon from an eBay proxy guest checkout session. The checkoutSessionId is passed in as a URI parameter and is required. The redemption code of the coupon is specified in the payload and is also required. To meet security requirements for payments, the URLs for this method are: Production URL: https://apix.ebay.com/buy/order/v1 Sandbox URL: https://apix.sandbox.ebay.com/buy/order/v1 Note: This method is not available in the eBay API Explorer. Restrictions For a list of supported sites and other restrictions, see API Restrictions in the Order API overview.
		/// RemoveProxyGuestCoupon proxy_guest_checkout_session/{checkoutSessionId}/remove_coupon
		/// </summary>
		/// <param name="checkoutSessionId">The eBay-assigned session ID, for a specific eBay marketplace, that is returned by the initiateProxyGuestCheckoutSession method. Note: When using this ID, the X-EBAY-C-MARKETPLACE-ID value and developer App ID must be the same as what was used when this checkout session was created. See Checkout session restrictions in the Buy Integration Guide.</param>
		/// <param name="requestBody">The container for the fields used to remove a coupon from a checkout session.</param>
		/// <returns>OK</returns>
		public async Task<CheckoutSessionResponse> RemoveProxyGuestCouponAsync(string checkoutSessionId, CouponRequest requestBody)
		{
			var requestUri = "proxy_guest_checkout_session/"+Uri.EscapeDataString(checkoutSessionId)+"/remove_coupon";
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create();
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			var responseMessage = await client.PostAsync(requestUri, content);
			try
			{
				responseMessage.EnsureSuccessStatusCode();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<CheckoutSessionResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// (Limited Release) You must be whitelisted to use this method. This method removes a coupon from an eBay proxy guest checkout session. The checkoutSessionId is passed in as a URI parameter and is required. The redemption code of the coupon is specified in the payload and is also required. To meet security requirements for payments, the URLs for this method are: Production URL: https://apix.ebay.com/buy/order/v1 Sandbox URL: https://apix.sandbox.ebay.com/buy/order/v1 Note: This method is not available in the eBay API Explorer. Restrictions For a list of supported sites and other restrictions, see API Restrictions in the Order API overview.
		/// RemoveProxyGuestCoupon proxy_guest_checkout_session/{checkoutSessionId}/remove_coupon
		/// </summary>
		/// <param name="checkoutSessionId">The eBay-assigned session ID, for a specific eBay marketplace, that is returned by the initiateProxyGuestCheckoutSession method. Note: When using this ID, the X-EBAY-C-MARKETPLACE-ID value and developer App ID must be the same as what was used when this checkout session was created. See Checkout session restrictions in the Buy Integration Guide.</param>
		/// <param name="requestBody">The container for the fields used to remove a coupon from a checkout session.</param>
		/// <returns>OK</returns>
		public CheckoutSessionResponse RemoveProxyGuestCoupon(string checkoutSessionId, CouponRequest requestBody)
		{
			var requestUri = "proxy_guest_checkout_session/"+Uri.EscapeDataString(checkoutSessionId)+"/remove_coupon";
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create();
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			var responseMessage = this.client.PostAsync(requestUri, content).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCode();
				var stream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<CheckoutSessionResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// This method adds or changes the payment information of the specified proxy guest checkout session. This endpoint is invoked by the VSP (vault service provider) on behalf of the eBay partner. For details about the VSP payment flow, see Vault service eBay guest payment flow. To meet security requirements for payments, the URLs for this method are: Production URL: https://apix.ebay.com/buy/order/v1 Sandbox URL: https://apix.sandbox.ebay.com/buy/order/v1 Note: This method is not available in the eBay API Explorer. Restrictions This method is used only when the eBay partner is using a payment vault service, such as Braintree, to process payments. The Vault service eBay guest payment flow is supported only for the EBAY_US marketplace. For a list of supported sites and other restrictions, see API Restrictions in the Order API overview.
		/// UpdateProxyGuestPaymentInfo proxy_guest_checkout_session/{checkoutSessionId}/update_payment_info
		/// </summary>
		/// <param name="checkoutSessionId">The eBay-assigned session ID, for a specific eBay marketplace, that is returned by the initiateProxyGuestCheckoutSession method. Note: When using this ID, the X-EBAY-C-MARKETPLACE-ID value and developer App ID must be the same as what was used when this checkout session was created. See Checkout session restrictions in the Buy Integration Guide.</param>
		/// <param name="requestBody">The container for the fields used by the updateProxyGuestPaymentInfo method.</param>
		/// <returns>OK</returns>
		public async Task<GuestCheckoutSessionResponse> UpdateProxyGuestPaymentInfoAsync(string checkoutSessionId, UpdatePaymentInformation requestBody)
		{
			var requestUri = "proxy_guest_checkout_session/"+Uri.EscapeDataString(checkoutSessionId)+"/update_payment_info";
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create();
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			var responseMessage = await client.PostAsync(requestUri, content);
			try
			{
				responseMessage.EnsureSuccessStatusCode();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<GuestCheckoutSessionResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// This method adds or changes the payment information of the specified proxy guest checkout session. This endpoint is invoked by the VSP (vault service provider) on behalf of the eBay partner. For details about the VSP payment flow, see Vault service eBay guest payment flow. To meet security requirements for payments, the URLs for this method are: Production URL: https://apix.ebay.com/buy/order/v1 Sandbox URL: https://apix.sandbox.ebay.com/buy/order/v1 Note: This method is not available in the eBay API Explorer. Restrictions This method is used only when the eBay partner is using a payment vault service, such as Braintree, to process payments. The Vault service eBay guest payment flow is supported only for the EBAY_US marketplace. For a list of supported sites and other restrictions, see API Restrictions in the Order API overview.
		/// UpdateProxyGuestPaymentInfo proxy_guest_checkout_session/{checkoutSessionId}/update_payment_info
		/// </summary>
		/// <param name="checkoutSessionId">The eBay-assigned session ID, for a specific eBay marketplace, that is returned by the initiateProxyGuestCheckoutSession method. Note: When using this ID, the X-EBAY-C-MARKETPLACE-ID value and developer App ID must be the same as what was used when this checkout session was created. See Checkout session restrictions in the Buy Integration Guide.</param>
		/// <param name="requestBody">The container for the fields used by the updateProxyGuestPaymentInfo method.</param>
		/// <returns>OK</returns>
		public GuestCheckoutSessionResponse UpdateProxyGuestPaymentInfo(string checkoutSessionId, UpdatePaymentInformation requestBody)
		{
			var requestUri = "proxy_guest_checkout_session/"+Uri.EscapeDataString(checkoutSessionId)+"/update_payment_info";
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create();
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			var responseMessage = this.client.PostAsync(requestUri, content).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCode();
				var stream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<GuestCheckoutSessionResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// This method changes the quantity of the specified line item in an eBay proxy guest checkout session. To meet security requirements for payments, the URLs for this method are: Production URL: https://apix.ebay.com/buy/order/v1 Sandbox URL: https://apix.sandbox.ebay.com/buy/order/v1 Note: This method is not available in the eBay API Explorer. Restrictions This method is used only when the eBay partner is using a payment vault service, such as Braintree, to process payments. The Vault service eBay guest payment flow is supported only for the EBAY_US marketplace. For a list of supported sites and other restrictions, see API Restrictions in the Order API overview.
		/// UpdateProxyGuestQuantity proxy_guest_checkout_session/{checkoutSessionId}/update_quantity
		/// </summary>
		/// <param name="checkoutSessionId">The eBay-assigned session ID, for a specific eBay marketplace, that is returned by the initiateProxyGuestCheckoutSession method. Note: When using this ID, the X-EBAY-C-MARKETPLACE-ID value and developer App ID must be the same as what was used when this checkout session was created. See Checkout session restrictions in the Buy Integration Guide.</param>
		/// <param name="requestBody">The container for the fields used by the updateProxyGuestQuantity method.</param>
		/// <returns>OK</returns>
		public async Task<GuestCheckoutSessionResponse> UpdateProxyGuestQuantityAsync(string checkoutSessionId, UpdateQuantity requestBody)
		{
			var requestUri = "proxy_guest_checkout_session/"+Uri.EscapeDataString(checkoutSessionId)+"/update_quantity";
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create();
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			var responseMessage = await client.PostAsync(requestUri, content);
			try
			{
				responseMessage.EnsureSuccessStatusCode();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<GuestCheckoutSessionResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// This method changes the quantity of the specified line item in an eBay proxy guest checkout session. To meet security requirements for payments, the URLs for this method are: Production URL: https://apix.ebay.com/buy/order/v1 Sandbox URL: https://apix.sandbox.ebay.com/buy/order/v1 Note: This method is not available in the eBay API Explorer. Restrictions This method is used only when the eBay partner is using a payment vault service, such as Braintree, to process payments. The Vault service eBay guest payment flow is supported only for the EBAY_US marketplace. For a list of supported sites and other restrictions, see API Restrictions in the Order API overview.
		/// UpdateProxyGuestQuantity proxy_guest_checkout_session/{checkoutSessionId}/update_quantity
		/// </summary>
		/// <param name="checkoutSessionId">The eBay-assigned session ID, for a specific eBay marketplace, that is returned by the initiateProxyGuestCheckoutSession method. Note: When using this ID, the X-EBAY-C-MARKETPLACE-ID value and developer App ID must be the same as what was used when this checkout session was created. See Checkout session restrictions in the Buy Integration Guide.</param>
		/// <param name="requestBody">The container for the fields used by the updateProxyGuestQuantity method.</param>
		/// <returns>OK</returns>
		public GuestCheckoutSessionResponse UpdateProxyGuestQuantity(string checkoutSessionId, UpdateQuantity requestBody)
		{
			var requestUri = "proxy_guest_checkout_session/"+Uri.EscapeDataString(checkoutSessionId)+"/update_quantity";
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create();
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			var responseMessage = this.client.PostAsync(requestUri, content).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCode();
				var stream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<GuestCheckoutSessionResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// This method changes the shipping address for the order in an eBay proxy guest checkout session. All the line items in an order must be shipped to the same address, but the shipping method can be specific to the line item. Note: If the address submitted cannot be validated, a warning message will be returned. This does not prevent the method from executing, but you may want to verify the address. To meet security requirements for payments, the URLs for this method are: Production URL: https://apix.ebay.com/buy/order/v1 Sandbox URL: https://apix.sandbox.ebay.com/buy/order/v1 Note: This method is not available in the eBay API Explorer. Restrictions This method is used only when the eBay partner is using a payment vault service, such as Braintree, to process payments. The Vault service eBay guest payment flow is supported only for the EBAY_US marketplace. For a list of supported sites and other restrictions, see API Restrictions in the Order API overview.
		/// UpdateProxyGuestShippingAddress proxy_guest_checkout_session/{checkoutSessionId}/update_shipping_address
		/// </summary>
		/// <param name="checkoutSessionId">The eBay-assigned session ID, for a specific eBay marketplace, that is returned by the initiateProxyGuestCheckoutSession method. Note: When using this ID, the X-EBAY-C-MARKETPLACE-ID value and developer App ID must be the same as what was used when this checkout session was created. See Checkout session restrictions in the Buy Integration Guide.</param>
		/// <param name="requestBody">The container for the fields used by the updateProxyGuestShippingAddress method.</param>
		/// <returns>OK</returns>
		public async Task<GuestCheckoutSessionResponse> UpdateProxyGuestShippingAddressAsync(string checkoutSessionId, ShippingAddressImpl requestBody)
		{
			var requestUri = "proxy_guest_checkout_session/"+Uri.EscapeDataString(checkoutSessionId)+"/update_shipping_address";
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create();
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			var responseMessage = await client.PostAsync(requestUri, content);
			try
			{
				responseMessage.EnsureSuccessStatusCode();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<GuestCheckoutSessionResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// This method changes the shipping address for the order in an eBay proxy guest checkout session. All the line items in an order must be shipped to the same address, but the shipping method can be specific to the line item. Note: If the address submitted cannot be validated, a warning message will be returned. This does not prevent the method from executing, but you may want to verify the address. To meet security requirements for payments, the URLs for this method are: Production URL: https://apix.ebay.com/buy/order/v1 Sandbox URL: https://apix.sandbox.ebay.com/buy/order/v1 Note: This method is not available in the eBay API Explorer. Restrictions This method is used only when the eBay partner is using a payment vault service, such as Braintree, to process payments. The Vault service eBay guest payment flow is supported only for the EBAY_US marketplace. For a list of supported sites and other restrictions, see API Restrictions in the Order API overview.
		/// UpdateProxyGuestShippingAddress proxy_guest_checkout_session/{checkoutSessionId}/update_shipping_address
		/// </summary>
		/// <param name="checkoutSessionId">The eBay-assigned session ID, for a specific eBay marketplace, that is returned by the initiateProxyGuestCheckoutSession method. Note: When using this ID, the X-EBAY-C-MARKETPLACE-ID value and developer App ID must be the same as what was used when this checkout session was created. See Checkout session restrictions in the Buy Integration Guide.</param>
		/// <param name="requestBody">The container for the fields used by the updateProxyGuestShippingAddress method.</param>
		/// <returns>OK</returns>
		public GuestCheckoutSessionResponse UpdateProxyGuestShippingAddress(string checkoutSessionId, ShippingAddressImpl requestBody)
		{
			var requestUri = "proxy_guest_checkout_session/"+Uri.EscapeDataString(checkoutSessionId)+"/update_shipping_address";
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create();
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			var responseMessage = this.client.PostAsync(requestUri, content).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCode();
				var stream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<GuestCheckoutSessionResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// This method changes the shipping method for the specified line item in an eBay proxy guest checkout session. The shipping option can be set for each line item. This gives the shopper the ability choose the cost of shipping for each line item. To meet security requirements for payments, the URLs for this method are: Production URL: https://apix.ebay.com/buy/order/v1 Sandbox URL: https://apix.sandbox.ebay.com/buy/order/v1 Note: This method is not available in the eBay API Explorer. Restrictions This method is used only when the eBay partner is using a payment vault service, such as Braintree, to process payments. The Vault service eBay guest payment flow is supported only for the EBAY_US marketplace. For a list of supported sites and other restrictions, see API Restrictions in the Order API overview.
		/// UpdateProxyGuestShippingOption proxy_guest_checkout_session/{checkoutSessionId}/update_shipping_option
		/// </summary>
		/// <param name="checkoutSessionId">The eBay-assigned session ID, for a specific eBay marketplace, that is returned by the initiateProxyGuestCheckoutSession method. Note: When using this ID, the X-EBAY-C-MARKETPLACE-ID value and developer App ID must be the same as what was used when this checkout session was created. See Checkout session restrictions in the Buy Integration Guide.</param>
		/// <param name="requestBody">The container for the fields used by the updateProxyGuestShippingOption method.</param>
		/// <returns>OK</returns>
		public async Task<GuestCheckoutSessionResponse> UpdateProxyGuestShippingOptionAsync(string checkoutSessionId, UpdateShippingOption requestBody)
		{
			var requestUri = "proxy_guest_checkout_session/"+Uri.EscapeDataString(checkoutSessionId)+"/update_shipping_option";
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create();
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			var responseMessage = await client.PostAsync(requestUri, content);
			try
			{
				responseMessage.EnsureSuccessStatusCode();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<GuestCheckoutSessionResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// This method changes the shipping method for the specified line item in an eBay proxy guest checkout session. The shipping option can be set for each line item. This gives the shopper the ability choose the cost of shipping for each line item. To meet security requirements for payments, the URLs for this method are: Production URL: https://apix.ebay.com/buy/order/v1 Sandbox URL: https://apix.sandbox.ebay.com/buy/order/v1 Note: This method is not available in the eBay API Explorer. Restrictions This method is used only when the eBay partner is using a payment vault service, such as Braintree, to process payments. The Vault service eBay guest payment flow is supported only for the EBAY_US marketplace. For a list of supported sites and other restrictions, see API Restrictions in the Order API overview.
		/// UpdateProxyGuestShippingOption proxy_guest_checkout_session/{checkoutSessionId}/update_shipping_option
		/// </summary>
		/// <param name="checkoutSessionId">The eBay-assigned session ID, for a specific eBay marketplace, that is returned by the initiateProxyGuestCheckoutSession method. Note: When using this ID, the X-EBAY-C-MARKETPLACE-ID value and developer App ID must be the same as what was used when this checkout session was created. See Checkout session restrictions in the Buy Integration Guide.</param>
		/// <param name="requestBody">The container for the fields used by the updateProxyGuestShippingOption method.</param>
		/// <returns>OK</returns>
		public GuestCheckoutSessionResponse UpdateProxyGuestShippingOption(string checkoutSessionId, UpdateShippingOption requestBody)
		{
			var requestUri = "proxy_guest_checkout_session/"+Uri.EscapeDataString(checkoutSessionId)+"/update_shipping_option";
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create();
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			var responseMessage = this.client.PostAsync(requestUri, content).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCode();
				var stream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<GuestCheckoutSessionResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
	
	public partial class Guest_purchase_orderClient
	{
		
		private System.Net.Http.HttpClient client;
		
		public Guest_purchase_orderClient(System.Net.Http.HttpClient client)
		{
			if (client == null)
				throw new ArgumentNullException("Null HttpClient.", "client");

			if (client.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "client");

			this.client = client;
		}
		
		/// <summary>
		/// This method retrieves the details about a specific guest purchase order. It returns the line items, including purchase order status; dates created and modified; item quantity and listing data; payment and shipping information; and prices, taxes, and discounts and credits. The purchaseOrderId is passed in as a URI parameter and is required. This method has no request payload. The placeGuestOrder or method initiates the payment process, which can sometimes take a few minutes. You can use this method to not only get the details of a purchase order but to check the value of the purchaseOrderPaymentStatus field to determine if the order has been paid for. If the order has been paid for, this field will return PAID. Restrictions For a list of supported sites and other restrictions, see API Restrictions in the Order API overview.
		/// GetGuestPurchaseOrder guest_purchase_order/{purchaseOrderId}
		/// </summary>
		/// <param name="purchaseOrderId">The unique identifier of a purchase order made by a guest buyer, for which details are to be retrieved. This value is returned by the placeGuestOrder method in the purchaseOrderId field. The purchaseOrderId is passed in as a URI parameter and is required.</param>
		/// <returns>OK</returns>
		public async Task<GuestPurchaseOrder> GetGuestPurchaseOrderAsync(string purchaseOrderId)
		{
			var requestUri = "guest_purchase_order/"+Uri.EscapeDataString(purchaseOrderId);
			var responseMessage = await client.GetAsync(requestUri);
			try
			{
				responseMessage.EnsureSuccessStatusCode();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<GuestPurchaseOrder>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// This method retrieves the details about a specific guest purchase order. It returns the line items, including purchase order status; dates created and modified; item quantity and listing data; payment and shipping information; and prices, taxes, and discounts and credits. The purchaseOrderId is passed in as a URI parameter and is required. This method has no request payload. The placeGuestOrder or method initiates the payment process, which can sometimes take a few minutes. You can use this method to not only get the details of a purchase order but to check the value of the purchaseOrderPaymentStatus field to determine if the order has been paid for. If the order has been paid for, this field will return PAID. Restrictions For a list of supported sites and other restrictions, see API Restrictions in the Order API overview.
		/// GetGuestPurchaseOrder guest_purchase_order/{purchaseOrderId}
		/// </summary>
		/// <param name="purchaseOrderId">The unique identifier of a purchase order made by a guest buyer, for which details are to be retrieved. This value is returned by the placeGuestOrder method in the purchaseOrderId field. The purchaseOrderId is passed in as a URI parameter and is required.</param>
		/// <returns>OK</returns>
		public GuestPurchaseOrder GetGuestPurchaseOrder(string purchaseOrderId)
		{
			var requestUri = "guest_purchase_order/"+Uri.EscapeDataString(purchaseOrderId);
			var responseMessage = this.client.GetAsync(requestUri).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCode();
				var stream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<GuestPurchaseOrder>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
	}
	
	public partial class Purchase_orderClient
	{
		
		private System.Net.Http.HttpClient client;
		
		public Purchase_orderClient(System.Net.Http.HttpClient client)
		{
			if (client == null)
				throw new ArgumentNullException("Null HttpClient.", "client");

			if (client.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "client");

			this.client = client;
		}
		
		/// <summary>
		/// This method retrieves the details about a specific eBay member purchase order. It returns the line items, including purchase order status; dates created and modified; item quantity and listing data; payment and shipping information; and prices, taxes, and discounts and credits. The purchaseOrderId is passed in as a URI parameter and is required. This method has no request payload. The placeOrder method initiates the payment process, which can sometimes take a few minutes. You can use this method to not only get the details of a purchase order but to check the value of the purchaseOrderPaymentStatus field to determine if the order has been paid for. If the order has been paid for, this field will return PAID. This method also returns the legacyItemId, legacyTransactionId, and legacyOrderId fields. The values in these fields enable eBay partners to use the Post Order API for eBay member checkouts, to process a return or cancellation. For more information, see Post order tasks in the Buy Integration Guide. Restrictions For a list of supported sites and other restrictions, see API Restrictions in the Order API overview.
		/// GetPurchaseOrder purchase_order/{purchaseOrderId}
		/// </summary>
		/// <param name="purchaseOrderId">The unique identifier of a purchase order made by an eBay member, for which details are to be retrieved. This value is returned by the placeOrder method in the purchaseOrderId field. The purchaseOrderId is passed in as a URI parameter and is required.</param>
		/// <returns>OK</returns>
		public async Task<PurchaseOrder> GetPurchaseOrderAsync(string purchaseOrderId)
		{
			var requestUri = "purchase_order/"+Uri.EscapeDataString(purchaseOrderId);
			var responseMessage = await client.GetAsync(requestUri);
			try
			{
				responseMessage.EnsureSuccessStatusCode();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<PurchaseOrder>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// This method retrieves the details about a specific eBay member purchase order. It returns the line items, including purchase order status; dates created and modified; item quantity and listing data; payment and shipping information; and prices, taxes, and discounts and credits. The purchaseOrderId is passed in as a URI parameter and is required. This method has no request payload. The placeOrder method initiates the payment process, which can sometimes take a few minutes. You can use this method to not only get the details of a purchase order but to check the value of the purchaseOrderPaymentStatus field to determine if the order has been paid for. If the order has been paid for, this field will return PAID. This method also returns the legacyItemId, legacyTransactionId, and legacyOrderId fields. The values in these fields enable eBay partners to use the Post Order API for eBay member checkouts, to process a return or cancellation. For more information, see Post order tasks in the Buy Integration Guide. Restrictions For a list of supported sites and other restrictions, see API Restrictions in the Order API overview.
		/// GetPurchaseOrder purchase_order/{purchaseOrderId}
		/// </summary>
		/// <param name="purchaseOrderId">The unique identifier of a purchase order made by an eBay member, for which details are to be retrieved. This value is returned by the placeOrder method in the purchaseOrderId field. The purchaseOrderId is passed in as a URI parameter and is required.</param>
		/// <returns>OK</returns>
		public PurchaseOrder GetPurchaseOrder(string purchaseOrderId)
		{
			var requestUri = "purchase_order/"+Uri.EscapeDataString(purchaseOrderId);
			var responseMessage = this.client.GetAsync(requestUri).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCode();
				var stream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<PurchaseOrder>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
	}
}
