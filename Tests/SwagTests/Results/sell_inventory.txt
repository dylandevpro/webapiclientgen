//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Net.Http;
	using Newtonsoft.Json;
	
	
	/// <summary>
	/// This type is used to define the physical address of an inventory location.
	/// </summary>
	public class Address
	{
		
		/// <summary>
		/// The first line of a street address. This field is required for store inventory locations that will be holding In-Store Pickup inventory. A street address is not required if the inventory location is not holding In-Store Pickup Inventory. This field will be returned if defined for an inventory location. Max length: 128
		/// </summary>
		public string AddressLine1 { get; set; }
		
		/// <summary>
		/// The second line of a street address. This field can be used for additional address information, such as a suite or apartment number. A street address is not required if the inventory location is not holding In-Store Pickup Inventory. This field will be returned if defined for an inventory location. Max length: 128
		/// </summary>
		public string AddressLine2 { get; set; }
		
		/// <summary>
		/// The city in which the inventory location resides. This field is required for store inventory locations that will be holding In-Store Pickup inventory. For warehouse locations, this field is technically optional, as a postalCode can be used instead of city/stateOrProvince pair, and then the city is just derived from this postal/zip code. This field is returned if defined for an inventory location. Max length: 128
		/// </summary>
		public string City { get; set; }
		
		/// <summary>
		/// The country in which the address resides, represented as two-letter ISO 3166 country code. For example, US represents the United States, and DE represents Germany. Max length: 2 For implementation help, refer to <a href='https://developer.ebay.com/devzone/rest/api-ref/inventory/types/CountryCodeEnum".html'>eBay API documentation</a>
		/// </summary>
		public string Country { get; set; }
		
		/// <summary>
		/// The county in which the address resides. This field is returned if defined for an inventory location.
		/// </summary>
		public string County { get; set; }
		
		/// <summary>
		/// The postal/zip code of the address. eBay uses postal codes to surface In-Store Pickup items within the vicinity of a buyer's location, and it also user postal codes (origin and destination) to estimate shipping costs when the seller uses calculated shipping. A city/stateOrProvince pair can be used instead of a postalCode value, and then the postal code is just derived from the city and state/province. This field is returned if defined for an inventory location. Max length: 16
		/// </summary>
		public string PostalCode { get; set; }
		
		/// <summary>
		/// The state/province in which the inventory location resides. This field is required for store inventory locations that will be holding In-Store Pickup inventory. For warehouse locations, this field is technically optional, as a postalCode can be used instead of city/stateOrProvince pair, and then the state or province is just derived from this postal/zip code. Max length: 128
		/// </summary>
		public string StateOrProvince { get; set; }
	}
	
	/// <summary>
	/// This type is used to express a dollar value and the applicable currency.
	/// </summary>
	public class Amount
	{
		
		/// <summary>
		/// A three-digit string value respresenting the type of currency being used. Both the value and currency fields are required/always returned when expressing prices. See the CurrencyCodeEnum type for the full list of currencies and their corresponding three-digit string values.
		/// </summary>
		public string Currency { get; set; }
		
		/// <summary>
		/// A string representation of a dollar value expressed in the currency specified in the currency field. Both the value and currency fields are required/always returned when expressing prices.
		/// </summary>
		public string Value { get; set; }
	}
	
	/// <summary>
	/// This type is used to specify the quantity of the inventory item that is available for purchase if the item will be shipped to the buyer, and the quantity of the inventory item that is available for In-Store Pickup at one or more of the merchant's physical stores. In-Store Pickup is only available to large merchants selling on the US, UK, Germany, and Australia sites.
	/// </summary>
	public class Availability
	{
		
		/// <summary>
		/// This container consists of an array of one or more of the merchant's physical store locations where the inventory item is available for In-Store Pickup orders. The merchant's location, the quantity available, and the fulfillment time (how soon the item will be ready for pickup after the order takes place) are all in this container. In-Store Pickup is only available to large merchants selling on the US, UK, Germany, and Australia sites.
		/// </summary>
		public PickupAtLocationAvailability[] PickupAtLocationAvailability { get; set; }
		
		/// <summary>
		/// This type is used to specify the total 'ship-to-home' quantity of the inventory item that will be available for purchase through one or more published offers.
		/// </summary>
		public ShipToLocationAvailability ShipToLocationAvailability { get; set; }
	}
	
	/// <summary>
	/// This is the base response of the createOrReplaceInventoryItem, createOrReplaceInventoryItemGroup, and createOrReplaceProductCompatibility calls. A response payload will only be returned for these three calls if one or more errors or warnings occur with the call.
	/// </summary>
	public class BaseResponse
	{
		
		/// <summary>
		/// This container will be returned in a call response payload if one or more warnings or errors are triggered when an Inventory API call is made. This container will contain detailed information about the error or warning.
		/// </summary>
		public Error[] Warnings { get; set; }
	}
	
	/// <summary>
	/// This type is used by the bestOfferTerms container, which is used if the seller would like to support the Best Offer feature on their listing.
	/// </summary>
	public class BestOffer
	{
		
		/// <summary>
		/// This type is used to express a dollar value and the applicable currency.
		/// </summary>
		public Amount AutoAcceptPrice { get; set; }
		
		/// <summary>
		/// This type is used to express a dollar value and the applicable currency.
		/// </summary>
		public Amount AutoDeclinePrice { get; set; }
		
		/// <summary>
		/// This field indicates whether or not the Best Offer feature is enabled for the listing. A seller can enable the Best Offer feature for a listing as long as the category supports the Best Offer feature. The seller includes this field and sets its value to true to enable Best Offer feature.
		/// </summary>
		public bool BestOfferEnabled { get; set; }
	}
	
	/// <summary>
	/// This type is used by the base request of the bulkCreateOffer method, which is used to create up to 25 new offers.
	/// </summary>
	public class BulkEbayOfferDetailsWithKeys
	{
		
		/// <summary>
		/// The details of each offer that is being created is passed in under this container. Up to 25 offers can be created with one bulkCreateOffer call.
		/// </summary>
		public EbayOfferDetailsWithKeys[] Requests { get; set; }
	}
	
	/// <summary>
	/// This type is used by the base request of the bulkGetInventoryItem method.
	/// </summary>
	public class BulkGetInventoryItem
	{
		
		/// <summary>
		/// The seller passes in multiple SKU values under this container to retrieve multiple inventory item records. Up to 25 inventory item records can be retrieved at one time.
		/// </summary>
		public GetInventoryItem[] Requests { get; set; }
	}
	
	/// <summary>
	/// This type is used by the base response of the bulkGetInventoryItem method.
	/// </summary>
	public class BulkGetInventoryItemResponse
	{
		
		/// <summary>
		/// This is the base container of the bulkGetInventoryItem response. The results of each attempted inventory item retrieval is captured under this container.
		/// </summary>
		public GetInventoryItemResponse[] Responses { get; set; }
	}
	
	/// <summary>
	/// The base request of the bulkCreateOrReplaceInventoryItem method.
	/// </summary>
	public class BulkInventoryItem
	{
		
		/// <summary>
		/// The details of each inventory item that is being created or updated is passed in under this container. Up to 25 inventory item records can be created and/or updated with one bulkCreateOrReplaceInventoryItem call.
		/// </summary>
		public InventoryItemWithSkuLocale[] Requests { get; set; }
	}
	
	/// <summary>
	/// This type is used by the base response of the bulkCreateOrReplaceInventoryItem method.
	/// </summary>
	public class BulkInventoryItemResponse
	{
		
		/// <summary>
		/// This is the base container of the bulkCreateOrReplaceInventoryItem response. The results of each attempted inventory item creation/update is captured under this container.
		/// </summary>
		public InventoryItemResponse[] Responses { get; set; }
	}
	
	/// <summary>
	/// This type is used by the base container of the bulkMigrateListings request payload.
	/// </summary>
	public class BulkMigrateListing
	{
		
		/// <summary>
		/// This is the base container of the bulkMigrateListings request payload. One to five eBay listings will be included under this container.
		/// </summary>
		public MigrateListing[] Requests { get; set; }
	}
	
	/// <summary>
	/// This type is used by the response payload of the bulkMigrateListings call.
	/// </summary>
	public class BulkMigrateListingResponse
	{
		
		/// <summary>
		/// This is the base container of the response payload of the bulkMigrateListings call. The results of each attempted listing migration is captured under this container.
		/// </summary>
		public MigrateListingResponse[] Responses { get; set; }
	}
	
	/// <summary>
	/// This type is used by the base request of the bulkPublishOffer method, which is used to publish up to 25 different offers.
	/// </summary>
	public class BulkOffer
	{
		
		/// <summary>
		/// This container is used to pass in an array of offers to publish. Up to 25 offers can be published with one bulkPublishOffer method.
		/// </summary>
		public OfferKeyWithId[] Requests { get; set; }
	}
	
	/// <summary>
	/// This type is used by the base response of the bulkCreateOffer method.
	/// </summary>
	public class BulkOfferResponse
	{
		
		/// <summary>
		/// This is the base container of the bulkCreateOffer response. The results of each attempted offer creation is captured under this container.
		/// </summary>
		public OfferSkuResponse[] Responses { get; set; }
	}
	
	/// <summary>
	/// This type is used by the base request payload of the bulkUpdatePriceQuantity call. The bulkUpdatePriceQuantity call allows the seller to update the total 'ship-to-home' quantity of one or more inventory items (up to 25) and/or to update the price and/or quantity of one or more specific published offers.
	/// </summary>
	public class BulkPriceQuantity
	{
		
		/// <summary>
		/// This container is used by the seller to update the total 'ship-to-home' quantity of one or more inventory items (up to 25) and/or to update the price and/or quantity of one or more specific published offers.
		/// </summary>
		public PriceQuantity[] Requests { get; set; }
	}
	
	/// <summary>
	/// This type is use by the base response payload of the bulkUpdatePriceQuantity call. The bulkUpdatePriceQuantity call response will return an HTTP status code, offer ID, and SKU value for each offer/inventory item being updated, as well as an errors and/or warnings container if any errors or warnings are triggered while trying to update those offers/inventory items.
	/// </summary>
	public class BulkPriceQuantityResponse
	{
		
		/// <summary>
		/// This container will return an HTTP status code, offer ID, and SKU value for each offer/inventory item being updated, as well as an errors and/or warnings container if any errors or warnings are triggered while trying to update those offers/inventory items.
		/// </summary>
		public PriceQuantityResponse[] Responses { get; set; }
	}
	
	/// <summary>
	/// This type is used by the base response of the bulkPublishOffer method.
	/// </summary>
	public class BulkPublishResponse
	{
		
		/// <summary>
		/// A node is returned under the responses container to indicate the success or failure of each offer that the seller was attempting to publish.
		/// </summary>
		public OfferResponseWithListingId[] Responses { get; set; }
	}
	
	/// <summary>
	/// This type is used to identify the charitable organization associated with the listing, and the percentage of the sale proceeds that the charitable organization will receive for each sale generated by the listing. In order to receive a percentage of the sales proceeds, the charitable organization must be registered with the PayPal Giving Fund, which is a partner of eBay for Charity.
	/// </summary>
	public class Charity
	{
		
		/// <summary>
		/// The eBay-assigned unique identifier of the charitable organization that will receive a percentage of the sales proceeds. The charitable organization must be reqistered with the PayPal Giving Fund in order to receive sales proceeds through eBay listings. This field is conditionally required if a seller is planning on donating a percentage of the sale proceeds to a charitable organization. The eBay-assigned unique identifier of a charitable organization can be found using the GetCharities call of the Trading API. In the GetCharities call response, this unique identifier is shown in the id attribute of the Charity container.
		/// </summary>
		public string CharityId { get; set; }
		
		/// <summary>
		/// This field is the percentage of the purchase price that the charitable organization (identified in the charityId field) will receive for each sale that the listing generates. This field is conditionally required if a seller is planning on donating a percentage of the sale proceeds to a charitable organization. This numeric value can range from 10 to 100, and in any 5 (percent) increments in between this range (e.g. 10, 15, 20...95,... 100). The seller would pass in 10 for 10 percent, 15 for 15 percent, 20 for 20 percent, and so on, all the way to 100 for 100 percent.
		/// </summary>
		public string DonationPercentage { get; set; }
	}
	
	/// <summary>
	/// This type is used by the createOrReplaceProductCompatibility call to associate compatible vehicles to an inventory item. This type is also used by the base response of the getProductCompatibility call.
	/// </summary>
	public class Compatibility
	{
		
		/// <summary>
		/// This container consists of an array of motor vehicles (defined by make, model, year, trim, engine) that are compatible with the motor vehicle part or accessory specified by the SKU value.
		/// </summary>
		public CompatibleProduct[] CompatibleProducts { get; set; }
		
		/// <summary>
		/// This is the seller-defined SKU value of the inventory item that will be associated with the compatible vehicles. This field is not applicable to the createOrReplaceProductCompatibility call, but it is always returned with the getProductCompatibility call. For the createOrReplaceProductCompatibility call, the SKU value for the inventory item is actually passed in as part of the call URI, and not in the request payload.
		/// </summary>
		public string Sku { get; set; }
	}
	
	/// <summary>
	/// This type is used to specify/indicate the motor vehicles that are compatible with the corresponding inventory item.
	/// </summary>
	public class CompatibleProduct
	{
		
		/// <summary>
		/// This container consists of an array of motor vehicles that are compatible with the motor vehicle part or accessory specified by the SKU value in the call URI. Each motor vehicle is defined through a separate set of name/value pairs. In the name field, the vehicle aspect (such as 'make', 'model', 'year', 'trim', or 'engine') will be identified, and the value field will be used to identify the value of each aspect. The getCompatibilityProperties method of the Taxonomy API can be used to retrieve applicable vehicle aspect names for a specified category, and the getCompatibilityPropertyValues method of the Taxonomy API can be used to retrieve possible values for these same vehicle aspect names. Below is an example of identifying one motor vehicle using the compatibilityProperties container: &quot;compatibilityProperties&quot; : [ &nbsp;&nbsp;{ &nbsp;&nbsp;&nbsp;&quot;name&quot; : &quot;make&quot;, &nbsp;&nbsp;&nbsp;&quot;value&quot; : &quot;Subaru&quot; &nbsp;&nbsp;}, &nbsp;&nbsp;{ &nbsp;&nbsp;&nbsp;&quot;name&quot; : &quot;model&quot;, &nbsp;&nbsp;&nbsp;&quot;value&quot; : &quot;GL&quot; &nbsp;&nbsp;}, &nbsp;&nbsp;{ &nbsp;&nbsp;&nbsp;&quot;name&quot; : &quot;year&quot;, &nbsp;&nbsp;&nbsp;&quot;value&quot; : &quot;1983&quot; &nbsp;&nbsp;}, &nbsp;&nbsp;{ &nbsp;&nbsp;&nbsp;&quot;name&quot; : &quot;trim&quot;, &nbsp;&nbsp;&nbsp;&quot;value&quot; : &quot;Base Wagon 4-Door&quot; &nbsp;&nbsp;}, &nbsp;&nbsp;{ &nbsp;&nbsp;&nbsp;&quot;name&quot; : &quot;engine&quot;, &nbsp;&nbsp;&nbsp;&quot;value&quot; : &quot;1.8L Turbocharged&quot; &nbsp;&nbsp;} ] Typically, the make, model, and year of the motor vehicle are always required, with the trim and engine being necessary sometimes, but it will be dependent on the part or accessory, and on the vehicle class. Note: The productFamilyProperties container is in the process of being deprecated and will no longer be supported in February of 2021, so if you are a new user of createOrReplaceProductCompatibility, you should use the compatibilityProperties container instead, and if you are already integrated and using the productFamilyProperties container, you should make plans to migrate to compatibilityProperties. The productFamilyProperties and compatibilityProperties containers may not be used together or the call will fail.
		/// </summary>
		public NameValueList[] CompatibilityProperties { get; set; }
		
		/// <summary>
		/// This field is optionally used by the seller to input any notes pertaining to the compatible vehicle list being defined. The seller might use this field to specify the placement of the part on a vehicle or other applicable information. This field will only be returned if specified by the seller. Max Length: 500
		/// </summary>
		public string Notes { get; set; }
		
		/// <summary>
		/// This type is used to specify the details of a motor vehicle that is compatible with the inventory item specified through the SKU value in the call URI.
		/// </summary>
		public ProductFamilyProperties ProductFamilyProperties { get; set; }
		
		/// <summary>
		/// This type is used to identify a motor vehicle that is compatible with the corresponding inventory item (the SKU that is passed in as part of the call URI). The motor vehicle can be identified through an eBay Product ID or a K-Type value. The gtin field (for inputting Global Trade Item Numbers) is for future use only. If a motor vehicle is found in the eBay product catalog, the motor vehicle properties (engine, make, model, trim, and year) will automatically get picked up for that motor vehicle. Note: Currently, parts compatibility is only applicable for motor vehicles, but it is possible that the Product Compatibility feature is expanded to other (non-vehicle) products in the future.
		/// </summary>
		public ProductIdentifier ProductIdentifier { get; set; }
	}
	
	/// <summary>
	/// This type is used to specify the dimensions (and the unit used to measure those dimensions) of a shipping package. The dimensions container is conditionally required if the seller will be offering calculated shipping rates to determine shipping cost. See the Calculated shipping help page for more information on calculated shipping.
	/// </summary>
	public class Dimension
	{
		
		/// <summary>
		/// The actual height (in the measurement unit specified in the unit field) of the shipping package. All fields of the dimensions container are required if package dimensions are specified. If a shipping package measured 21.5 inches in length, 15.0 inches in width, and 12.0 inches in height, the dimensions container would look as follows: &quot;dimensions&quot;: {  &quot;length&quot;: 21.5,  &quot;width&quot;: 15.0,  &quot;height&quot;: 12.0,  &quot;unit&quot;: &quot;INCH&quot;  }
		/// </summary>
		public float Height { get; set; }
		
		/// <summary>
		/// The actual length (in the measurement unit specified in the unit field) of the shipping package. All fields of the dimensions container are required if package dimensions are specified. If a shipping package measured 21.5 inches in length, 15.0 inches in width, and 12.0 inches in height, the dimensions container would look as follows: &quot;dimensions&quot;: {  &quot;length&quot;: 21.5,  &quot;width&quot;: 15.0,  &quot;height&quot;: 12.0,  &quot;unit&quot;: &quot;INCH&quot;  }
		/// </summary>
		public float Length { get; set; }
		
		/// <summary>
		/// The unit of measurement used to specify the dimensions of a shipping package. All fields of the dimensions container are required if package dimensions are specified. If the English system of measurement is being used, the applicable values for dimension units are FEET and INCH. If the metric system of measurement is being used, the applicable values for weight units are METER and CENTIMETER. The metric system is used by most countries outside of the US. For implementation help, refer to <a href='https://developer.ebay.com/devzone/rest/api-ref/inventory/types/LengthUnitOfMeasureEnum.html'>eBay API documentation</a>
		/// </summary>
		public string Unit { get; set; }
		
		/// <summary>
		/// The actual width (in the measurement unit specified in the unit field) of the shipping package. All fields of the dimensions container are required if package dimensions are specified. If a shipping package measured 21.5 inches in length, 15.0 inches in width, and 12.0 inches in height, the dimensions container would look as follows: &quot;dimensions&quot;: {  &quot;length&quot;: 21.5,  &quot;width&quot;: 15.0,  &quot;height&quot;: 12.0,  &quot;unit&quot;: &quot;INCH&quot;  }
		/// </summary>
		public float Width { get; set; }
	}
	
	/// <summary>
	/// This type provides details of an offer, and is used by the response payloads of the getOffer and the getOffers calls.
	/// </summary>
	public class EbayOfferDetailsWithAll
	{
		
		/// <summary>
		/// This integer value indicates the quantity of the inventory item (specified by the sku value) that will be available for purchase by buyers shopping on the eBay site specified in the marketplaceId field. For unpublished offers where the available quantity has yet to be set, the availableQuantity value is set to 0.
		/// </summary>
		public int AvailableQuantity { get; set; }
		
		/// <summary>
		/// The unique identifier of the primary eBay category that the inventory item is listed under. This field is always returned for published offers, but is only returned if set for unpublished offers.
		/// </summary>
		public string CategoryId { get; set; }
		
		/// <summary>
		/// This type is used to identify the charitable organization associated with the listing, and the percentage of the sale proceeds that the charitable organization will receive for each sale generated by the listing. In order to receive a percentage of the sales proceeds, the charitable organization must be registered with the PayPal Giving Fund, which is a partner of eBay for Charity.
		/// </summary>
		public Charity Charity { get; set; }
		
		/// <summary>
		/// This enumerated value indicates the listing format of the offer. Currently, the only supported value for this field is FIXED_PRICE. For implementation help, refer to <a href='https://developer.ebay.com/devzone/rest/api-ref/inventory/types/FormatTypeEnum.html'>eBay API documentation</a>
		/// </summary>
		public string Format { get; set; }
		
		/// <summary>
		/// This type is used by the listing container in the getOffer and getOffers calls to provide the eBay listing ID, the listing status, and quantity sold for the offer. The listing container is only returned for published offers, and is not returned for unpublished offers.
		/// </summary>
		public ListingDetails Listing { get; set; }
		
		/// <summary>
		/// The description of the eBay listing that is part of the unpublished or published offer. This field is always returned for published offers, but is only returned if set for unpublished offers. Max Length: 500000 (which includes HTML markup/tags)
		/// </summary>
		public string ListingDescription { get; set; }
		
		/// <summary>
		/// This field indicates the number of days that the listing will be active. 'GTC' (Good 'til Cancelled) listings are automatically renewed each calendar month until the seller decides to end the listing. Note: This field is always returned and its value is always GTC since the Inventory API currently only supports fixed-price listings, and the only supported listing duration for fixed-price listings is 'GTC'. For implementation help, refer to <a href='https://developer.ebay.com/devzone/rest/api-ref/inventory/types/ListingDurationEnum.html'>eBay API documentation</a>
		/// </summary>
		public string ListingDuration { get; set; }
		
		/// <summary>
		/// This type is used to identify the payment, return, and fulfillment listing policies that will be, or are associated with the listing. Every published offer must have a payment, return, and fulfillment listing policy associated with it. This type is also used to override the shipping costs of one or more shipping service options that are associated with the fulfillment policy, to enable eBay Plus eligibility for a listing, or to enable the Best Offer feature on the listing.
		/// </summary>
		public ListingPolicies ListingPolicies { get; set; }
		
		/// <summary>
		/// This field is only applicable and returned if the listing is a lot listing. A lot listing is a listing that has multiple quantity of the same product. An example would be a set of four identical car tires. The integer value in this field is the number of identical items being sold through the lot listing.
		/// </summary>
		public int LotSize { get; set; }
		
		/// <summary>
		/// This enumeration value is the unique identifier of the eBay site on which the offer is available, or will be made available. For implementation help, refer to <a href='https://developer.ebay.com/devzone/rest/api-ref/inventory/types/MarketplaceEnum.html'>eBay API documentation</a>
		/// </summary>
		public string MarketplaceId { get; set; }
		
		/// <summary>
		/// The unique identifier of the inventory location. This identifier is set up by the merchant when the inventory location is first created with the createInventoryLocation call. Once this value is set for an inventory location, it can not be modified. To get more information about this inventory location, the getInventoryLocation call can be used, passing in this value at the end of the call URI. This field is always returned for published offers, but is only returned if set for unpublished offers. Max length: 36
		/// </summary>
		public string MerchantLocationKey { get; set; }
		
		/// <summary>
		/// The unique identifier of the offer. This identifier is used in many offer-related calls, and it is also used in the bulkUpdatePriceQuantity call.
		/// </summary>
		public string OfferId { get; set; }
		
		/// <summary>
		/// This type is used to specify the listing price for the product and settings for the Minimum Advertised Price and Strikethrough Pricing features. The price field must be supplied before an offer is published, but a seller may create an offer without supplying a price initially. The Minimum Advertised Price feature is only available on the US site. Strikethrough Pricing is available on the US, eBay Motors, UK, Germany, Canada (English and French), France, Italy, and Spain sites.
		/// </summary>
		public PricingSummary PricingSummary { get; set; }
		
		/// <summary>
		/// This field is only applicable and set if the seller wishes to set a restriction on the purchase quantity of an inventory item per seller. If this field is set by the seller for the offer, then each distinct buyer may purchase up to, but not exceed the quantity in this field. So, if this field's value is 5, each buyer may purchase a quantity of the inventory item between one and five, and the purchases can occur in one multiple-quantity purchase, or over multiple transactions. If a buyer attempts to purchase one or more of these products, and the cumulative quantity will take the buyer beyond the quantity limit, that buyer will be blocked from that purchase.
		/// </summary>
		public int QuantityLimitPerBuyer { get; set; }
		
		/// <summary>
		/// This is the seller-defined SKU value of the product in the offer. Max Length: 50
		/// </summary>
		public string Sku { get; set; }
		
		/// <summary>
		/// The enumeration value in this field specifies the status of the offer - either PUBLISHED or UNPUBLISHED. For implementation help, refer to <a href='https://developer.ebay.com/devzone/rest/api-ref/inventory/types/OfferStatusEnum.html'>eBay API documentation</a>
		/// </summary>
		public string Status { get; set; }
		
		/// <summary>
		/// This container is returned if the seller chose to place the inventory item into one or two eBay store categories that the seller has set up for their eBay store. The string value(s) in this container will be the full path(s) to the eBay store categories, as shown below: &quot;storeCategoryNames&quot;: [  &quot;/Fashion/Men/Shirts&quot;,  &quot;/Fashion/Men/Accessories&quot; ],
		/// </summary>
		public string[] StoreCategoryNames { get; set; }
		
		/// <summary>
		/// This type is used to enable the use of a sales tax table, to pass in a tax exception category code, or to specify a VAT percentage.
		/// </summary>
		public Tax Tax { get; set; }
	}
	
	/// <summary>
	/// This type provides details of an offer, and is used by the base request payload of the updateOffer call. Every field that is currently set with the unpublished/published offer must also be passed into the updateOffer call, even those fields whose values are not changing. Note that for published offers, a successful updateOffer call will actually update the active eBay listing with whatever changes were made.
	/// </summary>
	public class EbayOfferDetailsWithId
	{
		
		/// <summary>
		/// This integer value sets the quantity of the inventory item that will be available through the offer. Quantity must be set to 1 or more in order for the inventory item to be purchasable. This value should not be more than the quantity that is specified for the inventory item record. If this field exists for the current unpublished or published offer, it should be provided again in the updateOffer call, even if the value is not changing. If this particular field is omitted in an updateOffer call, the general available quantity set for the inventory item record may be used instead, and this may not be accurate if the inventory item is being sold across multiple marketplaces.
		/// </summary>
		public int AvailableQuantity { get; set; }
		
		/// <summary>
		/// The unique identifier of the eBay category that the inventory item is/will be listed under. This field is not immediately required for an unpublished offer, but will be required before publishing the offer. Sellers can use the getCategorySuggestions method of the Taxonomy API or the GetSuggestedCategories call of the Trading API to retrieve suggested category ID values. The seller passes in a query string like &quot;iPhone 6&quot;, and category ID values for suggested categories are returned in the response. If this field exists for the current unpublished offer, it should be provided again in the updateOffer call, even if the eBay category is not changing. For a published offer (aka active eBay listing), this field must be provided or an error may occur. The eBay category of an active eBay listing cannot be changed once the listing has one or more sales, or if the listing is scheduled to end in less than 12 hours.
		/// </summary>
		public string CategoryId { get; set; }
		
		/// <summary>
		/// This type is used to identify the charitable organization associated with the listing, and the percentage of the sale proceeds that the charitable organization will receive for each sale generated by the listing. In order to receive a percentage of the sales proceeds, the charitable organization must be registered with the PayPal Giving Fund, which is a partner of eBay for Charity.
		/// </summary>
		public Charity Charity { get; set; }
		
		/// <summary>
		/// The text in this field is (published offers), or will become (unpublished offers) the description of the eBay listing. This field is not immediately required for an unpublished offer, but will be required before publishing the offer. Note that if the listingDescription field was omitted in the createOffer call for the offer, the offer entity should have picked up the text provided in the product.description field of the inventory item record, or if the inventory item is part of a group, the offer entity should have picked up the text provided in the description field of the inventory item group record. HTML tags and markup can be used in listing descriptions, but each character counts toward the max length limit. Note: To ensure that their short listing description is optimized when viewed on mobile devices, sellers should strongly consider using eBay's View Item description summary feature when listing their items. Keep in mind that the 'short' listing description is what prospective buyers first see when they view the listing on a mobile device. The 'full' listing description is also available to mobile users when they click on the short listing description, but the full description is not automatically optimized for viewing in mobile devices, and many users won't even drill down to the full description. Using HTML div and span tag attributes, this feature allows sellers to customize and fully control the short listing description that is displayed to prospective buyers when viewing the listing on a mobile device. The short listing description on mobile devices is limited to 800 characters, and whenever the full listing description (provided in this field, in UI, or seller tool) exceeds this limit, eBay uses a special algorithm to derive the best possible short listing description within the 800-character limit. However, due to some short listing description content being removed, it is definitely not ideal for the seller, and could lead to a bad buyer experience and possibly to a Significantly not as described (SNAD) case, since the buyer may not get complete details on the item when viewing the short listing description. See the eBay help page for more details on using the HTML div and span tags. If this field exists for the current unpublished offer, it should be provided again in the updateOffer call, even if the text is not changing. For a published offer (aka active eBay listing), this field must be provided or an error may occur. Max length: 500000 (which includes HTML markup/tags)
		/// </summary>
		public string ListingDescription { get; set; }
		
		/// <summary>
		/// Note: This field is not necessary (and has no effect) since 'GTC' (Good 'til Cancelled) is the only supported listing duration, and the listingDuration value gets set to GTC by default. This field indicates the number of days that the seller wants the listing to be active. 'GTC' listings are automatically renewed each calendar month until the seller decides to end the listing. For implementation help, refer to <a href='https://developer.ebay.com/devzone/rest/api-ref/inventory/types/ListingDurationEnum.html'>eBay API documentation</a>
		/// </summary>
		public string ListingDuration { get; set; }
		
		/// <summary>
		/// This type is used to identify the payment, return, and fulfillment listing policies that will be, or are associated with the listing. Every published offer must have a payment, return, and fulfillment listing policy associated with it. This type is also used to override the shipping costs of one or more shipping service options that are associated with the fulfillment policy, to enable eBay Plus eligibility for a listing, or to enable the Best Offer feature on the listing.
		/// </summary>
		public ListingPolicies ListingPolicies { get; set; }
		
		/// <summary>
		/// This field is only applicable if the listing is a lot listing. A lot listing is a listing that has multiple quantity of the same product. An example would be a set of four identical car tires. The integer value passed into this field is the number of identical items being sold through the lot listing.
		/// </summary>
		public int LotSize { get; set; }
		
		/// <summary>
		/// The unique identifier of a merchant's inventory location (where the inventory item in the offer is located). A merchantLocationKey value is established when the merchant creates an inventory location using the createInventoryLocation call. To get more information about inventory locations, the getInventoryLocation call can be used. This field is not initially required upon first creating an offer, but will become required before an offer can be published. Max length: 36
		/// </summary>
		public string MerchantLocationKey { get; set; }
		
		/// <summary>
		/// This type is used to specify the listing price for the product and settings for the Minimum Advertised Price and Strikethrough Pricing features. The price field must be supplied before an offer is published, but a seller may create an offer without supplying a price initially. The Minimum Advertised Price feature is only available on the US site. Strikethrough Pricing is available on the US, eBay Motors, UK, Germany, Canada (English and French), France, Italy, and Spain sites.
		/// </summary>
		public PricingSummary PricingSummary { get; set; }
		
		/// <summary>
		/// This field is only applicable and set if the seller wishes to set a restriction on the purchase quantity per seller. If this field is set by the seller for the offer, then each distinct buyer may purchase up to, but not exceeding the quantity specified for this field. So, if this field's value is 5, each buyer may purchase between one to five of these products, and the purchases can occur in one multiple-quantity purchase, or over multiple transactions. If a buyer attempts to purchase one or more of these products, and the cumulative quantity will take the buyer beyond the quantity limit, that buyer will be blocked from that purchase. If this field currently exists for an unpublished or published offer, it should be provided again in an updateOffer call, even if the value is not changing.
		/// </summary>
		public int QuantityLimitPerBuyer { get; set; }
		
		/// <summary>
		/// This container is used if the seller would like to place the inventory item into one or two store categories that the seller has set up for their eBay store. The string value(s) passed in to this container will be the full path(s) to the store categories, as shown below: &quot;storeCategoryNames&quot;: [  &quot;/Fashion/Men/Shirts&quot;,  &quot;/Fashion/Men/Accessories&quot; ], If this field currently exists for an unpublished or published offer, it should be provided again in an updateOffer call, even if the eBay categories are not changing.
		/// </summary>
		public string[] StoreCategoryNames { get; set; }
		
		/// <summary>
		/// This type is used to enable the use of a sales tax table, to pass in a tax exception category code, or to specify a VAT percentage.
		/// </summary>
		public Tax Tax { get; set; }
	}
	
	/// <summary>
	/// This type provides details of an offer, and is used by the base request payload of the createOffer and bulkCreateOffer methods.
	/// </summary>
	public class EbayOfferDetailsWithKeys
	{
		
		/// <summary>
		/// This integer value sets the quantity of the inventory item (specified by the sku value) that will be available for purchase by buyers shopping on the eBay site specified in the marketplaceId field. Quantity must be set to 1 or more in order for the inventory item to be purchasable, but this field is not necessarily required, even for published offers, if the general quantity of the inventory item has already been set in the inventory item record.
		/// </summary>
		public int AvailableQuantity { get; set; }
		
		/// <summary>
		/// The unique identifier of the eBay category that the inventory item will be listed under. This field is not immediately required upon creating an offer, but will be required before publishing the offer. Sellers can use the getCategorySuggestions method of the Taxonomy API or the GetSuggestedCategories call of the Trading API to retrieve suggested category ID values. The seller passes in a query string like &quot;iPhone 6&quot;, and category ID values for suggested categories are returned in the response.
		/// </summary>
		public string CategoryId { get; set; }
		
		/// <summary>
		/// This type is used to identify the charitable organization associated with the listing, and the percentage of the sale proceeds that the charitable organization will receive for each sale generated by the listing. In order to receive a percentage of the sales proceeds, the charitable organization must be registered with the PayPal Giving Fund, which is a partner of eBay for Charity.
		/// </summary>
		public Charity Charity { get; set; }
		
		/// <summary>
		/// This enumerated value indicates the listing format of the offer. Currently, the only supported value for this field is FIXED_PRICE, as the Inventory API only supports fixed-price listings at this time. For implementation help, refer to <a href='https://developer.ebay.com/devzone/rest/api-ref/inventory/types/FormatTypeEnum.html'>eBay API documentation</a>
		/// </summary>
		public string Format { get; set; }
		
		/// <summary>
		/// The text in this field is (published offers), or will become (unpublished offers) the description of the eBay listing. This field is not immediately required for an unpublished offer, but will be required before publishing the offer. Note that if the listingDescription field was omitted in the createOffer call for the offer, the offer entity should have picked up the text provided in the product.description field of the inventory item record, or if the inventory item is part of a group, the offer entity should have picked up the text provided in the description field of the inventory item group record. HTML tags and markup can be used in listing descriptions, but each character counts toward the max length limit. Note: To ensure that their short listing description is optimized when viewed on mobile devices, sellers should strongly consider using eBay's View Item description summary feature when listing their items. Keep in mind that the 'short' listing description is what prospective buyers first see when they view the listing on a mobile device. The 'full' listing description is also available to mobile users when they click on the short listing description, but the full description is not automatically optimized for viewing in mobile devices, and many users won't even drill down to the full description. Using HTML div and span tag attributes, this feature allows sellers to customize and fully control the short listing description that is displayed to prospective buyers when viewing the listing on a mobile device. The short listing description on mobile devices is limited to 800 characters, and whenever the full listing description (provided in this field, in UI, or seller tool) exceeds this limit, eBay uses a special algorithm to derive the best possible short listing description within the 800-character limit. However, due to some short listing description content being removed, it is definitely not ideal for the seller, and could lead to a bad buyer experience and possibly to a Significantly not as described (SNAD) case, since the buyer may not get complete details on the item when viewing the short listing description. See the eBay help page for more details on using the HTML div and span tags. Max length: 500000 (which includes HTML markup/tags)
		/// </summary>
		public string ListingDescription { get; set; }
		
		/// <summary>
		/// Note: This field is not necessary (and has no effect) since 'GTC' (Good 'til Cancelled) is the only supported listing duration, and the listingDuration value gets set to GTC by default. This field indicates the number of days that the seller wants the listing to be active. 'GTC' listings are automatically renewed each calendar month until the seller decides to end the listing. For implementation help, refer to <a href='https://developer.ebay.com/devzone/rest/api-ref/inventory/types/ListingDurationEnum.html'>eBay API documentation</a>
		/// </summary>
		public string ListingDuration { get; set; }
		
		/// <summary>
		/// This type is used to identify the payment, return, and fulfillment listing policies that will be, or are associated with the listing. Every published offer must have a payment, return, and fulfillment listing policy associated with it. This type is also used to override the shipping costs of one or more shipping service options that are associated with the fulfillment policy, to enable eBay Plus eligibility for a listing, or to enable the Best Offer feature on the listing.
		/// </summary>
		public ListingPolicies ListingPolicies { get; set; }
		
		/// <summary>
		/// This field is only applicable if the listing is a lot listing. A lot listing is a listing that has multiple quantity of the same product. An example would be a set of four identical car tires. The integer value passed into this field is the number of identical items being sold through the lot listing.
		/// </summary>
		public int LotSize { get; set; }
		
		/// <summary>
		/// This enumeration value is the unique identifier of the eBay site for which the offer will be made available. See MarketplaceEnum for the list of supported enumeration values. This field is required. For implementation help, refer to <a href='https://developer.ebay.com/devzone/rest/api-ref/inventory/types/MarketplaceEnum.html'>eBay API documentation</a>
		/// </summary>
		public string MarketplaceId { get; set; }
		
		/// <summary>
		/// The unique identifier of a merchant's inventory location (where the inventory item in the offer is located). A merchantLocationKey value is established when the merchant creates an inventory location using the createInventoryLocation call. To get more information about inventory locations, the getInventoryLocation call can be used. This field is not initially required upon first creating an offer, but will become required before an offer can be published. Max length: 36
		/// </summary>
		public string MerchantLocationKey { get; set; }
		
		/// <summary>
		/// This type is used to specify the listing price for the product and settings for the Minimum Advertised Price and Strikethrough Pricing features. The price field must be supplied before an offer is published, but a seller may create an offer without supplying a price initially. The Minimum Advertised Price feature is only available on the US site. Strikethrough Pricing is available on the US, eBay Motors, UK, Germany, Canada (English and French), France, Italy, and Spain sites.
		/// </summary>
		public PricingSummary PricingSummary { get; set; }
		
		/// <summary>
		/// This field is only applicable and set if the seller wishes to set a restriction on the purchase quantity per seller. If this field is set by the seller for the offer, then each distinct buyer may purchase up to, but not exceed the quantity specified for this field. So, if this field's value is 5, each buyer may purchase between one to five of these products, and the purchases can occur in one multiple-quantity purchase, or over multiple transactions. If a buyer attempts to purchase one or more of these products, and the cumulative quantity will take the buyer beyond the quantity limit, that buyer will be blocked from that purchase.
		/// </summary>
		public int QuantityLimitPerBuyer { get; set; }
		
		/// <summary>
		/// This container is used if the seller would like to place the inventory item into one or two eBay store categories that the seller has set up for their eBay store. The string value(s) passed in to this container will be the full path(s) to the eBay store categories, as shown below: &quot;storeCategoryNames&quot;: [  &quot;/Fashion/Men/Shirts&quot;,  &quot;/Fashion/Men/Accessories&quot; ],
		/// </summary>
		public string[] StoreCategoryNames { get; set; }
		
		/// <summary>
		/// This is the seller-defined SKU value of the product that will be listed on the eBay site (specified in the marketplaceId field). Only one offer (in unpublished or published state) may exist for each sku/marketplaceId/format combination. This field is required. Max Length: 50
		/// </summary>
		public string Sku { get; set; }
		
		/// <summary>
		/// This type is used to enable the use of a sales tax table, to pass in a tax exception category code, or to specify a VAT percentage.
		/// </summary>
		public Tax Tax { get; set; }
	}
	
	/// <summary>
	/// This type is used to express detailed information on errors and warnings that may occur with a call request.
	/// </summary>
	public class Error
	{
		
		/// <summary>
		/// This string value indicates the error category. There are three categories of errors: request errors, application errors, and system errors.
		/// </summary>
		public string Category { get; set; }
		
		/// <summary>
		/// The name of the domain in which the error or warning occurred.
		/// </summary>
		public string Domain { get; set; }
		
		/// <summary>
		/// A unique code that identifies the particular error or warning that occurred. Your application can use error codes as identifiers in your customized error-handling algorithms.
		/// </summary>
		public int ErrorId { get; set; }
		
		/// <summary>
		/// An array of one or more reference IDs which identify the specific request element(s) most closely associated to the error or warning, if any.
		/// </summary>
		public string[] InputRefIds { get; set; }
		
		/// <summary>
		/// A detailed description of the condition that caused the error or warning, and information on what to do to correct the problem.
		/// </summary>
		public string LongMessage { get; set; }
		
		/// <summary>
		/// A description of the condition that caused the error or warning.
		/// </summary>
		public string Message { get; set; }
		
		/// <summary>
		/// An array of one or more reference IDs which identify the specific response element(s) most closely associated to the error or warning, if any.
		/// </summary>
		public string[] OutputRefIds { get; set; }
		
		/// <summary>
		/// Various warning and error messages return one or more variables that contain contextual information about the error or waring. This is often the field or value that triggered the error or warning.
		/// </summary>
		public ErrorParameter[] Parameters { get; set; }
		
		/// <summary>
		/// The name of the subdomain in which the error or warning occurred.
		/// </summary>
		public string Subdomain { get; set; }
	}
	
	/// <summary>
	/// This type is used to indicate the parameter field/value that caused an issue with the call request.
	/// </summary>
	public class ErrorParameter
	{
		
		/// <summary>
		/// This type contains the name and value of an input parameter that contributed to a specific error or warning condition.
		/// </summary>
		public string Name { get; set; }
		
		/// <summary>
		/// This is the actual value that was passed in for the element specified in the name field.
		/// </summary>
		public string Value { get; set; }
	}
	
	/// <summary>
	/// This type is used to express expected listing fees that the seller may incur for one or more unpublished offers, as well as any eBay-related promotional discounts being applied toward a specific fee. These fees are the expected cumulative fees per eBay marketplace (which is indicated in the marketplaceId field).
	/// </summary>
	public class Fee
	{
		
		/// <summary>
		/// This type is used to express a dollar value and the applicable currency.
		/// </summary>
		public Amount Amount { get; set; }
		
		/// <summary>
		/// The value returned in this field indicates the type of listing fee that the seller may incur if one or more unpublished offers (offers are specified in the call request) are published on the marketplace specified in the marketplaceId field. Applicable listing fees will often include things such as InsertionFee or SubtitleFee, but many fee types will get returned even when they are 0.0. See the Standard selling fees help page for more information on listing fees.
		/// </summary>
		public string FeeType { get; set; }
		
		/// <summary>
		/// This type is used to express a dollar value and the applicable currency.
		/// </summary>
		public Amount PromotionalDiscount { get; set; }
	}
	
	/// <summary>
	/// This type is used to display the expected listing fees for each unpublished offer specified in the request of the getListingFees call.
	/// </summary>
	public class FeeSummary
	{
		
		/// <summary>
		/// This container is an array of listing fees that can be expected to be applied to an offer on the specified eBay marketplace (marketplaceId value). Many fee types will get returned even when they are 0.0. See the Standard selling fees help page for more information on listing fees.
		/// </summary>
		public Fee[] Fees { get; set; }
		
		/// <summary>
		/// This is the unique identifier of the eBay site for which listing fees for the offer are applicable. For implementation help, refer to <a href='https://developer.ebay.com/devzone/rest/api-ref/inventory/types/MarketplaceEnum.html'>eBay API documentation</a>
		/// </summary>
		public string MarketplaceId { get; set; }
		
		/// <summary>
		/// This container will contain an array of errors and/or warnings when a call is made, and errors and/or warnings occur.
		/// </summary>
		public Error[] Warnings { get; set; }
	}
	
	/// <summary>
	/// This type is used by the base response payload for the getListingFees call.
	/// </summary>
	public class FeesSummaryResponse
	{
		
		/// <summary>
		/// This container consists of an array of one or more listing fees that the seller can expect to pay for unpublished offers specified in the call request. Many fee types will get returned even when they are 0.0.
		/// </summary>
		public FeeSummary[] FeeSummaries { get; set; }
	}
	
	/// <summary>
	/// This type is used to express the Global Positioning System (GPS) latitude and longitude coordinates of an inventory location.
	/// </summary>
	public class GeoCoordinates
	{
		
		/// <summary>
		/// The latitude (North-South) component of the geographic coordinate. This field is required if a geoCoordinates container is used. This field is returned if geographical coordinates are set for the inventory location.
		/// </summary>
		public float Latitude { get; set; }
		
		/// <summary>
		/// The longitude (East-West) component of the geographic coordinate. This field is required if a geoCoordinates container is used. This field is returned if geographical coordinates are set for the inventory location.
		/// </summary>
		public float Longitude { get; set; }
	}
	
	/// <summary>
	/// The seller-defined Stock-Keeping Unit (SKU) of each inventory item that the user wants to retrieve is passed in the request of the bulkGetInventoryItem method.
	/// </summary>
	public class GetInventoryItem
	{
		
		/// <summary>
		/// An array of SKU values are passed in under the sku container to retrieve up to 25 inventory item records.
		/// </summary>
		public string Sku { get; set; }
	}
	
	/// <summary>
	/// This type is used by the response of the bulkGetInventoryItem method to give the status of each inventory item record that the user tried to retrieve.
	/// </summary>
	public class GetInventoryItemResponse
	{
		
		/// <summary>
		/// This container will be returned if there were one or more errors associated with retrieving the inventory item record.
		/// </summary>
		public Error[] Errors { get; set; }
		
		/// <summary>
		/// This type is used to provide details about each retrieved inventory item record.
		/// </summary>
		public InventoryItemWithSkuLocaleGroupKeys InventoryItem { get; set; }
		
		/// <summary>
		/// The seller-defined Stock-Keeping Unit (SKU) of the inventory item. The seller should have a unique SKU value for every product that they sell.
		/// </summary>
		public string Sku { get; set; }
		
		/// <summary>
		/// The HTTP status code returned in this field indicates the success or failure of retrieving the inventory item record for the inventory item specified in the sku field. See the HTTP status codes table to see which each status code indicates.
		/// </summary>
		public int StatusCode { get; set; }
		
		/// <summary>
		/// This container will be returned if there were one or more warnings associated with retrieving the inventory item record.
		/// </summary>
		public Error[] Warnings { get; set; }
	}
	
	/// <summary>
	/// This type is used by the intervals container to define the opening and closing times of a store's working day. Local time (in Military format) is used, with the following format: hh:mm:ss.
	/// </summary>
	public class Interval
	{
		
		/// <summary>
		/// The close value is actually the time that the store closes. Local time (in Military format) is used. So, if a store closed at 8 PM local time, the close time would look like the following: 20:00:00. This field is conditionally required if the intervals container is used to specify working hours or special hours for a store. This field is returned if set for the store location.
		/// </summary>
		public string Close { get; set; }
		
		/// <summary>
		/// The open value is actually the time that the store opens. Local time (in Military format) is used. So, if a store opens at 9 AM local time, the close time would look like the following: 09:00:00. This field is conditionally required if the intervals container is used to specify working hours or special hours for a store. This field is returned if set for the store location.
		/// </summary>
		public string Open { get; set; }
	}
	
	/// <summary>
	/// This type is used to provide detailed information about an inventory item.
	/// </summary>
	public class InventoryItem
	{
		
		/// <summary>
		/// This type is used to specify the quantity of the inventory item that is available for purchase if the item will be shipped to the buyer, and the quantity of the inventory item that is available for In-Store Pickup at one or more of the merchant's physical stores. In-Store Pickup is only available to large merchants selling on the US, UK, Germany, and Australia sites.
		/// </summary>
		public Availability Availability { get; set; }
		
		/// <summary>
		/// This enumeration value indicates the condition of the item. Supported item condition values will vary by eBay site and category. To see which item condition values that a particular eBay category supports, use the getItemConditionPolicies method of the Metadata API. This method returns condition ID values that map to the enumeration values defined in the ConditionEnum type. The Item condition ID and name values topic in the Selling Integration Guide has a table that maps condition ID values to ConditionEnum values. The getItemConditionPolicies call reference page has more information. A condition value is optional up until the seller is ready to publish an offer with the SKU, at which time it becomes required. Since the condition of an inventory item must be specified before being published in an offer, this field is always returned in the 'Get' calls for SKUs that are part of a published offer. If a SKU is not part of a published offer, this container will only be returned if set for the inventory item. For implementation help, refer to <a href='https://developer.ebay.com/devzone/rest/api-ref/inventory/types/ConditionEnum.html'>eBay API documentation</a>
		/// </summary>
		public string Condition { get; set; }
		
		/// <summary>
		/// This string field is used by the seller to more clearly describe the condition of a used inventory item, or an inventory item whose condition value is not NEW, LIKE_NEW, NEW_OTHER, or NEW_WITH_DEFECTS. The conditionDescription field is available for all eBay categories. If the conditionDescription field is used with an item in one of the new conditions (mentioned in previous paragraph), eBay will simply ignore this field if included, and eBay will return a warning message to the user. This field should only be used to further clarify the condition of the used item. It should not be used for branding, promotions, shipping, returns, payment or other information unrelated to the condition of the used item. Make sure that the condition value, condition description, listing description, and the item's pictures do not contradict one another. This field is not always required, but is required if an inventory item is being updated and a condition description already exists for that inventory item. This field is returned in the getInventoryItem and getInventoryItems calls if a condition description was provided for a used inventory item. Max Length: 1000.
		/// </summary>
		public string ConditionDescription { get; set; }
		
		/// <summary>
		/// This type is used to indicate the package type, weight, and dimensions of the shipping package. Package weight and dimensions are required when calculated shipping rates are used, and weight alone is required when flat-rate shipping is used, but with a weight surcharge. See the Calculated shipping help page for more information on calculated shipping.
		/// </summary>
		public PackageWeightAndSize PackageWeightAndSize { get; set; }
		
		/// <summary>
		/// This type is used to define the product details, such as a title, a product description, product aspects/item specifics, and links to images for the product. Optionally, in a createOrReplaceInventoryItem call, a seller can pass in an eBay Product Identifier (ePID) or a Global Trade Item Number (GTIN) value, such as an EAN, an ISBN, a UPC, to identify a product to be matched with a product in the eBay Catalog. The information in this type is also returned in the getInventoryItem, getInventoryItems, and bulkGetInventoryItem calls if defined.
		/// </summary>
		public Product Product { get; set; }
	}
	
	/// <summary>
	/// This type is used by the base request payload of the createOrReplaceInventoryItemGroup call and the base response payload of the getInventoryItemGroup call.
	/// </summary>
	public class InventoryItemGroup
	{
		
		/// <summary>
		/// This container consists of an array of aspects that are shared by all product variations within the inventory item group. Common aspects for the inventory item group are not immediately required upon creating an inventory item group, but these aspects will be required before the first offer of the group is published. Common aspects for a men's t-shirt might be pattern and sleeve length. See the example below to get an idea of the JSON syntax that is used to specify common aspects: &quot;aspects&quot;: {  &quot;pattern&quot;: [&quot;solid&quot;],  &quot;sleeves&quot;: [&quot;short&quot;]  }This container is always returned if one or more offers associated with the inventory item group have been published, and is only returned if set for an inventory item group if that group has yet to have any offers published.
		/// </summary>
		public string[] Aspects { get; set; }
		
		/// <summary>
		/// The description of the inventory item group. This description should fully describe the product and the variations of the product that are available in the inventory item group, since this description will ultimately become the listing description once the first offer of the group is published. This field is not initially required when first creating an inventory item group, but will be required before the first offer of the group is published. Note: Since this description will ultimately become the listing description in a multiple-variation listing, the seller should omit the listingDescription field when creating the offers for each variation. If they include the listingDescription field for the individual offer(s) in an item group, the text in that field for a published offer will overwrite the text provided in this description field for the inventory item group. HTML tags and markup can be used in this field, but each character counts toward the max length limit. Note: To ensure that their short listing description is optimized when viewed on mobile devices, sellers should strongly consider using eBay's View Item description summary feature when listing their items. Keep in mind that the 'short' listing description is what prospective buyers first see when they view the listing on a mobile device. The 'full' listing description is also available to mobile users when they click on the short listing description, but the full description is not automatically optimized for viewing in mobile devices, and many users won't even drill down to the full description. Using HTML div and span tag attributes, this feature allows sellers to customize and fully control the short listing description that is displayed to prospective buyers when viewing the listing on a mobile device. The short listing description on mobile devices is limited to 800 characters, and whenever the full listing description (provided in this field, in UI, or seller tool) exceeds this limit, eBay uses a special algorithm to derive the best possible short listing description within the 800-character limit. However, due to some short listing description content being removed, it is definitely not ideal for the seller, and could lead to a bad buyer experience and possibly to a Significantly not as described (SNAD) case, since the buyer may not get complete details on the item when viewing the short listing description. See the eBay help page for more details on using the HTML div and span tags. This field is always returned if one or more offers associated with the inventory item group have been published, and is only returned if set for an inventory item group if that group has yet to have any offers published. Max Length: 500000 (which includes HTML markup/tags)
		/// </summary>
		public string Description { get; set; }
		
		/// <summary>
		/// An array of one or more links to images for the inventory item group. URLs must use the &quot;HTTPS&quot; protocol. Images can be self-hosted by the seller, or sellers can use the UploadSiteHostedPictures call of the Trading API to upload images to an eBay Picture Server. If successful, the response of the UploadSiteHostedPictures call will contain a full URL to the image on an eBay Picture Server. This is the URL that will be passed in through the imageUrls array. Before any offer can be published, at least one image must exist for the offer. Links to images can either be passed in through this imageUrls container, or they can be passed in through the product.imageUrls container when creating each inventory item in the group. If the variesBy.aspectsImageVariesBy field is used to specify the main product aspect where the variations vary, the links to the images must be passed in through this imageUrls container, and there should be a picture for each variation. So, if the variesBy.aspectsImageVariesBy field is set to Color, a link should be included to an image demonstrating each available color in the group. Most eBay sites support up to 12 pictures free of charge, and eBay Motors listings can have up to 24 pictures. This container will always be returned for an inventory item group that has at least one published offer since a published offer will always have at least one picture, but this container will only be returned if defined for inventory item groups that have yet to have any published offers.
		/// </summary>
		public string[] ImageUrls { get; set; }
		
		/// <summary>
		/// This is the unique identifier of the inventory item group. This identifier is created by the seller when an inventory item group is created. This field is only applicable to the getInventoryItemGroup call and not to the createOrReplaceInventoryItemGroup call. In the createOrReplaceInventoryItemGroup call, the inventoryItemGroupKey value is passed into the end of the call URI instead.
		/// </summary>
		public string InventoryItemGroupKey { get; set; }
		
		/// <summary>
		/// A subtitle is an optional listing feature that allows the seller to provide more information about the product, possibly including keywords that may assist with search results. An additional listing fee will be charged to the seller if a subtitle is used. For more information on using listing subtitles on the US site, see the Adding a subtitle to your listings help page. Note: Since this subtitle will ultimately become the subtitle in a multiple-variation listing, the seller should not include the subtitle field when creating the inventory items that are members of the group. If they do include the subtitle field in an inventory item record, the text in that field will overwrite the text provided in this subtitle field for each inventory item in the group that is published. This field will only be returned if set for an inventory item. Max Length: 55
		/// </summary>
		public string Subtitle { get; set; }
		
		/// <summary>
		/// The title of the inventory item group. This title will ultimately become the listing title once the first offer of the group is published. This field is not initially required when first creating an inventory item group, but will be required before the first offer of the group is published. Note: Since this title will ultimately become the listing title in a multiple-variation listing, the seller should omit the title field when creating the inventory items that are members of the group. If they do include the title field in an inventory item record, the text in that field will overwrite the text provided in this title field for each inventory item in the group that is published. This field is always returned if one or more offers associated with the inventory item group have been published, and is only returned if set for an inventory item group if that group has yet to have any offers published. Max Length: 80
		/// </summary>
		public string Title { get; set; }
		
		/// <summary>
		/// This required container is used to assign individual inventory items to the inventory item group. Multiple SKU values are passed in to this container. If updating an existing inventory item group, the seller should make sure that all member SKU values are passed in, as long as the seller wants that SKU to remain in the group. It is also possible to add or remove SKUs with a createOrReplaceInventoryItemGroup call. If the seller wants to remove a SKU from the group, that seller will just omit that SKU value from this container to remove that inventory item/SKU from the inventory item group and any published, multiple-variation listing. However, a variation cannot be removed from the group if that variation has one or more sales for that listing. A workaround for this is to set that variation's quantity to 0 and it will be 'grayed out' in the View Item page. This container is always returned.
		/// </summary>
		public string[] VariantSKUs { get; set; }
		
		/// <summary>
		/// This type is used to specify the product aspect(s) where individual items of the group vary, as well as a list of the available variations of those aspects.
		/// </summary>
		public VariesBy VariesBy { get; set; }
	}
	
	/// <summary>
	/// This type is used by the inventoryItems container that is returned in the response of the bulkMigrateListing call. Up to five sku/offerId pairs may be returned under the inventoryItems container, dependent on how many eBay listings the seller is attempting to migrate to the inventory model.
	/// </summary>
	public class InventoryItemListing
	{
		
		/// <summary>
		/// Upon a successful migration of a listing, eBay auto-generates this unique identifier, and this offer ID value will be used to retrieve and manage the newly-created offer object. This value will only be generated and returned if the eBay listing is migrated successfully.
		/// </summary>
		public string OfferId { get; set; }
		
		/// <summary>
		/// This is the seller-defined SKU value associated with the item(s) in a listing. This same SKU value will be used to retrieve and manage the newly-created inventory item object if the listing migration is successful. This SKU value will get returned even if the migration is not successful.
		/// </summary>
		public string Sku { get; set; }
	}
	
	/// <summary>
	/// This type is used by the response of the bulkCreateOrReplaceInventoryItem method to indicate the success or failure of creating and/or updating each inventory item record. The sku value in this type identifies each inventory item record.
	/// </summary>
	public class InventoryItemResponse
	{
		
		/// <summary>
		/// This container will be returned if there were one or more errors associated with the creation or update to the inventory item record.
		/// </summary>
		public Error[] Errors { get; set; }
		
		/// <summary>
		/// This field is for future use only. For implementation help, refer to <a href='https://developer.ebay.com/devzone/rest/api-ref/inventory/types/LocaleEnum.html'>eBay API documentation</a>
		/// </summary>
		public string Locale { get; set; }
		
		/// <summary>
		/// The seller-defined Stock-Keeping Unit (SKU) of the inventory item. The seller should have a unique SKU value for every product that they sell.
		/// </summary>
		public string Sku { get; set; }
		
		/// <summary>
		/// The HTTP status code returned in this field indicates the success or failure of creating or updating the inventory item record for the inventory item indicated in the sku field. See the HTTP status codes table to see which each status code indicates.
		/// </summary>
		public int StatusCode { get; set; }
		
		/// <summary>
		/// This container will be returned if there were one or more warnings associated with the creation or update to the inventory item record.
		/// </summary>
		public Error[] Warnings { get; set; }
	}
	
	/// <summary>
	/// This type is used to define/modify each inventory item record that is being created and/or updated with the bulkCreateOrReplaceInventoryItem method. Up to 25 inventory item records can be created and/or updated with one call.
	/// </summary>
	public class InventoryItemWithSkuLocale
	{
		
		/// <summary>
		/// This type is used to specify the quantity of the inventory item that is available for purchase if the item will be shipped to the buyer, and the quantity of the inventory item that is available for In-Store Pickup at one or more of the merchant's physical stores. In-Store Pickup is only available to large merchants selling on the US, UK, Germany, and Australia sites.
		/// </summary>
		public Availability Availability { get; set; }
		
		/// <summary>
		/// This enumeration value indicates the condition of the item. Supported item condition values will vary by eBay site and category. To see which item condition values that a particular eBay category supports, use the getItemConditionPolicies method of the Metadata API. This method returns condition ID values that map to the enumeration values defined in the ConditionEnum type. The Item condition ID and name values topic in the Selling Integration Guide has a table that maps condition ID values to ConditionEnum values. The getItemConditionPolicies call reference page has more information. A condition value is optional up until the seller is ready to publish an offer with the SKU, at which time it becomes required. Since the condition of an inventory item must be specified before being published in an offer, this field is always returned in the 'Get' calls for SKUs that are part of a published offer. If a SKU is not part of a published offer, this container will only be returned if set for the inventory item. For implementation help, refer to <a href='https://developer.ebay.com/devzone/rest/api-ref/inventory/types/ConditionEnum.html'>eBay API documentation</a>
		/// </summary>
		public string Condition { get; set; }
		
		/// <summary>
		/// This string field is used by the seller to more clearly describe the condition of a used inventory item, or an inventory item whose condition value is not NEW, LIKE_NEW, NEW_OTHER, or NEW_WITH_DEFECTS. The conditionDescription field is available for all eBay categories. If the conditionDescription field is used with an item in one of the new conditions (mentioned in previous paragraph), eBay will simply ignore this field if included, and eBay will return a warning message to the user. This field should only be used to further clarify the condition of the used item. It should not be used for branding, promotions, shipping, returns, payment or other information unrelated to the condition of the used item. Make sure that the condition value, condition description, listing description, and the item's pictures do not contradict one another. This field is not always required, but is required if an inventory item is being updated and a condition description already exists for that inventory item. This field is returned in the getInventoryItem, bulkGetInventoryItem, and getInventoryItems calls if a condition description was provided for a used inventory item. Max Length: 1000.
		/// </summary>
		public string ConditionDescription { get; set; }
		
		/// <summary>
		/// This field is for future use only. For implementation help, refer to <a href='https://developer.ebay.com/devzone/rest/api-ref/inventory/types/LocaleEnum.html'>eBay API documentation</a>
		/// </summary>
		public string Locale { get; set; }
		
		/// <summary>
		/// This type is used to indicate the package type, weight, and dimensions of the shipping package. Package weight and dimensions are required when calculated shipping rates are used, and weight alone is required when flat-rate shipping is used, but with a weight surcharge. See the Calculated shipping help page for more information on calculated shipping.
		/// </summary>
		public PackageWeightAndSize PackageWeightAndSize { get; set; }
		
		/// <summary>
		/// This type is used to define the product details, such as a title, a product description, product aspects/item specifics, and links to images for the product. Optionally, in a createOrReplaceInventoryItem call, a seller can pass in an eBay Product Identifier (ePID) or a Global Trade Item Number (GTIN) value, such as an EAN, an ISBN, a UPC, to identify a product to be matched with a product in the eBay Catalog. The information in this type is also returned in the getInventoryItem, getInventoryItems, and bulkGetInventoryItem calls if defined.
		/// </summary>
		public Product Product { get; set; }
		
		/// <summary>
		/// This is the seller-defined SKU value of the product that will be listed on the eBay site (specified in the marketplaceId field). Only one offer (in unpublished or published state) may exist for each sku/marketplaceId/format combination. This field is required. Max Length: 50
		/// </summary>
		public string Sku { get; set; }
	}
	
	/// <summary>
	/// This type is used to provide details about each retrieved inventory item record.
	/// </summary>
	public class InventoryItemWithSkuLocaleGroupKeys
	{
		
		/// <summary>
		/// This type is used to specify the quantity of the inventory item that is available for purchase if the item will be shipped to the buyer, and the quantity of the inventory item that is available for In-Store Pickup at one or more of the merchant's physical stores. In-Store Pickup is only available to large merchants selling on the US, UK, Germany, and Australia sites.
		/// </summary>
		public Availability Availability { get; set; }
		
		/// <summary>
		/// This enumeration value indicates the condition of the item. Supported item condition values will vary by eBay site and category. To see which item condition values that a particular eBay category supports, use the getItemConditionPolicies method of the Metadata API. This method returns condition ID values that map to the enumeration values defined in the ConditionEnum type. The Item condition ID and name values topic in the Selling Integration Guide has a table that maps condition ID values to ConditionEnum values. The getItemConditionPolicies call reference page has more information. A condition value is optional up until the seller is ready to publish an offer with the SKU, at which time it becomes required. Since the condition of an inventory item must be specified before being published in an offer, this field is always returned in the 'Get' calls for SKUs that are part of a published offer. If a SKU is not part of a published offer, this container will only be returned if set for the inventory item. For implementation help, refer to <a href='https://developer.ebay.com/devzone/rest/api-ref/inventory/types/ConditionEnum.html'>eBay API documentation</a>
		/// </summary>
		public string Condition { get; set; }
		
		/// <summary>
		/// This string field is used by the seller to more clearly describe the condition of used items, or items that are not 'Brand New', 'New with tags', or 'New in box'. The ConditionDescription field is available for all categories. If the ConditionDescription field is used with an item in a new condition (Condition IDs 1000-1499), eBay will simply ignore this field if included, and eBay will return a warning message to the user. This field should only be used to further clarify the condition of the used item. It should not be used for branding, promotions, shipping, returns, payment or other information unrelated to the condition of the item. Make sure that the condition value, condition description, listing description, and the item's pictures do not contradict one another.Max length: 1000.
		/// </summary>
		public string ConditionDescription { get; set; }
		
		/// <summary>
		/// This array is returned if the inventory item is associated with any inventory item group(s). The value(s) returned in this array are the unique identifier(s) of the inventory item's variation in a multiple-variation listing. This array is not returned if the inventory item is not associated with any inventory item groups.
		/// </summary>
		public string[] InventoryItemGroupKeys { get; set; }
		
		/// <summary>
		/// This field is for future use only. For implementation help, refer to <a href='https://developer.ebay.com/devzone/rest/api-ref/inventory/types/LocaleEnum.html'>eBay API documentation</a>
		/// </summary>
		public string Locale { get; set; }
		
		/// <summary>
		/// This type is used to indicate the package type, weight, and dimensions of the shipping package. Package weight and dimensions are required when calculated shipping rates are used, and weight alone is required when flat-rate shipping is used, but with a weight surcharge. See the Calculated shipping help page for more information on calculated shipping.
		/// </summary>
		public PackageWeightAndSize PackageWeightAndSize { get; set; }
		
		/// <summary>
		/// This type is used to define the product details, such as a title, a product description, product aspects/item specifics, and links to images for the product. Optionally, in a createOrReplaceInventoryItem call, a seller can pass in an eBay Product Identifier (ePID) or a Global Trade Item Number (GTIN) value, such as an EAN, an ISBN, a UPC, to identify a product to be matched with a product in the eBay Catalog. The information in this type is also returned in the getInventoryItem, getInventoryItems, and bulkGetInventoryItem calls if defined.
		/// </summary>
		public Product Product { get; set; }
		
		/// <summary>
		/// The seller-defined Stock-Keeping Unit (SKU) of the inventory item. The seller should have a unique SKU value for every product that they sell.
		/// </summary>
		public string Sku { get; set; }
	}
	
	public class InventoryItemWithSkuLocaleGroupid
	{
		
		/// <summary>
		/// This type is used to specify the quantity of the inventory item that is available for purchase if the item will be shipped to the buyer, and the quantity of the inventory item that is available for In-Store Pickup at one or more of the merchant's physical stores. In-Store Pickup is only available to large merchants selling on the US, UK, Germany, and Australia sites.
		/// </summary>
		public Availability Availability { get; set; }
		
		/// <summary>
		/// This enumeration value indicates the condition of the item. Supported item condition values will vary by eBay site and category. To see which item condition values that a particular eBay category supports, use the getItemConditionPolicies method of the Metadata API. This method returns condition ID values that map to the enumeration values defined in the ConditionEnum type. The Item condition ID and name values topic in the Selling Integration Guide has a table that maps condition ID values to ConditionEnum values. The getItemConditionPolicies call reference page has more information. Since the condition of an inventory item must be specified before being published in an offer, this field is always returned in the 'Get' calls for SKUs that are part of a published offer. If a SKU is not part of a published offer, this container will only be returned if set for the inventory item. For implementation help, refer to <a href='https://developer.ebay.com/devzone/rest/api-ref/inventory/types/ConditionEnum.html'>eBay API documentation</a>
		/// </summary>
		public string Condition { get; set; }
		
		/// <summary>
		/// This string field is used by the seller to more clearly describe the condition of used items, or items that are not 'Brand New', 'New with tags', or 'New in box'. The ConditionDescription field is available for all categories. If the ConditionDescription field is used with an item in a new condition (Condition IDs 1000-1499), eBay will simply ignore this field if included, and eBay will return a warning message to the user. This field should only be used to further clarify the condition of the used item. It should not be used for branding, promotions, shipping, returns, payment or other information unrelated to the condition of the item. Make sure that the condition value, condition description, listing description, and the item's pictures do not contradict one another. Max length/: 1000.
		/// </summary>
		public string ConditionDescription { get; set; }
		
		/// <summary>
		/// This array is returned if the inventory item is associated with any inventory item group(s). The value(s) returned in this array are the unique identifier(s) of the inventory item group(s). This array is not returned if the inventory item is not associated with any inventory item groups.
		/// </summary>
		public string[] GroupIds { get; set; }
		
		/// <summary>
		/// This array is returned if the inventory item is associated with any inventory item group(s). The value(s) returned in this array are the unique identifier(s) of the inventory item's variation in a multiple-variation listing. This array is not returned if the inventory item is not associated with any inventory item groups.
		/// </summary>
		public string[] InventoryItemGroupKeys { get; set; }
		
		/// <summary>
		/// This field is for future use only. For implementation help, refer to <a href='https://developer.ebay.com/devzone/rest/api-ref/inventory/types/LocaleEnum.html'>eBay API documentation</a>
		/// </summary>
		public string Locale { get; set; }
		
		/// <summary>
		/// This type is used to indicate the package type, weight, and dimensions of the shipping package. Package weight and dimensions are required when calculated shipping rates are used, and weight alone is required when flat-rate shipping is used, but with a weight surcharge. See the Calculated shipping help page for more information on calculated shipping.
		/// </summary>
		public PackageWeightAndSize PackageWeightAndSize { get; set; }
		
		/// <summary>
		/// This type is used to define the product details, such as a title, a product description, product aspects/item specifics, and links to images for the product. Optionally, in a createOrReplaceInventoryItem call, a seller can pass in an eBay Product Identifier (ePID) or a Global Trade Item Number (GTIN) value, such as an EAN, an ISBN, a UPC, to identify a product to be matched with a product in the eBay Catalog. The information in this type is also returned in the getInventoryItem, getInventoryItems, and bulkGetInventoryItem calls if defined.
		/// </summary>
		public Product Product { get; set; }
		
		/// <summary>
		/// The seller-defined Stock-Keeping Unit (SKU) of the inventory item. The seller should have a unique SKU value for every product that they sell.
		/// </summary>
		public string Sku { get; set; }
	}
	
	/// <summary>
	/// This type is used by the base response payload of getInventoryItems call.
	/// </summary>
	public class InventoryItems
	{
		
		/// <summary>
		/// This is the URL to the current page of inventory items.
		/// </summary>
		public string Href { get; set; }
		
		/// <summary>
		/// This container is an array of one or more inventory items, with detailed information on each inventory item.
		/// </summary>
		public InventoryItemWithSkuLocaleGroupid[] InventoryItems1 { get; set; }
		
		/// <summary>
		/// This integer value is the number of inventory items that will be displayed on each results page.
		/// </summary>
		public int Limit { get; set; }
		
		/// <summary>
		/// This is the URL to the next page of inventory items. This field will only be returned if there are additional inventory items to view.
		/// </summary>
		public string Next { get; set; }
		
		/// <summary>
		/// This is the URL to the previous page of inventory items. This field will only be returned if there are previous inventory items to view.
		/// </summary>
		public string Prev { get; set; }
		
		/// <summary>
		/// This integer value indicates the total number of pages of results that are available. This number will depend on the total number of inventory items available for viewing, and on the limit value.
		/// </summary>
		public int Size { get; set; }
		
		/// <summary>
		/// This integer value is the total number of inventory items that exist for the seller's account. Based on this number and on the limit value, the seller may have to toggle through multiple pages to view all inventory items.
		/// </summary>
		public int Total { get; set; }
	}
	
	/// <summary>
	/// This type is used by the updateInventoryLocation call to update operating hours, special hours, phone number, and other minor details of an inventory location.
	/// </summary>
	public class InventoryLocation
	{
		
		/// <summary>
		/// This text field is used by the merchant to provide/update additional information about an inventory location. Whatever text is passed in this field will replace the current text string defined for this field. If the text will not change, the same text should be passed in once again. Max length: 256
		/// </summary>
		public string LocationAdditionalInformation { get; set; }
		
		/// <summary>
		/// This text field is generally used by the merchant to provide/update special pickup instructions for a store inventory location. Although this field is optional, it is recommended that merchants provide this field to create a pleasant and easy pickup experience for In-Store Pickup and Click and Collect orders. If this field is not included in the call request payload, eBay will use the default pickup instructions contained in the merchant's profile (if available). Whatever text is passed in this field will replace the current text string defined for this field. If the text will not change, the same text should be passed in once again. Max length: 1000
		/// </summary>
		public string LocationInstructions { get; set; }
		
		/// <summary>
		/// This text field is used by the merchant to provide/update the Website address (URL) associated with the inventory location. The URL that is passed in this field will replace any other URL that may be defined for this field. Max length: 512
		/// </summary>
		public string LocationWebUrl { get; set; }
		
		/// <summary>
		/// This text field is used by the merchant to update the name of the inventory location. This name should be a human-friendly name as it will be in In-Store Pickup and Click and Collect listings. A name is not required for warehouse inventory locations. For store inventory locations, this field is not immediately required, but will be required before an offer enabled with the In-Store Pickup or Click and Collect capability can be published. So, if the seller omitted this field in the createInventoryLocation call, it is required for an updateInventoryLocation call. The name that is passed in this field will replace any other name that may be defined for this field.
		/// </summary>
		public string Name { get; set; }
		
		/// <summary>
		/// This container is used to provide/update the regular operating hours for a store location during the days of the week. A dayOfWeekEnum field and an intervals container will be needed for each day of the week that the store location is open. Note that if operating hours are already set for an inventory location for a specific day of the week, whatever is set through an updateInventoryLocation call will override those existing hours.
		/// </summary>
		public OperatingHours[] OperatingHours { get; set; }
		
		/// <summary>
		/// This text field is used by the merchant to provide/update the phone number for the inventory location. The phone number that is passed in this field will replace any other phone number that may be defined for this field. Max length: 36
		/// </summary>
		public string Phone { get; set; }
		
		/// <summary>
		/// This container is used to provide/update the special operating hours for a store location on a specific date, such as a holiday. The special hours specified for the specific date will override the normal operating hours for that particular day of the week. If special hours have already been set up for an inventory location, specifying special hours through an updateInventoryLocation call will only add to the list, unless the date(s) used are the same special date(s) already set up, in which case, the special hours set up through the updateInventoryLocation call will override the existing special hours.
		/// </summary>
		public SpecialHours[] SpecialHours { get; set; }
	}
	
	/// <summary>
	/// This type is used by the createInventoryLocation call to provide details on the inventory location, including the location's name, physical address, operating hours, special hours, phone number and other details of an inventory location.
	/// </summary>
	public class InventoryLocationFull
	{
		
		/// <summary>
		/// This type is used by the createInventoryLocation call to provide an full or partial address of an inventory location.
		/// </summary>
		public LocationDetails Location { get; set; }
		
		/// <summary>
		/// This text field is used by the merchant to provide additional information about an inventory location. Max length: 256
		/// </summary>
		public string LocationAdditionalInformation { get; set; }
		
		/// <summary>
		/// This text field is generally used by the merchant to provide special pickup instructions for a store inventory location. Although this field is optional, it is recommended that merchants provide this field to create a pleasant and easy pickup experience for In-Store Pickup and Click and Collect orders. If this field is not included in the call request payload, eBay will use the default pickup instructions contained in the merchant's profile (if available).
		/// </summary>
		public string LocationInstructions { get; set; }
		
		/// <summary>
		/// This container is used to define the function of the inventory location. Typically, an inventory location will serve as a store or a warehouse, but in some cases, an inventory location may be both. If this container is omitted, the location type of the inventory location will default to WAREHOUSE. See StoreTypeEnum for the supported values. Default: WAREHOUSE
		/// </summary>
		public string[] LocationTypes { get; set; }
		
		/// <summary>
		/// This text field is used by the merchant to provide the Website address (URL) associated with the inventory location. Max length: 512
		/// </summary>
		public string LocationWebUrl { get; set; }
		
		/// <summary>
		/// This field is used to indicate whether the inventory location will be enabled (inventory can be loaded to location) or disabled (inventory can not be loaded to location). If this field is omitted, a successful createInventoryLocation call will automatically enable the inventory location. A merchant may want to create a new inventory location but leave it as disabled if the inventory location is not yet ready for active inventory. Once the inventory location is ready, the merchant can use the enableInventoryLocation call to enable an inventory location that is in a disabled state. See StatusEnum for the supported values. Default: ENABLED For implementation help, refer to <a href='https://developer.ebay.com/devzone/rest/api-ref/inventory/types/StatusEnum.html'>eBay API documentation</a>
		/// </summary>
		public string MerchantLocationStatus { get; set; }
		
		/// <summary>
		/// The name of the inventory location. This name should be a human-friendly name as it will be displayed in In-Store Pickup and Click and Collect listings. A name is not required for warehouse inventory locations. For store inventory locations, this field is not immediately required, but will be required before an offer enabled with the In-Store Pickup or Click and Collect capability can be published. So, if the seller omits this field in a createInventoryLocation call, it becomes required for an updateInventoryLocation call. Max length: 1000
		/// </summary>
		public string Name { get; set; }
		
		/// <summary>
		/// Although not technically required, this container is highly recommended to be used to specify operating hours for a store inventory location. This container is used to express the regular operating hours for a store location during each day of the week. A dayOfWeekEnum field and an intervals container will be needed for each day of the week that the store location is open.
		/// </summary>
		public OperatingHours[] OperatingHours { get; set; }
		
		/// <summary>
		/// Although not technically required, this field is highly recommended to be used to specify the phone number for a store inventory location. Max length: 36
		/// </summary>
		public string Phone { get; set; }
		
		/// <summary>
		/// This container is used to express the special operating hours for a store inventory location on a specific date, such as a holiday. The special hours specified for the specific date will override the normal operating hours for that particular day of the week.
		/// </summary>
		public SpecialHours[] SpecialHours { get; set; }
	}
	
	/// <summary>
	/// This type is used by the base response of the getInventoryLocation and getInventoryLocations calls. These responses provide details about inventory location(s) defined for the merchant's account.
	/// </summary>
	public class InventoryLocationResponse
	{
		
		/// <summary>
		/// A complex type that is used to provide the physical address of a location, and it geo-coordinates.
		/// </summary>
		public Location Location { get; set; }
		
		/// <summary>
		/// This text field provides additional information about an inventory location. This field is returned if it is set for the inventory location. Max length: 256
		/// </summary>
		public string LocationAdditionalInformation { get; set; }
		
		/// <summary>
		/// This text field is used by the merchant to provide special pickup instructions for the store location. This field can help create a pleasant and easy pickup experience for In-Store Pickup and Click and Collect orders. If this field was not set up through a createInventoryLocation or a updateInventoryLocation call, eBay will use the default pickup instructions contained in the merchant's profile. Max length: 1000
		/// </summary>
		public string LocationInstructions { get; set; }
		
		/// <summary>
		/// This container defines the function of the inventory location. Typically, an inventory location will serve as a store or a warehouse, but in some cases, an inventory location may be both. The location type of an inventory location defaults to WAREHOUSE if a location type is not specified when a merchant creates an inventory location.
		/// </summary>
		public string[] LocationTypes { get; set; }
		
		/// <summary>
		/// This text field shows the Website address (URL) associated with the inventory location. This field is returned if defined for the inventory location. Max length: 512
		/// </summary>
		public string LocationWebUrl { get; set; }
		
		/// <summary>
		/// The unique identifier of the inventory location. This identifier is set up by the merchant when the inventory location is first created with the createInventoryLocation call. Once this value is set for an inventory location, it cannot be modified. Max length: 36
		/// </summary>
		public string MerchantLocationKey { get; set; }
		
		/// <summary>
		/// This field indicates whether the inventory location is enabled (inventory can be loaded to location) or disabled (inventory can not be loaded to location). The merchant can use the enableInventoryLocation call to enable an inventory location in disabled status, or the disableInventoryLocation call to disable an inventory location in enabled status. For implementation help, refer to <a href='https://developer.ebay.com/devzone/rest/api-ref/inventory/types/StatusEnum.html'>eBay API documentation</a>
		/// </summary>
		public string MerchantLocationStatus { get; set; }
		
		/// <summary>
		/// The name of the inventory location. This name should be a human-friendly name as it will be displayed in In-Store Pickup and Click and Collect listings. For store inventory locations, this field is not required for the createInventoryLocation call, but a store inventory location must have a defined name value before an In-Store Pickup and Click and Collect enabled offer is published. So, if the seller omits this field in the createInventoryLocation call, it will have to be added later through a updateInventoryLocation call. Max length: 1000
		/// </summary>
		public string Name { get; set; }
		
		/// <summary>
		/// This container shows the regular operating hours for a store location during the days of the week. A dayOfWeekEnum field and an intervals container is shown for each day of the week that the store location is open.
		/// </summary>
		public OperatingHours[] OperatingHours { get; set; }
		
		/// <summary>
		/// The phone number for an inventory location. This field will typically only be set and returned for store locations. Max length: 36
		/// </summary>
		public string Phone { get; set; }
		
		/// <summary>
		/// This container shows the special operating hours for a store location on a specific date or dates.
		/// </summary>
		public SpecialHours[] SpecialHours { get; set; }
	}
	
	/// <summary>
	/// This type is used by the listing container in the getOffer and getOffers calls to provide the eBay listing ID, the listing status, and quantity sold for the offer. The listing container is only returned for published offers, and is not returned for unpublished offers.
	/// </summary>
	public class ListingDetails
	{
		
		/// <summary>
		/// The unique identifier of the eBay listing that is associated with the published offer.
		/// </summary>
		public string ListingId { get; set; }
		
		/// <summary>
		/// The enumeration value returned in this field indicates the status of the listing that is associated with the published offer. For implementation help, refer to <a href='https://developer.ebay.com/devzone/rest/api-ref/inventory/types/ListingStatusEnum.html'>eBay API documentation</a>
		/// </summary>
		public string ListingStatus { get; set; }
		
		/// <summary>
		/// This integer value indicates the quantity of the product that has been sold for the published offer.
		/// </summary>
		public int SoldQuantity { get; set; }
	}
	
	/// <summary>
	/// This type is used to identify the payment, return, and fulfillment listing policies that will be, or are associated with the listing. Every published offer must have a payment, return, and fulfillment listing policy associated with it. This type is also used to override the shipping costs of one or more shipping service options that are associated with the fulfillment policy, to enable eBay Plus eligibility for a listing, or to enable the Best Offer feature on the listing.
	/// </summary>
	public class ListingPolicies
	{
		
		/// <summary>
		/// This type is used by the bestOfferTerms container, which is used if the seller would like to support the Best Offer feature on their listing.
		/// </summary>
		public BestOffer BestOfferTerms { get; set; }
		
		/// <summary>
		/// This field is included in an offer and set to true if a Top-Rated seller is opted in to the eBay Plus program. With the eBay Plus program, qualified sellers must commit to next-day delivery of the item, and the buyers must have an eBay Plus subscription to be eligible to receive the benefits of this program, which are free, next-day delivery, as well as free returns. Currently, this program is only available on the Germany and Australian sites. This field will be returned in the getOffer and getOffers calls if set for the offer.
		/// </summary>
		public bool EBayPlusIfEligible { get; set; }
		
		/// <summary>
		/// This unique identifier indicates the fulfillment listing policy that will be used once an offer is published and converted to an eBay listing. This fulfillment listing policy will set all fulfillment-related settings for the eBay listing. Listing policies are not immediately required for offers, but are required before an offer can be published. The seller should review the fulfillment listing policy before assigning it to the offer to make sure it is compatible with the inventory item and the offer settings. The seller may also want to review the shipping service costs in the fulfillment policy, and that seller might decide to override the shipping costs for one or more shipping service options by using the shippingCostOverrides container. Listing policies can be created and managed in My eBay or with the Account API. To get a list of all return policies associated with a seller's account on a specific eBay Marketplace, use the Account API's getFulfillmentPolicies call. There are also calls in the Account API to retrieve a fulfillment policy by policy ID or policy name. This field will be returned in the getOffer and getOffers calls if set for the offer.
		/// </summary>
		public string FulfillmentPolicyId { get; set; }
		
		/// <summary>
		/// This unique identifier indicates the payment listing policy that will be used once an offer is published and converted to an eBay listing. This payment listing policy will set all payment-related settings for the eBay listing. Listing policies are not immediately required for offers, but are required before an offer can be published. The seller should review the payment listing policy before assigning it to the offer, as the following must be true for the payment listing policy to be compatible with the offer: The marketplaceId value should reflect where the offer is being published The immediatePay field value must be set to true since Inventory API offers only support immediate payment The only specified payment method should be 'PayPal', since immediate payment requires 'PayPal'Listing policies can be created and managed in My eBay or with the Account API. To get a list of all payment policies associated with a seller's account on a specific eBay Marketplace, use the Account API's getPaymentPolicies call. There are also calls in the Account API to retrieve a payment policy by policy ID or policy name. This field will be returned in the getOffer and getOffers calls if set for the offer.
		/// </summary>
		public string PaymentPolicyId { get; set; }
		
		/// <summary>
		/// This unique identifier indicates the return listing policy that will be used once an offer is published and converted to an eBay listing. This return listing policy will set all return policy settings for the eBay listing. Listing policies are not immediately required for offers, but are required before an offer can be published. The seller should review the return listing policy before assigning it to the offer to make sure it is compatible with the inventory item and the offer settings. Listing policies can be created and managed in My eBay or with the Account API. To get a list of all return policies associated with a seller's account on a specific eBay Marketplace, use the Account API's getReturnPolicies call. There are also calls in the Account API to retrieve a return policy by policy ID or policy name. This field will be returned in the getOffer and getOffers calls if set for the offer.
		/// </summary>
		public string ReturnPolicyId { get; set; }
		
		/// <summary>
		/// This container is used if the seller wishes to override the shipping costs or surcharge for one or more domestic or international shipping service options defined in the fulfillment listing policy. To override the costs of a specific domestic or international shipping service option, the seller must know the priority/order of that shipping service in the fulfillment listing policy. The name of a shipping service option can be found in the shippingOptions.shippingServices.shippingServiceCode field of the fulfillment policy, and the priority/order of that shipping service option is found in the shippingOptions.shippingServices.sortOrderId field. Both of these values can be retrieved by searching for that fulfillment policy with the getFulfillmentPolicies or getFulfillmentPolicyByName calls of the Account API. The shippingCostOverrides.priority value should match the shippingOptions.shippingServices.sortOrderId in order to override the shipping costs for that shipping service option. The seller must also ensure that the shippingServiceType value is set to DOMESTIC to override a domestic shipping service option, or to INTERNATIONAL to override an international shipping service option. A separate ShippingCostOverrides node is needed for each shipping service option whose costs are being overridden. All defined fields of the shippingCostOverrides container should be included, even if the shipping costs and surcharge values are not changing. The shippingCostOverrides container is returned in the getOffer and getOffers calls if one or more shipping cost overrides are being applied to the fulfillment policy.
		/// </summary>
		public ShippingCostOverride[] ShippingCostOverrides { get; set; }
	}
	
	/// <summary>
	/// A complex type that is used to provide the physical address of a location, and it geo-coordinates.
	/// </summary>
	public class Location
	{
		
		/// <summary>
		/// This type is used to define the physical address of an inventory location.
		/// </summary>
		public Address Address { get; set; }
		
		/// <summary>
		/// This type is used to express the Global Positioning System (GPS) latitude and longitude coordinates of an inventory location.
		/// </summary>
		public GeoCoordinates GeoCoordinates { get; set; }
		
		/// <summary>
		/// A unique eBay-assigned ID for the location. Note: This field should not be confused with the seller-defined merchantLocationKey value. It is the merchantLocationKey value which is used to identify an inventory location when working with inventory location API calls. The locationId value is only used internally by eBay.
		/// </summary>
		public string LocationId { get; set; }
	}
	
	/// <summary>
	/// This type is used by the createInventoryLocation call to provide an full or partial address of an inventory location.
	/// </summary>
	public class LocationDetails
	{
		
		/// <summary>
		/// This type is used to define the physical address of an inventory location.
		/// </summary>
		public Address Address { get; set; }
		
		/// <summary>
		/// This type is used to express the Global Positioning System (GPS) latitude and longitude coordinates of an inventory location.
		/// </summary>
		public GeoCoordinates GeoCoordinates { get; set; }
	}
	
	/// <summary>
	/// This type is used by the base response payload for the getInventoryLocations call.
	/// </summary>
	public class LocationResponse
	{
		
		/// <summary>
		/// The URI of the current page of results from the result set.
		/// </summary>
		public string Href { get; set; }
		
		/// <summary>
		/// The number of items returned on a single page from the result set.
		/// </summary>
		public int Limit { get; set; }
		
		/// <summary>
		/// An array of one or more of the merchant's inventory locations.
		/// </summary>
		public InventoryLocationResponse[] Locations { get; set; }
		
		/// <summary>
		/// The URI for the following page of results. This value is returned only if there is an additional page of results to display from the result set. Max length: 2048
		/// </summary>
		public string Next { get; set; }
		
		/// <summary>
		/// The number of results skipped in the result set before listing the first returned result. This value is set in the request with the offset query parameter. Note: The items in a paginated result set use a zero-based list where the first item in the list has an offset of 0.
		/// </summary>
		public int Offset { get; set; }
		
		/// <summary>
		/// The URI for the preceding page of results. This value is returned only if there is a previous page of results to display from the result set. Max length: 2048
		/// </summary>
		public string Prev { get; set; }
		
		/// <summary>
		/// The total number of items retrieved in the result set. If no items are found, this field is returned with a value of 0.
		/// </summary>
		public int Total { get; set; }
	}
	
	/// <summary>
	/// This type is used to specify one to five eBay listings that will be migrated to the new Inventory model.
	/// </summary>
	public class MigrateListing
	{
		
		/// <summary>
		/// The unique identifier of the eBay listing to migrate to the new Inventory model. In the Trading API, this field is known as the ItemID. Up to five unique eBay listings may be specified here in separate listingId fields. The seller should make sure that each of these listings meet the requirements that are stated at the top of this Call Reference page.
		/// </summary>
		public string ListingId { get; set; }
	}
	
	/// <summary>
	/// This type is used to display the results of each listing that the seller attempted to migrate.
	/// </summary>
	public class MigrateListingResponse
	{
		
		/// <summary>
		/// If one or more errors occur with the attempt to migrate the listing, this container will be returned with detailed information on each error.
		/// </summary>
		public Error[] Errors { get; set; }
		
		/// <summary>
		/// This field will only be returned for a multiple-variation listing that the seller attempted to migrate. Its value is auto-generated by eBay. For a multiple-variation listing that is successfully migrated to the new Inventory model, eBay automatically creates an inventory item group object for the listing, and the seller will be able to retrieve and manage that new inventory item group object by using the value in this field.
		/// </summary>
		public string InventoryItemGroupKey { get; set; }
		
		/// <summary>
		/// This container exists of an array of SKU values and offer IDs. For single-variation listings, this will only be one SKU value and one offer ID (if listing was successfully migrated), but multiple SKU values and offer IDs will be returned for multiple-variation listings.
		/// </summary>
		public InventoryItemListing[] InventoryItems { get; set; }
		
		/// <summary>
		/// The unique identifier of the eBay listing that the seller attempted to migrate.
		/// </summary>
		public string ListingId { get; set; }
		
		/// <summary>
		/// This is the unique identifier of the eBay Marketplace where the listing resides. The value fo the eBay US site will be EBAY_US. For implementation help, refer to <a href='https://developer.ebay.com/devzone/rest/api-ref/inventory/types/MarketplaceEnum.html'>eBay API documentation</a>
		/// </summary>
		public string MarketplaceId { get; set; }
		
		/// <summary>
		/// This field is returned for each listing that the seller attempted to migrate. See the HTTP status codes table to see which each status code indicates.
		/// </summary>
		public int StatusCode { get; set; }
		
		/// <summary>
		/// If one or more warnings occur with the attempt to migrate the listing, this container will be returned with detailed information on each warning. It is possible that a listing can be successfully migrated even if a warning occurs.
		/// </summary>
		public Error[] Warnings { get; set; }
	}
	
	/// <summary>
	/// This type is used by the compatibilityProperties container to identify a motor vehicle using name/value pairs.
	/// </summary>
	public class NameValueList
	{
		
		/// <summary>
		/// This string value identifies the motor vehicle aspect, such as 'make', 'model', 'year', 'trim', and 'engine'. Typically, the make, model, and year of the motor vehicle are always required, with the trim and engine being necessary sometimes, but it will be dependent on the part or accessory, and on the vehicle class.
		/// </summary>
		public string Name { get; set; }
		
		/// <summary>
		/// This string value identifies the motor vehicle aspect specified in the corresponding name field. For example, if the name field is 'make', this field may be 'Toyota', or if the name field is 'model', this field may be 'Camry'.
		/// </summary>
		public string Value { get; set; }
	}
	
	/// <summary>
	/// This type is used by the getListingFees call to indicate the unpublished offer(s) for which expected listing fees will be retrieved. The user passes in one or more offerId values (a maximum of 250). See the Standard selling fees help page for more information on listing fees.
	/// </summary>
	public class OfferKeyWithId
	{
		
		/// <summary>
		/// The unique identifier of an unpublished offer for which expected listing fees will be retrieved. One to 250 offerId values can be passed in to the offers container for one getListingFees call. Errors will occur if offerId values representing published offers are passed in.
		/// </summary>
		public string OfferId { get; set; }
	}
	
	/// <summary>
	/// This type is used by the base request payload of the getListingFees call.
	/// </summary>
	public class OfferKeysWithId
	{
		
		/// <summary>
		/// This container is used to identify one or more (up to 250)unpublished offers for which expected listing fees will be retrieved. The user passes one or more offerId values (maximum of 250) in to this container to identify the unpublished offers in which to retrieve expected listing fees. This call is only applicable for offers in the unpublished state. The call response gives aggregate fee amounts per eBay marketplace, and does not give fee information at the individual offer level.
		/// </summary>
		public OfferKeyWithId[] Offers { get; set; }
	}
	
	/// <summary>
	/// This type is used by the offers container in a Bulk Update Price and Quantity call to update the current price and/or quantity of one or more offers associated with a specific inventory item.
	/// </summary>
	public class OfferPriceQuantity
	{
		
		/// <summary>
		/// This field is used if the seller wants to modify the current quantity of the inventory item that will be available for purchase in the offer (identified by the corresponding offerId value). Either the availableQuantity field or the price container is required, but not necessarily both.
		/// </summary>
		public int AvailableQuantity { get; set; }
		
		/// <summary>
		/// This field is the unique identifier of the offer. If an offers container is used to update one or more offers associated to a specific inventory item, the offerId value is required in order to identify the offer to update with a modified price and/or quantity. The seller can run a getOffers call (passing in the correct SKU value as a query parameter) to retrieve offerId values for offers associated with the SKU.
		/// </summary>
		public string OfferId { get; set; }
		
		/// <summary>
		/// This type is used to express a dollar value and the applicable currency.
		/// </summary>
		public Amount Price { get; set; }
	}
	
	/// <summary>
	/// This type is used by the response payload of the createOffer and updateOffer calls, and contains the unique identifier for the offer if the offer is successfully created/updated, as well as any errors and/or warnings that may have been triggered by the call.
	/// </summary>
	public class OfferResponse
	{
		
		/// <summary>
		/// The unique identifier of the offer that was just created with a createOffer call, or just updated with an updateOffer call. It is not returned if the createOffer call fails to create an offer. This identifier will be needed for many offer-related calls.
		/// </summary>
		public string OfferId { get; set; }
		
		/// <summary>
		/// This container will contain an array of errors and/or warnings when a call is made, and errors and/or warnings occur.
		/// </summary>
		public Error[] Warnings { get; set; }
	}
	
	/// <summary>
	/// This type is used to indicate the status of each offer that the user attempted to publish. If an offer is successfully published, an eBay listing ID (also known as an Item ID) is returned. If there is an issue publishing the offer and creating the new eBay listing, the information about why the listing failed should be returned in the errors and/or warnings containers.
	/// </summary>
	public class OfferResponseWithListingId
	{
		
		/// <summary>
		/// This container will be returned if there were one or more errors associated with publishing the offer.
		/// </summary>
		public Error[] Errors { get; set; }
		
		/// <summary>
		/// The unique identifier of the newly-created eBay listing. This field is only returned if the seller successfully published the offer and created the new eBay listing.
		/// </summary>
		public string ListingId { get; set; }
		
		/// <summary>
		/// The unique identifier of the offer that the seller published (or attempted to publish).
		/// </summary>
		public string OfferId { get; set; }
		
		/// <summary>
		/// The HTTP status code returned in this field indicates the success or failure of publishing the offer specified in the offerId field. See the HTTP status codes table to see which each status code indicates.
		/// </summary>
		public int StatusCode { get; set; }
		
		/// <summary>
		/// This container will be returned if there were one or more warnings associated with publishing the offer.
		/// </summary>
		public Error[] Warnings { get; set; }
	}
	
	/// <summary>
	/// This type is used by the bulkCreateOffer response to show the status of each offer that the seller attempted to create with the bulkCreateOffer method. For each offer that is created successfully, the returned statusCode value should be 200, and a unique offerId should be created for each offer. If any issues occur with the creation of any offers, errors and/or warnings containers will be returned.
	/// </summary>
	public class OfferSkuResponse
	{
		
		/// <summary>
		/// This container will be returned at the offer level, and will contain one or more errors if any occurred with the attempted creation of the corresponding offer.
		/// </summary>
		public Error[] Errors { get; set; }
		
		/// <summary>
		/// This enumeration value indicates the listing format of the offer. The Inventory API currently only supports fixed-price listings, so the enumeration value returned here is always FIXED_PRICE. For implementation help, refer to <a href='https://developer.ebay.com/devzone/rest/api-ref/inventory/types/FormatTypeEnum.html'>eBay API documentation</a>
		/// </summary>
		public string Format { get; set; }
		
		/// <summary>
		/// This enumeration value is the unique identifier of the eBay marketplace for which the offer will be made available. This enumeration value should be the same for all offers since the bulkCreateOffer method can only be used to create offers for one eBay marketplace at a time. For implementation help, refer to <a href='https://developer.ebay.com/devzone/rest/api-ref/inventory/types/MarketplaceEnum.html'>eBay API documentation</a>
		/// </summary>
		public string MarketplaceId { get; set; }
		
		/// <summary>
		/// The unique identifier of the newly-created offer. This identifier should be automatically created by eBay if the creation of the offer was successful. It is not returned if the creation of the offer was not successful. In which case, the user may want to scan the corresponding errors and/or warnings container to see what the issue may be.
		/// </summary>
		public string OfferId { get; set; }
		
		/// <summary>
		/// The seller-defined Stock-Keeping Unit (SKU) of the inventory item. The sku value is required for each product offer that the seller is trying to create, and it is always returned to identified the product that is associated with the offer.
		/// </summary>
		public string Sku { get; set; }
		
		/// <summary>
		/// The integer value returned in this field is the http status code. If an offer is created successfully, the value returned in this field should be 200. A user can view the HTTP status codes section for information on other status codes that may be returned with the bulkCreateOffer method.
		/// </summary>
		public int StatusCode { get; set; }
		
		/// <summary>
		/// This container will be returned at the offer level, and will contain one or more warnings if any occurred with the attempted creation of the corresponding offer. Note that it is possible that an offer can be created successfully even if one or more warnings are triggered.
		/// </summary>
		public Error[] Warnings { get; set; }
	}
	
	/// <summary>
	/// This type is used by the base response of the getOffers call, and it is an array of one or more of the seller's offers, along with pagination data.
	/// </summary>
	public class Offers
	{
		
		/// <summary>
		/// This is the URL to the current page of offers.
		/// </summary>
		public string Href { get; set; }
		
		/// <summary>
		/// This integer value is the number of offers that will be displayed on each results page.
		/// </summary>
		public int Limit { get; set; }
		
		/// <summary>
		/// This is the URL to the next page of offers. This field will only be returned if there are additional offers to view.
		/// </summary>
		public string Next { get; set; }
		
		/// <summary>
		/// This container is an array of one or more of the seller's offers for the SKU value that is passed in through the required sku query parameter. Note: Currently, the Inventory API does not support the same SKU across multiple eBay marketplaces, so the getOffers call will only return one offer. Max Occurs: 25
		/// </summary>
		public EbayOfferDetailsWithAll[] Offers1 { get; set; }
		
		/// <summary>
		/// This is the URL to the previous page of offers. This field will only be returned if there are previous offers to view.
		/// </summary>
		public string Prev { get; set; }
		
		/// <summary>
		/// This integer value indicates the number of offers being displayed on the current page of results. This number will generally be the same as the limit value if there are additional pages of results to view. Note: Currently, the Inventory API does not support the same SKU across multiple eBay marketplaces, so the Get Offers call will only return one offer, so this value should always be 1.
		/// </summary>
		public int Size { get; set; }
		
		/// <summary>
		/// This integer value is the total number of offers that exist for the specified SKU value. Based on this number and on the limit value, the seller may have to toggle through multiple pages to view all offers. Note: Currently, the Inventory API does not support the same SKU across multiple eBay marketplaces, so the Get Offers call will only return one offer, so this value should always be 1.
		/// </summary>
		public int Total { get; set; }
	}
	
	/// <summary>
	/// This type is used to express the regular operating hours of a merchant's store during the days of the week.
	/// </summary>
	public class OperatingHours
	{
		
		/// <summary>
		/// A dayOfWeekEnum value is required for each day of the week that the store location has regular operating hours. This field is returned if operating hours are defined for the store location. For implementation help, refer to <a href='https://developer.ebay.com/devzone/rest/api-ref/inventory/types/DayOfWeekEnum.html'>eBay API documentation</a>
		/// </summary>
		public string DayOfWeekEnum { get; set; }
		
		/// <summary>
		/// This container is used to define the opening and closing times of a store's working day (defined in the dayOfWeekEnum field). An intervals container is needed for each day of the week that the store location is open. If a store location closes for lunch (or any other period during the day) and then reopens, multiple open and close pairs are needed This container is returned if operating hours are defined for the store location.
		/// </summary>
		public Interval[] Intervals { get; set; }
	}
	
	/// <summary>
	/// This type is used to indicate the package type, weight, and dimensions of the shipping package. Package weight and dimensions are required when calculated shipping rates are used, and weight alone is required when flat-rate shipping is used, but with a weight surcharge. See the Calculated shipping help page for more information on calculated shipping.
	/// </summary>
	public class PackageWeightAndSize
	{
		
		/// <summary>
		/// This type is used to specify the dimensions (and the unit used to measure those dimensions) of a shipping package. The dimensions container is conditionally required if the seller will be offering calculated shipping rates to determine shipping cost. See the Calculated shipping help page for more information on calculated shipping.
		/// </summary>
		public Dimension Dimensions { get; set; }
		
		/// <summary>
		/// This enumeration value indicates the type of shipping package used to ship the inventory item. The supported values for this field can be found in the PackageTypeEnum type. This field will be returned if the package type is set for the inventory item. For implementation help, refer to <a href='https://developer.ebay.com/devzone/rest/api-ref/inventory/types/PackageTypeEnum.html'>eBay API documentation</a>
		/// </summary>
		public string PackageType { get; set; }
		
		/// <summary>
		/// This type is used to specify the weight (and the unit used to measure that weight) of a shipping package. The weight container is conditionally required if the seller will be offering calculated shipping rates to determine shipping cost, or is using flat-rate costs, but charging a weight surcharge. See the Calculated shipping help page for more information on calculated shipping.
		/// </summary>
		public Weight Weight { get; set; }
	}
	
	/// <summary>
	/// This type is used to specify/indicate the quantity of the inventory item that is available for an In-Store Pickup order at the merchant's physical store (specified by the merchantLocationKey field).
	/// </summary>
	public class PickupAtLocationAvailability
	{
		
		/// <summary>
		/// The enumeration value in this field indicates the availability status of the inventory item at the merchant's physical store specified by the pickupAtLocationAvailability.merchantLocationKey field. This field is required if the pickupAtLocationAvailability container is used, and is always returned with the pickupAtLocationAvailability container. See AvailabilityTypeEnum for more information about how/when you use each enumeration value. For implementation help, refer to <a href='https://developer.ebay.com/devzone/rest/api-ref/inventory/types/AvailabilityTypeEnum.html'>eBay API documentation</a>
		/// </summary>
		public string AvailabilityType { get; set; }
		
		/// <summary>
		/// This type is used by the fulfillmentTime container of the PickupAtLocationAvailability type to specify how soon orders will be ready for In-Store pickup after the purchase has occurred.
		/// </summary>
		public TimeDuration FulfillmentTime { get; set; }
		
		/// <summary>
		/// The unique identifier of a merchant's store where the In-Store Pickup inventory item is currently located, or where inventory will be sent to. If the merchant's store is currently awaiting for inventory, the availabilityType value should be SHIP_TO_STORE. This field is required if the pickupAtLocationAvailability container is used, and is always returned with the pickupAtLocationAvailability container. Max length: 36
		/// </summary>
		public string MerchantLocationKey { get; set; }
		
		/// <summary>
		/// This integer value indicates the quantity of the inventory item that is available for In-Store Pickup at the store identified by the merchantLocationKey value. The value of quantity should be an integer value greater than 0, unless the inventory item is out of stock. This field is required if the pickupAtLocationAvailability container is used, and is always returned with the pickupAtLocationAvailability container.
		/// </summary>
		public int Quantity { get; set; }
	}
	
	/// <summary>
	/// This type is used to update the total &quot;ship-to-home&quot; quantity for one or more inventory items and/or to update the price and/or quantity of one or more specific offers associated with one or more inventory items.
	/// </summary>
	public class PriceQuantity
	{
		
		/// <summary>
		/// This container is needed if the seller is updating the price and/or quantity of one or more published offers, and a successful call will actually update the active eBay listing with the revised price and/or available quantity. This call is not designed to work with unpublished offers. For unpublished offers, the seller should use the updateOffer call to update the available quantity and/or price. If the seller is also using the shipToLocationAvailability container and sku field to update the total 'ship-to-home' quantity of the inventory item, the SKU value associated with the corresponding offerId value(s) must be the same as the corresponding sku value that is passed in, or an error will occur. A separate (OfferPriceQuantity) node is required for each offer being updated.
		/// </summary>
		public OfferPriceQuantity[] Offers { get; set; }
		
		/// <summary>
		/// This type is used to specify the total 'ship-to-home' quantity of the inventory item that will be available for purchase through one or more published offers.
		/// </summary>
		public ShipToLocationAvailability ShipToLocationAvailability { get; set; }
		
		/// <summary>
		/// This is the seller-defined SKU value of the inventory item whose total 'ship-to-home' quantity will be updated. This field is only required when the seller is updating the total quantity of an inventory item using the shipToLocationAvailability container. If the seller is updating the price and/or quantity of one or more specific offers, one or more offerId values are used instead, and the sku value is not needed. If the seller wants to update the price and/or quantity of one or more offers, and also wants to update the total 'ship-to-home' quantity of the corresponding inventory item, the SKU value associated with the offerId value(s) must be the same as the corresponding sku value that is passed in, or an error will occur. Max Length: 50
		/// </summary>
		public string Sku { get; set; }
	}
	
	/// <summary>
	/// This type is used to display the result for each offer and/or inventory item that the seller attempted to update with a bulkUpdatePriceQuantity call. If any errors or warnings occur, the error/warning data is returned at the offer/inventory item level.
	/// </summary>
	public class PriceQuantityResponse
	{
		
		/// <summary>
		/// This array will be returned if there were one or more errors associated with the update to the offer or inventory item record.
		/// </summary>
		public Error[] Errors { get; set; }
		
		/// <summary>
		/// The unique identifier of the offer that was updated. This field will not be returned in situations where the seller is only updating the total 'ship-to-home' quantity of an inventory item record.
		/// </summary>
		public string OfferId { get; set; }
		
		/// <summary>
		/// This is the seller-defined SKU value of the product. This field is returned whether the seller attempted to update an offer with the SKU value or just attempted to update the total 'ship-to-home' quantity of an inventory item record. Max Length: 50
		/// </summary>
		public string Sku { get; set; }
		
		/// <summary>
		/// The value returned in this container will indicate the status of the attempt to update the price and/or quantity of the offer (specified in the corresponding offerId field) or the attempt to update the total 'ship-to-home' quantity of an inventory item (specified in the corresponding sku field). For a completely successful update of an offer or inventory item record, a value of 200 will appear in this field. A user can view the HTTP status codes section for information on other status codes that may be returned with the bulkUpdatePriceQuantity method.
		/// </summary>
		public int StatusCode { get; set; }
		
		/// <summary>
		/// This array will be returned if there were one or more warnings associated with the update to the offer or inventory item record.
		/// </summary>
		public Error[] Warnings { get; set; }
	}
	
	/// <summary>
	/// This type is used to specify the listing price for the product and settings for the Minimum Advertised Price and Strikethrough Pricing features. The price field must be supplied before an offer is published, but a seller may create an offer without supplying a price initially. The Minimum Advertised Price feature is only available on the US site. Strikethrough Pricing is available on the US, eBay Motors, UK, Germany, Canada (English and French), France, Italy, and Spain sites.
	/// </summary>
	public class PricingSummary
	{
		
		/// <summary>
		/// This type is used to express a dollar value and the applicable currency.
		/// </summary>
		public Amount MinimumAdvertisedPrice { get; set; }
		
		/// <summary>
		/// This field is needed if the Strikethrough Pricing (STP) feature will be used in the offer. This field indicates that the product was sold for the price in the originalRetailPrice field on an eBay site, or sold for that price by a third-party retailer. When using the createOffer or updateOffer calls, the seller will pass in a value of ON_EBAY to indicate that the product was sold for the originalRetailPrice on an eBay site, or the seller will pass in a value of OFF_EBAY to indicate that the product was sold for the originalRetailPrice through a third-party retailer. This field and the originalRetailPrice field are only applicable if the seller and listing are eligible to use the Strikethrough Pricing feature, a feature which is limited to the US (core site and Motors), UK, Germany, Canada (English and French versions), France, Italy, and Spain sites. This field will be returned if set for the offer. For implementation help, refer to <a href='https://developer.ebay.com/devzone/rest/api-ref/inventory/types/SoldOnEnum.html'>eBay API documentation</a>
		/// </summary>
		public string OriginallySoldForRetailPriceOn { get; set; }
		
		/// <summary>
		/// This type is used to express a dollar value and the applicable currency.
		/// </summary>
		public Amount OriginalRetailPrice { get; set; }
		
		/// <summary>
		/// This type is used to express a dollar value and the applicable currency.
		/// </summary>
		public Amount Price { get; set; }
		
		/// <summary>
		/// This field is needed if the Minimum Advertised Price (MAP) feature will be used in the offer. This field is only applicable if an eligible US seller is using the Minimum Advertised Price (MAP) feature and a minimumAdvertisedPrice has been specified. The value set in this field will determine whether the MAP price is shown to a prospective buyer prior to checkout through a pop-up window accessed from the View Item page, or if the MAP price is not shown until the checkout flow after the buyer has already committed to buying the item. To show the MAP price prior to checkout, the seller will set this value to PRE_CHECKOUT. To show the MAP price after the buyer already commits to buy the item, the seller will set this value to DURING_CHECKOUT. This field will be ignored if the seller and/or the listing is not eligible for the MAP feature. This field will be returned if set for the offer. For implementation help, refer to <a href='https://developer.ebay.com/devzone/rest/api-ref/inventory/types/MinimumAdvertisedPriceHandlingEnum.html'>eBay API documentation</a>
		/// </summary>
		public string PricingVisibility { get; set; }
	}
	
	/// <summary>
	/// This type is used to define the product details, such as a title, a product description, product aspects/item specifics, and links to images for the product. Optionally, in a createOrReplaceInventoryItem call, a seller can pass in an eBay Product Identifier (ePID) or a Global Trade Item Number (GTIN) value, such as an EAN, an ISBN, a UPC, to identify a product to be matched with a product in the eBay Catalog. The information in this type is also returned in the getInventoryItem, getInventoryItems, and bulkGetInventoryItem calls if defined.
	/// </summary>
	public class Product
	{
		
		/// <summary>
		/// This is an array of item specific pairs that provide more information about the product and might make it easier for buyers to find. To view required/recommended product aspects/item specifics names (and corresponding values) for a specific eBay category, sellers can use the GetCategorySpecifics call of the Trading API. Alternatively, sellers can view similar items on eBay.com in the same category to get an idea of what other sellers are using for product aspects/item specifics. Sellers also have the option of specifying an eBay Product ID (ePID) or optionally, a Global Trade Item Number (GTIN) through the corresponding fields in the product container in an attempt to find a product match in the eBay Catalog. If a match is found based on the ePID or GTIN value, the product aspects that are defined for the eBay Catalog product will automatically get picked up by the newly created/updated inventory item. Below is an example of the proper JSON syntax to use when manually inputting item specifics: &quot;aspects&quot;: {  &quot;Brand&quot;: [&quot;GoPro&quot;],  &quot;Storage Type&quot;: [&quot;Removable&quot;]  } Note that inventory items that will become part of an inventory item group and multiple-variation listing should have the same attributes that are defined for the inventory item group. This container will be returned if one or more item specific pairs are defined for the inventory item. Max Length for Aspect Name: 40 Max Length for Aspect Value: 50
		/// </summary>
		public string[] Aspects { get; set; }
		
		/// <summary>
		/// The brand of the product. This field is often paired with the mpn field to identify a specific product by Manufacture Part Number. This field is conditionally required if the eBay category requires a Manufacturer Part Number (MPN) value. If eBay is able to find a product match in the eBay Catalog when an eBay Product ID (ePID) or GTIN value (UPC, ISBN, or EAN) is supplied, all product details of that eBay Catalog product is picked up by the inventory item record (including brand) if the createOrUpdateInventoryItem call is successful. This field is returned if defined for an inventory item. If a brand was passed in as an item specific name-value pair through the aspects array in a createOrReplaceInventoryItem call, this value is also picked up by the brand field. Max Length: 65
		/// </summary>
		public string Brand { get; set; }
		
		/// <summary>
		/// The description of the product. The description of an existing inventory item can be added or modified with a createOrReplaceInventoryItem call. The description of an inventory item is automatically populated if the seller specifies an eBay Product ID (ePID) or a Global Trade Item Number (GTIN) and eBay is able to find a matching product in the eBay Catalog. Note that this field is optional but recommended. If a listingDescription field is omitted when creating and publishing a single-variation offer, the text in this field will be used instead. If neither the product.description field for the inventory item nor the listingDescription field for the offer exist, the publishOffer call will fail. If the inventory item will be part of an inventory item group/multiple-variation listing, this field should definitely be used to specify how the corresponding product variation is different (e.g. This is the green, extra-large version of the shirt). However, in the case of an inventory item group, the text in the description field of the inventory item group will become the listing description of the actual eBay listing instead of the text in this field. Basic HTML tags are supported, including the following tags: &lt;b&gt; &lt;strong&gt; &lt;br&gt; &lt;ol&gt; &lt;ul&gt; &lt;li&gt; Table tags including &lt;table&gt;, &lt;tr&gt;, &lt;td&gt;, &lt;th&gt;, &lt;thead&gt;, &lt;tfoot&gt;, &lt;tbody&gt;, &lt;caption&gt;, &lt;colgroup&gt;, and &lt;col&gt;A seller can not use any active content in their listing description. Active content includes animation or video via JavaScript, Flash, plug-ins, or form actions. This field is returned if defined for an inventory item. If one of the GTIN types (e.g. UPC) was passed in when the inventory item was created/modified and a product match was found in the eBay catalog, product description is one of the details that gets picked up from the catalog product. Max Length: 4000
		/// </summary>
		public string Description { get; set; }
		
		/// <summary>
		/// The European Article Number/International Article Number (EAN) for the product. Although an ePID value is preferred when trying to find a product match in the eBay Catalog, this field can also be used in an attempt to find a product match in the eBay Catalog. If a product match is found in the eBay Catalog, the inventory item is automatically populated with available product details such as a title, a product description, product aspects (including the specified EAN value), and a link to any stock image that exists for the catalog product. This field is returned if defined for an inventory item. If an EAN was passed in as an item specific name-value pair through the aspects array in a createOrReplaceInventoryItem call, this value is also picked up by the ean field.
		/// </summary>
		public string[] Ean { get; set; }
		
		/// <summary>
		/// The eBay Product Identifier (ePID) for the product. This field can be used to directly identify an eBay Catalog product. Based on its specified ePID value, eBay will search for the product in the eBay Catalog, and if a match is found, the inventory item is automatically populated with available product details such as product title, product description, product aspects, and a link to any stock image that exists for the catalog product. In an attempt to find a eBay Catalog product match, an ePID value is always preferred over the other product identifiers, since it is possible that one GTIN value can be associated with multiple eBay Catalog products, and if multiple products are found, product details will not be picked up by the Inventory Item object. This field is returned if defined for an inventory item.
		/// </summary>
		public string Epid { get; set; }
		
		/// <summary>
		/// An array of one or more links to images for the product. URLs must use the &quot;HTTPS&quot; protocol. Images can be self-hosted by the seller, or sellers can use the UploadSiteHostedPictures call of the Trading API to upload images to an eBay Picture Server. If successful, the response of the UploadSiteHostedPictures call will contain a full URL to the image on an eBay Picture Server. This is the URL that will be passed in through the imageUrls array. Before an offer can be published, at least one image must exist for the inventory item. Most eBay sites support up to 12 pictures free of charge, and eBay Motors listings can have up to 24 pictures. A link to a stock image for a product may automatically be populated for an inventory item if the seller specifies an eBay Product ID (ePID) or a Global Trade Item Number (GTIN) and eBay is able to find a matching product in the eBay Catalog. This container will always be returned for an inventory item that is part of a published offer since a published offer will always have at least one picture, but this container will only be returned if defined for inventory items that are not a part of a published offer.
		/// </summary>
		public string[] ImageUrls { get; set; }
		
		/// <summary>
		/// The International Standard Book Number (ISBN) value for the product. Although an ePID value is preferred when trying to find a product match in the eBay Catalog, this field can also be used in an attempt to find a product match in the eBay Catalog. If a product match is found in the eBay Catalog, the inventory item is automatically populated with available product details such as a title, a product description, product aspects (including the specified ISBN value), and a link to any stock image that exists for the catalog product. This field is returned if defined for an inventory item. If an ISBN was passed in as an item specific name-value pair through the aspects array in a createOrReplaceInventoryItem call, this value is also picked up by the isbn field.
		/// </summary>
		public string[] Isbn { get; set; }
		
		/// <summary>
		/// The Manufacturer Part Number (MPN) of a product. This field is paired with the brand field to identify a product. Some eBay categories require MPN values. The GetCategorySpecifics call of the Trading API can be used to see if a category requires an MPN. The MPN value for a product may automatically be populated for an inventory item if the seller specifies an eBay Product ID (ePID) or a Global Trade Item Number (GTIN) and eBay is able to find a matching product in the eBay Catalog. This field is returned if defined for an inventory item. If an MPN was passed in as an item specific name-value pair through the aspects array in a createOrReplaceInventoryItem call, this value is also picked up by the mpn field. Max Length: 65
		/// </summary>
		public string Mpn { get; set; }
		
		/// <summary>
		/// A subtitle is an optional listing feature that allows the seller to provide more information about the product, possibly including keywords that may assist with search results. An additional listing fee will be charged to the seller if a subtitle is used. For more information on using listing subtitles on the US site, see the Adding a subtitle to your listings help page. The subtitle of an existing inventory item can added, modified, or removed with a createOrReplaceInventoryItem call. Note that the same subtitle text should be used for each inventory item that will be part of an inventory item group, and ultimately become one product variation within a multiple-variation listing. This field will only be returned if set for an inventory item. Max Length: 55
		/// </summary>
		public string Subtitle { get; set; }
		
		/// <summary>
		/// The title of an inventory item can be added or modified with a createOrReplaceInventoryItem call. Although not immediately required, a title will be needed before an offer with the inventory item is published. The title of an inventory item is automatically populated if the seller specifies an eBay Product ID (ePID) or a Global Trade Item Number (GTIN) and eBay is able to find a matching product in the eBay Catalog. If the inventory item will become part of a single-variation offer, and the listing is not a product-based listing, the text in this field will become the actual listing title for the published offer. However, if the inventory item will become part of a multiple-variation offer, the text in title field of the inventory item group entity will actually become the listing title for the published offer instead, although a title can still be provided for the inventory item, and it will actually become the title of the variation. This field will always be returned for an inventory item that is part of a published offer since a published offer will always have a listing title, but this field will only be returned if defined for inventory items that are not a part of a published offer. Max Length: 80
		/// </summary>
		public string Title { get; set; }
		
		/// <summary>
		/// The Universal Product Code (UPC) value for the product. Although an ePID value is preferred when trying to find a product match in the eBay Catalog, this field can also be used in an attempt to find a product match in the eBay Catalog. If a product match is found in the eBay Catalog, the inventory item is automatically populated with available product details such as a title, a product description, product aspects (including the specified UPC value), and a link to any stock image that exists for the catalog product. This field is returned if defined for an inventory item. If a UPC was passed in as an item specific name-value pair through the aspects array in a createOrReplaceInventoryItem call, this value is also picked up by the upc field.
		/// </summary>
		public string[] Upc { get; set; }
	}
	
	/// <summary>
	/// This type is used to specify the details of a motor vehicle that is compatible with the inventory item specified through the SKU value in the call URI.
	/// </summary>
	public class ProductFamilyProperties
	{
		
		/// <summary>
		/// This field indicates the specifications of the engine, including its size, block type, and fuel type. An example is 2.7L V6 gas DOHC naturally aspirated. This field is conditionally required, but should be supplied if known/applicable.
		/// </summary>
		public string Engine { get; set; }
		
		/// <summary>
		/// This field indicates the make of the vehicle (e.g. Toyota). This field is always required to identify a motor vehicle.
		/// </summary>
		public string Make { get; set; }
		
		/// <summary>
		/// This field indicates the model of the vehicle (e.g. Camry). This field is always required to identify a motor vehicle.
		/// </summary>
		public string Model { get; set; }
		
		/// <summary>
		/// This field indicates the trim of the vehicle (e.g. 2-door Coupe). This field is conditionally required, but should be supplied if known/applicable.
		/// </summary>
		public string Trim { get; set; }
		
		/// <summary>
		/// This field indicates the year of the vehicle (e.g. 2016). This field is always required to identify a motor vehicle.
		/// </summary>
		public string Year { get; set; }
	}
	
	/// <summary>
	/// This type is used to identify a motor vehicle that is compatible with the corresponding inventory item (the SKU that is passed in as part of the call URI). The motor vehicle can be identified through an eBay Product ID or a K-Type value. The gtin field (for inputting Global Trade Item Numbers) is for future use only. If a motor vehicle is found in the eBay product catalog, the motor vehicle properties (engine, make, model, trim, and year) will automatically get picked up for that motor vehicle. Note: Currently, parts compatibility is only applicable for motor vehicles, but it is possible that the Product Compatibility feature is expanded to other (non-vehicle) products in the future.
	/// </summary>
	public class ProductIdentifier
	{
		
		/// <summary>
		/// This field can be used if the seller already knows the eBay catalog product ID (ePID) associated with the motor vehicle that is to be added to the compatible product list. If this eBay catalog product ID is found in the eBay product catalog, the motor vehicle properties (e.g. make, model, year, engine, and trim) will automatically get picked up for that motor vehicle.
		/// </summary>
		public string Epid { get; set; }
		
		/// <summary>
		/// This field can be used if the seller knows the Global Trade Item Number for the motor vehicle that is to be added to the compatible product list. If this GTIN value is found in the eBay product catalog, the motor vehicle properties (e.g. make, model, year, engine, and trim will automatically get picked up for that motor vehicle. Note: This field is for future use.
		/// </summary>
		public string Gtin { get; set; }
		
		/// <summary>
		/// This field can be used if the seller knows the K Type Number for the motor vehicle that is to be added to the compatible product list. If this K Type value is found in the eBay product catalog, the motor vehicle properties (e.g. make, model, year, engine, and trim) will automatically get picked up for that motor vehicle. Only the DE, UK, and AU sites support the use of K Type Numbers.
		/// </summary>
		public string Ktype { get; set; }
	}
	
	/// <summary>
	/// This type is used by the request payload of the publishByInventoryItemGroup call. The identifier of the inventory item group to publish and the eBay marketplace where the listing will be published is needed in the request payload.
	/// </summary>
	public class PublishByInventoryItemGroupRequest
	{
		
		/// <summary>
		/// This is the unique identifier of the inventory item group. All unpublished offers associated with this inventory item group will be published as a multiple-variation listing if the publishByInventoryItemGroup call is successful. The inventoryItemGroupKey identifier is automatically generated by eBay once an inventory item group is created. To retrieve an inventoryItemGroupKey value, you can use the getInventoryItem call to retrieve an inventory item that is known to be in the inventory item group to publish, and then look for the inventory item group identifier under the groupIds container in the response of that call.
		/// </summary>
		public string InventoryItemGroupKey { get; set; }
		
		/// <summary>
		/// This is the unique identifier of the eBay site on which the multiple-variation listing will be published. The marketPlaceId enumeration values are found in MarketplaceIdEnum. For implementation help, refer to <a href='https://developer.ebay.com/devzone/rest/api-ref/inventory/types/MarketplaceEnum.html'>eBay API documentation</a>
		/// </summary>
		public string MarketplaceId { get; set; }
	}
	
	/// <summary>
	/// This type is used by the base response payload of the publishOffer and publishOfferByInventoryItemGroup calls.
	/// </summary>
	public class PublishResponse
	{
		
		/// <summary>
		/// The unique identifier of the newly created eBay listing. This field is returned if the single offer (if publishOffer call was used) or group of offers in an inventory item group (if publishOfferByInventoryItemGroup call was used) was successfully converted into an eBay listing.
		/// </summary>
		public string ListingId { get; set; }
		
		/// <summary>
		/// This container will contain an array of errors and/or warnings if any occur when a publishOffer or publishOfferByInventoryItemGroup call is made.
		/// </summary>
		public Error[] Warnings { get; set; }
	}
	
	/// <summary>
	/// This type is used to specify the total 'ship-to-home' quantity of the inventory item that will be available for purchase through one or more published offers.
	/// </summary>
	public class ShipToLocationAvailability
	{
		
		/// <summary>
		/// This container is used to set the total 'ship-to-home' quantity of the inventory item that will be available for purchase through one or more published offers. This container is not immediately required, but 'ship-to-home' quantity must be set before an offer of the inventory item can be published. If an existing inventory item is being updated, and the 'ship-to-home' quantity already exists for the inventory item record, this container should be included again, even if the value is not changing, or the available quantity data will be lost.
		/// </summary>
		public int Quantity { get; set; }
	}
	
	/// <summary>
	/// This type is used if the seller wants to override the shipping costs or surcharge associated with a specific domestic or international shipping service option defined in the fulfillment listing policy that is being applied toward the offer. The shipping-related costs that can be overridden include the shipping cost to ship one item, the shipping cost to ship each additional item (if multiple quantity are purchased), and the shipping surcharge applied to the shipping service option.
	/// </summary>
	public class ShippingCostOverride
	{
		
		/// <summary>
		/// This type is used to express a dollar value and the applicable currency.
		/// </summary>
		public Amount AdditionalShippingCost { get; set; }
		
		/// <summary>
		/// The integer value input into this field, along with the shippingServiceType value, sets which domestic or international shipping service option in the fulfillment policy will be modified with updated shipping costs. Specifically, the shippingCostOverrides.shippingServiceType value in a createOffer or updateOffer call must match the shippingOptions.optionType value in a fulfillment listing policy, and the shippingCostOverrides.priority value in a createOffer or updateOffer call must match the shippingOptions.shippingServices.sortOrderId value in a fulfillment listing policy. This field is always required when overriding the shipping costs of a shipping service option, and will be always be returned for each shipping service option whose costs are being overridden.
		/// </summary>
		public int Priority { get; set; }
		
		/// <summary>
		/// This type is used to express a dollar value and the applicable currency.
		/// </summary>
		public Amount ShippingCost { get; set; }
		
		/// <summary>
		/// This enumerated value indicates whether the shipping service specified in the priority field is a domestic or an international shipping service option. To override the shipping costs for a specific domestic shipping service in the fulfillment listing policy, this field should be set to DOMESTIC, and to override the shipping costs for each international shipping service, this field should be set to INTERNATIONAL. This value, along with priority value, sets which domestic or international shipping service option in the fulfillment policy that will be modified with updated shipping costs. Specifically, the shippingCostOverrides.shippingServiceType value in a createOffer or updateOffer call must match the shippingOptions.optionType value in a fulfillment listing policy, and the shippingCostOverrides.priority value in a createOffer or updateOffer call must match the shippingOptions.shippingServices.sortOrderId value in a fulfillment listing policy. This field is always required when overriding the shipping costs of a shipping service option, and will be always be returned for each shipping service option whose costs are being overridden. For implementation help, refer to <a href='https://developer.ebay.com/devzone/rest/api-ref/inventory/types/ShippingServiceTypeEnum.html'>eBay API documentation</a>
		/// </summary>
		public string ShippingServiceType { get; set; }
		
		/// <summary>
		/// This type is used to express a dollar value and the applicable currency.
		/// </summary>
		public Amount Surcharge { get; set; }
	}
	
	/// <summary>
	/// This type is used to express the special operating hours of a store location on a specific date. A specialHours container is needed when the store's opening hours on a specific date are different than the normal operating hours on that particular day of the week.
	/// </summary>
	public class SpecialHours
	{
		
		/// <summary>
		/// A date value is required for each specific date that the store location has special operating hours. The timestamp is formatted as an ISO 8601 string, which is based on the 24-hour Coordinated Universal Time (UTC) clock. Format: [YYYY]-[MM]-[DD]T[hh]:[mm]:[ss].[sss]Z Example: 2018-08-04T07:09:00.000Z This field is returned if set for the store location.
		/// </summary>
		public string Date { get; set; }
		
		/// <summary>
		/// This container is used to define the opening and closing times of a store on a specific date (defined in the date field). An intervals container is needed for each specific date that the store has special operating hours. These special operating hours on the specific date override the normal operating hours for the specific day of the week. If a store location closes for lunch (or any other period during the day) and then reopens, multiple open and close pairs are needed. This container is returned if set for the store location.
		/// </summary>
		public Interval[] Intervals { get; set; }
	}
	
	/// <summary>
	/// This type is used to specify product aspects for which variations within an inventory item group vary, and the order in which they appear in the listing. For example, t-shirts in an inventory item group may be available in multiple sizes and colors.
	/// </summary>
	public class Specification
	{
		
		/// <summary>
		/// This is the name of product variation aspect. Typically, for clothing, typical aspect names are &quot;Size&quot; and &quot;Color&quot;. Product variation aspects are not required immediately upon creating an inventory item group, but these aspects will be required before a multiple-variation listing containing this inventory item group is published. For each product variation aspect that is specified through the specifications container, one name value is required and two or more variations of this aspect are required through the values array. Note: Each member of the inventory item group should have these same aspect names specified through the product.aspects container when the inventory item is created with the createOrReplaceInventoryItem or bulkCreateOrReplaceInventoryItem call. Max Length: 40
		/// </summary>
		public string Name { get; set; }
		
		/// <summary>
		/// This is an array of values pertaining to the corresponding product variation aspect (specified in the name field). Below is a sample of how these values will appear under a specifications container: &quot;specifications&quot;: [{  &quot;name&quot;: &quot;Size&quot;,  &quot;values&quot;: [&quot;Small&quot;,  &quot;Medium&quot;,  &quot;Large&quot;]  },  {  &quot;name&quot;: &quot;Color&quot;,  &quot;values&quot;: [&quot;Blue&quot;,  &quot;White&quot;,  &quot;Red&quot;]  }] Note: Each member of the inventory item group should have these same aspect names, and each individual inventory item should have each variation of the product aspect values specified through the product.aspects container when the inventory item is created with the createOrReplaceInventoryItem or bulkCreateOrReplaceInventoryItem call. Max Length: 50
		/// </summary>
		public string[] Values { get; set; }
	}
	
	/// <summary>
	/// This type is used to enable the use of a sales tax table, to pass in a tax exception category code, or to specify a VAT percentage.
	/// </summary>
	public class Tax
	{
		
		/// <summary>
		/// This field will be included and set to true if the seller would like to reference their account-level Sales Tax Table to calculate sales tax for an order. A seller's Sales Tax Table can be created and managed manually in My eBay's Payment Preferences. This Sales Tax Table contains all tax jurisdictions for the seller's country (individual states and territories in US), and the seller can set the sales tax rate for these individual tax jurisdictions. The Trading API has a SetTaxTable call to add/modify sales tax rates for one or more tax jurisdictions, and a GetTaxTable call that will retrieve all tax jurisdictions and related data, such as the sales tax rate (if defined) and a boolean field to indicate if sales tax is applied to shipping and handling costs. The Account API has a getSalesTaxTable call to retrieve all tax jurisdictions that have a defined sales tax rate, a getSalesTaxTableEntry call to retrieve a sales tax rate for a specific tax jurisdiction, a createSalesTaxTableEntry call to set/modify a sales tax rate for a specific tax jurisdiction, and a deleteSalesTaxTableEntry call to remove a sales tax rate from a specific tax jurisdiction. Note that a seller can enable the use of a sales tax table, but if a sales tax rate is not specified for the buyer's state/tax jurisdiction, sales tax will not be applied to the order. If a thirdPartyTaxCategory value is used, the applyTax field must also be used and set to true This field will be returned if set for the offer. See the Using a tax table help page for more information on setting up and using a sales tax table.
		/// </summary>
		public bool ApplyTax { get; set; }
		
		/// <summary>
		/// The tax exception category code. If this field is used, sales tax will also apply to a service/fee, and not just the item price. This is to be used only by sellers who have opted into sales tax being calculated by a sales tax calculation vendor. If you are interested in becoming a tax calculation vendor partner with eBay, contact developer-relations@ebay.com. One supported value for this field is WASTE_RECYCLING_FEE. If this field is used, the applyTax field must also be used and set to true This field will be returned if set for the offer.
		/// </summary>
		public string ThirdPartyTaxCategory { get; set; }
		
		/// <summary>
		/// This value is the Value Add Tax (VAT) rate for the item, if any. When a VAT percentage is specified, the item's VAT information appears on the listing's View Item page. In addition, the seller can choose to print an invoice that includes the item's net price, VAT percent, VAT amount, and total price. Since VAT rates vary depending on the item and on the user's country of residence, a seller is responsible for entering the correct VAT rate; it is not calculated by eBay. To use VAT, a seller must be a business seller with a VAT-ID registered with eBay, and must be listing the item on a VAT-enabled site. Max applicable length is 6 characters, including the decimal (e.g., 12.345). The scale is 3 decimal places. (If you pass in 12.3456, eBay may round up the value to 12.346). This field will be returned if set for the offer.
		/// </summary>
		public float VatPercentage { get; set; }
	}
	
	/// <summary>
	/// This type is used by the fulfillmentTime container of the PickupAtLocationAvailability type to specify how soon orders will be ready for In-Store pickup after the purchase has occurred.
	/// </summary>
	public class TimeDuration
	{
		
		/// <summary>
		/// This enumeration value indicates the time unit used to specify the fulfillment time, such as HOUR. For implementation help, refer to <a href='https://developer.ebay.com/devzone/rest/api-ref/inventory/types/TimeDurationUnitEnum.html'>eBay API documentation</a>
		/// </summary>
		public string Unit { get; set; }
		
		/// <summary>
		/// The integer value in this field, along with the time unit in the unit field, will indicate how soon after an In-Store Pickup purchase can the buyer pick up the item at the designated store location. If the value of this field is 4, and the value of the unit field is HOUR, then the fulfillment time for the In-Store Pickup order is four hours, which means that the buyer will be able to pick up the item at the store four hours after the transaction took place.
		/// </summary>
		public int Value { get; set; }
	}
	
	/// <summary>
	/// This type is used to specify the product aspect(s) where individual items of the group vary, as well as a list of the available variations of those aspects.
	/// </summary>
	public class VariesBy
	{
		
		/// <summary>
		/// This container is used if the seller wants to include multiple images to demonstrate how variations within a multiple-variation listing differ. In this string field, the seller will specify the product aspect where the variations of the inventory item group vary, such as color. If Color is specified in this field, Color must also be one of the specifications.name values, and all available colors must appear in the corresponding specifications.values array. If the aspectsImageVariesBy container is used, links to images of each variation should be specified through the imageUrls container of the inventory item group, or the seller can choose to include those links to images in each inventory item record for the inventory items in the group.
		/// </summary>
		public string[] AspectsImageVariesBy { get; set; }
		
		/// <summary>
		/// This container consists of an array of one or more product aspects where each variation differs, and values for each of those product aspects. This container is not immediately required, but will be required before the first offer of the inventory item group is published. If a product aspect is specified in the aspectsImageVariesBy container, this product aspect (along with all variations of that product aspect) must be included in the specifications container. Before offers related to the inventory item group are published, the product aspects and values specified through the specifications container should be in synch with the name-value pairs specified through the product.aspects containers of the inventory items contained in the group. For example, if Color and Size are in this specifications container, each inventory item of the group should also have Color and Size as aspect names in their inventory item records. This container is always returned if one or more offers associated with the inventory item group have been published. For inventory item groups that have yet to have any published offers, this container is only returned if set.
		/// </summary>
		public Specification[] Specifications { get; set; }
	}
	
	/// <summary>
	/// This type is used to show the version number and instance of the service or API.
	/// </summary>
	public class Version
	{
		
		/// <summary>
		/// This type is used to show the version number and instance of the service or API.
		/// </summary>
		public Version Instance { get; set; }
		
		/// <summary>
		/// The version number of the service or API.
		/// </summary>
		public string Version1 { get; set; }
	}
	
	/// <summary>
	/// This type is used to specify the weight (and the unit used to measure that weight) of a shipping package. The weight container is conditionally required if the seller will be offering calculated shipping rates to determine shipping cost, or is using flat-rate costs, but charging a weight surcharge. See the Calculated shipping help page for more information on calculated shipping.
	/// </summary>
	public class Weight
	{
		
		/// <summary>
		/// The unit of measurement used to specify the weight of a shipping package. Both the unit and value fields are required if the weight container is used. If the English system of measurement is being used, the applicable values for weight units are POUND and OUNCE. If the metric system of measurement is being used, the applicable values for weight units are KILOGRAM and GRAM. The metric system is used by most countries outside of the US. For implementation help, refer to <a href='https://developer.ebay.com/devzone/rest/api-ref/inventory/types/WeightUnitOfMeasureEnum.html'>eBay API documentation</a>
		/// </summary>
		public string Unit { get; set; }
		
		/// <summary>
		/// The actual weight (in the measurement unit specified in the unit field) of the shipping package. Both the unit and value fields are required if the weight container is used. If a shipping package weighed 20.5 ounces, the container would look as follows: &quot;weight&quot;: {  &quot;value&quot;: 20.5,  &quot;unit&quot;: &quot;OUNCE&quot;  }
		/// </summary>
		public float Value { get; set; }
	}
	
	/// <summary>
	/// This type is used by the base request of the WithdrawByInventoryItemGroup method, which is used to end a multiple-variation listing.
	/// </summary>
	public class WithdrawByInventoryItemGroupRequest
	{
		
		/// <summary>
		/// This is the unique identifier of the inventory item group. This identifier is automatically generated by eBay once an inventory item group is created. This field is required.
		/// </summary>
		public string InventoryItemGroupKey { get; set; }
		
		/// <summary>
		/// This is the unique identifier of the eBay site for which the offer will be made available. The marketPlaceId enumeration values are found in MarketplaceIdEnum. This field is required. For implementation help, refer to <a href='https://developer.ebay.com/devzone/rest/api-ref/inventory/types/MarketplaceEnum.html'>eBay API documentation</a>
		/// </summary>
		public string MarketplaceId { get; set; }
	}
	
	/// <summary>
	/// The base response of the withdrawOffer call.
	/// </summary>
	public class WithdrawResponse
	{
		
		/// <summary>
		/// The unique identifier of the eBay listing associated with the offer that was withdrawn. This field will not be returned if the eBay listing was not successfully ended.
		/// </summary>
		public string ListingId { get; set; }
		
		/// <summary>
		/// This container will be returned if there were one or more warnings associated with the attempt to withdraw the offer.
		/// </summary>
		public Error[] Warnings { get; set; }
	}
	
	public partial class LocationClient
	{
		
		private System.Net.Http.HttpClient client;
		
		public LocationClient(System.Net.Http.HttpClient client)
		{
			if (client == null)
				throw new ArgumentNullException("Null HttpClient.", "client");

			if (client.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "client");

			this.client = client;
		}
		
		/// <summary>
		/// This call retrieves all defined details of the inventory location that is specified by the merchantLocationKey path parameter. The authorization HTTP header is the only required request header for this call. A successful call will return an HTTP status value of 200 OK.
		/// GetInventoryLocation location/{merchantLocationKey}
		/// </summary>
		/// <param name="merchantLocationKey">A unique merchant-defined key (ID) for an inventory location. This value is passed in at the end of the call URI to specify the inventory location to retrieve. Max length: 36</param>
		/// <returns>Success</returns>
		public async Task<InventoryLocationResponse> GetInventoryLocationAsync(string merchantLocationKey)
		{
			var requestUri = "location/"+Uri.EscapeDataString(merchantLocationKey);
			var responseMessage = await client.GetAsync(requestUri);
			try
			{
				responseMessage.EnsureSuccessStatusCode();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<InventoryLocationResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// This call retrieves all defined details of the inventory location that is specified by the merchantLocationKey path parameter. The authorization HTTP header is the only required request header for this call. A successful call will return an HTTP status value of 200 OK.
		/// GetInventoryLocation location/{merchantLocationKey}
		/// </summary>
		/// <param name="merchantLocationKey">A unique merchant-defined key (ID) for an inventory location. This value is passed in at the end of the call URI to specify the inventory location to retrieve. Max length: 36</param>
		/// <returns>Success</returns>
		public InventoryLocationResponse GetInventoryLocation(string merchantLocationKey)
		{
			var requestUri = "location/"+Uri.EscapeDataString(merchantLocationKey);
			var responseMessage = this.client.GetAsync(requestUri).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCode();
				var stream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<InventoryLocationResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Use this call to create a new inventory location. In order to create and publish an offer (and create an eBay listing), a seller must have at least one inventory location, as every offer must be associated with a location. Upon first creating an inventory location, only a seller-defined location identifier and a physical location is required, and once set, these values can not be changed. The unique identifier value (merchantLocationKey) is passed in at the end of the call URI. This merchantLocationKey value will be used in other Inventory Location calls to identify the inventory location to perform an action against. At this time, location types are either warehouse or store. Warehouse locations are used for traditional shipping, and store locations are generally used by US merchants selling products through the In-Store Pickup program, or used by UK, Australian, and German merchants selling products through the Click and Collect program. A full address is required for store inventory locations. However, for warehouse inventory locations, a full street address is not needed, but the city, state/province, and country of the location must be provided. Note that all inventory locations are &quot;enabled&quot; by default when they are created, and you must specifically disable them (by passing in a value of DISABLED in the merchantLocationStatus field) if you want them to be set to the disabled state. The seller's inventory cannot be loaded to inventory locations in the disabled state. In addition to the authorization header, which is required for all eBay REST API calls, the following table includes another request header that is mandatory for the createInventoryLocation call, and two other request headers that are optional: Header Description Required? Applicable Values Accept Describes the response encoding, as required by the caller. Currently, the interfaces require payloads formatted in JSON, and JSON is the default. No application/json Content-Language Use this header to control the language that is used for any returned errors or warnings in the call response. No en-US Content-Type The MIME type of the body of the request. Must be JSON. Yes application/json Unless one or more errors and/or warnings occur with the call, there is no response payload for this call. A successful call will return an HTTP status value of 204 No Content.
		/// CreateInventoryLocation location/{merchantLocationKey}
		/// </summary>
		/// <param name="merchantLocationKey">A unique, merchant-defined key (ID) for an inventory location. This unique identifier, or key, is used in other Inventory API calls to identify an inventory location. Max length: 36</param>
		/// <param name="requestBody">Inventory Location details</param>
		public async Task CreateInventoryLocationAsync(string merchantLocationKey, InventoryLocationFull requestBody)
		{
			var requestUri = "location/"+Uri.EscapeDataString(merchantLocationKey);
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create();
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			var responseMessage = await client.PostAsync(requestUri, content);
			try
			{
				responseMessage.EnsureSuccessStatusCode();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Use this call to create a new inventory location. In order to create and publish an offer (and create an eBay listing), a seller must have at least one inventory location, as every offer must be associated with a location. Upon first creating an inventory location, only a seller-defined location identifier and a physical location is required, and once set, these values can not be changed. The unique identifier value (merchantLocationKey) is passed in at the end of the call URI. This merchantLocationKey value will be used in other Inventory Location calls to identify the inventory location to perform an action against. At this time, location types are either warehouse or store. Warehouse locations are used for traditional shipping, and store locations are generally used by US merchants selling products through the In-Store Pickup program, or used by UK, Australian, and German merchants selling products through the Click and Collect program. A full address is required for store inventory locations. However, for warehouse inventory locations, a full street address is not needed, but the city, state/province, and country of the location must be provided. Note that all inventory locations are &quot;enabled&quot; by default when they are created, and you must specifically disable them (by passing in a value of DISABLED in the merchantLocationStatus field) if you want them to be set to the disabled state. The seller's inventory cannot be loaded to inventory locations in the disabled state. In addition to the authorization header, which is required for all eBay REST API calls, the following table includes another request header that is mandatory for the createInventoryLocation call, and two other request headers that are optional: Header Description Required? Applicable Values Accept Describes the response encoding, as required by the caller. Currently, the interfaces require payloads formatted in JSON, and JSON is the default. No application/json Content-Language Use this header to control the language that is used for any returned errors or warnings in the call response. No en-US Content-Type The MIME type of the body of the request. Must be JSON. Yes application/json Unless one or more errors and/or warnings occur with the call, there is no response payload for this call. A successful call will return an HTTP status value of 204 No Content.
		/// CreateInventoryLocation location/{merchantLocationKey}
		/// </summary>
		/// <param name="merchantLocationKey">A unique, merchant-defined key (ID) for an inventory location. This unique identifier, or key, is used in other Inventory API calls to identify an inventory location. Max length: 36</param>
		/// <param name="requestBody">Inventory Location details</param>
		public void CreateInventoryLocation(string merchantLocationKey, InventoryLocationFull requestBody)
		{
			var requestUri = "location/"+Uri.EscapeDataString(merchantLocationKey);
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create();
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			var responseMessage = this.client.PostAsync(requestUri, content).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCode();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// This call deletes the inventory location that is specified in the merchantLocationKey path parameter. Note that deleting a location will not affect any active eBay listings associated with the deleted location, but the seller will not be able modify the offers associated with the inventory location once it is deleted. The authorization HTTP header is the only required request header for this call. Unless one or more errors and/or warnings occur with the call, there is no response payload for this call. A successful call will return an HTTP status value of 200 OK.
		/// DeleteInventoryLocation location/{merchantLocationKey}
		/// </summary>
		/// <param name="merchantLocationKey">A unique merchant-defined key (ID) for an inventory location. This value is passed in at the end of the call URI to indicate the inventory location to be deleted. Max length: 36</param>
		public async Task DeleteInventoryLocationAsync(string merchantLocationKey)
		{
			var requestUri = "location/"+Uri.EscapeDataString(merchantLocationKey);
			var responseMessage = await client.DeleteAsync(requestUri);
			try
			{
				responseMessage.EnsureSuccessStatusCode();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// This call deletes the inventory location that is specified in the merchantLocationKey path parameter. Note that deleting a location will not affect any active eBay listings associated with the deleted location, but the seller will not be able modify the offers associated with the inventory location once it is deleted. The authorization HTTP header is the only required request header for this call. Unless one or more errors and/or warnings occur with the call, there is no response payload for this call. A successful call will return an HTTP status value of 200 OK.
		/// DeleteInventoryLocation location/{merchantLocationKey}
		/// </summary>
		/// <param name="merchantLocationKey">A unique merchant-defined key (ID) for an inventory location. This value is passed in at the end of the call URI to indicate the inventory location to be deleted. Max length: 36</param>
		public void DeleteInventoryLocation(string merchantLocationKey)
		{
			var requestUri = "location/"+Uri.EscapeDataString(merchantLocationKey);
			var responseMessage = this.client.DeleteAsync(requestUri).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCode();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// This call disables the inventory location that is specified in the merchantLocationKey path parameter. Sellers can not load/modify inventory to disabled inventory locations. Note that disabling an inventory location will not affect any active eBay listings associated with the disabled location, but the seller will not be able modify the offers associated with a disabled inventory location. The authorization HTTP header is the only required request header for this call. A successful call will return an HTTP status value of 200 OK.
		/// DisableInventoryLocation location/{merchantLocationKey}/disable
		/// </summary>
		/// <param name="merchantLocationKey">A unique merchant-defined key (ID) for an inventory location. This value is passed in through the call URI to disable the specified inventory location. Max length: 36</param>
		/// <returns>Success</returns>
		public async Task<string> DisableInventoryLocationAsync(string merchantLocationKey)
		{
			var requestUri = "location/"+Uri.EscapeDataString(merchantLocationKey)+"/disable";
			var responseMessage = await client.PostAsync(requestUri, new StringContent(String.Empty));
			try
			{
				responseMessage.EnsureSuccessStatusCode();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// This call disables the inventory location that is specified in the merchantLocationKey path parameter. Sellers can not load/modify inventory to disabled inventory locations. Note that disabling an inventory location will not affect any active eBay listings associated with the disabled location, but the seller will not be able modify the offers associated with a disabled inventory location. The authorization HTTP header is the only required request header for this call. A successful call will return an HTTP status value of 200 OK.
		/// DisableInventoryLocation location/{merchantLocationKey}/disable
		/// </summary>
		/// <param name="merchantLocationKey">A unique merchant-defined key (ID) for an inventory location. This value is passed in through the call URI to disable the specified inventory location. Max length: 36</param>
		/// <returns>Success</returns>
		public string DisableInventoryLocation(string merchantLocationKey)
		{
			var requestUri = "location/"+Uri.EscapeDataString(merchantLocationKey)+"/disable";
			var responseMessage = this.client.PostAsync(requestUri, new StringContent(String.Empty)).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCode();
				var stream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// This call enables a disabled inventory location that is specified in the merchantLocationKey path parameter. Once a disabled inventory location is enabled, sellers can start loading/modifying inventory to that inventory location. The authorization HTTP header is the only required request header for this call. A successful call will return an HTTP status value of 200 OK.
		/// EnableInventoryLocation location/{merchantLocationKey}/enable
		/// </summary>
		/// <param name="merchantLocationKey">A unique merchant-defined key (ID) for an inventory location. This value is passed in through the call URI to specify the disabled inventory location to enable. Max length: 36</param>
		/// <returns>Success</returns>
		public async Task<string> EnableInventoryLocationAsync(string merchantLocationKey)
		{
			var requestUri = "location/"+Uri.EscapeDataString(merchantLocationKey)+"/enable";
			var responseMessage = await client.PostAsync(requestUri, new StringContent(String.Empty));
			try
			{
				responseMessage.EnsureSuccessStatusCode();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// This call enables a disabled inventory location that is specified in the merchantLocationKey path parameter. Once a disabled inventory location is enabled, sellers can start loading/modifying inventory to that inventory location. The authorization HTTP header is the only required request header for this call. A successful call will return an HTTP status value of 200 OK.
		/// EnableInventoryLocation location/{merchantLocationKey}/enable
		/// </summary>
		/// <param name="merchantLocationKey">A unique merchant-defined key (ID) for an inventory location. This value is passed in through the call URI to specify the disabled inventory location to enable. Max length: 36</param>
		/// <returns>Success</returns>
		public string EnableInventoryLocation(string merchantLocationKey)
		{
			var requestUri = "location/"+Uri.EscapeDataString(merchantLocationKey)+"/enable";
			var responseMessage = this.client.PostAsync(requestUri, new StringContent(String.Empty)).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCode();
				var stream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// This call retrieves all defined details for every inventory location associated with the seller's account. There are no required parameters for this call and no request payload. However, there are two optional query parameters, limit and offset. The limit query parameter sets the maximum number of inventory locations returned on one page of data, and the offset query parameter specifies the page of data to return. These query parameters are discussed more in the URI parameters table below. The authorization HTTP header is the only required request header for this call. A successful call will return an HTTP status value of 200 OK.
		/// GetInventoryLocations location
		/// </summary>
		/// <param name="limit">The value passed in this query parameter sets the maximum number of records to return per page of data. Although this field is a string, the value passed in this field should be a positive integer value. If this query parameter is not set, up to 100 records will be returned on each page of results. Min: 1</param>
		/// <param name="offset">Specifies the number of locations to skip in the result set before returning the first location in the paginated response. Combine offset with the limit query parameter to control the items returned in the response. For example, if you supply an offset of 0 and a limit of 10, the first page of the response contains the first 10 items from the complete list of items retrieved by the call. If offset is 10 and limit is 20, the first page of the response contains items 11-30 from the complete result set. Default: 0</param>
		/// <returns>Success</returns>
		public async Task<LocationResponse> GetInventoryLocationsAsync(string limit, string offset)
		{
			var requestUri = "location?limit=" + Uri.EscapeDataString(limit)+"&offset=" + Uri.EscapeDataString(offset);
			var responseMessage = await client.GetAsync(requestUri);
			try
			{
				responseMessage.EnsureSuccessStatusCode();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<LocationResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// This call retrieves all defined details for every inventory location associated with the seller's account. There are no required parameters for this call and no request payload. However, there are two optional query parameters, limit and offset. The limit query parameter sets the maximum number of inventory locations returned on one page of data, and the offset query parameter specifies the page of data to return. These query parameters are discussed more in the URI parameters table below. The authorization HTTP header is the only required request header for this call. A successful call will return an HTTP status value of 200 OK.
		/// GetInventoryLocations location
		/// </summary>
		/// <param name="limit">The value passed in this query parameter sets the maximum number of records to return per page of data. Although this field is a string, the value passed in this field should be a positive integer value. If this query parameter is not set, up to 100 records will be returned on each page of results. Min: 1</param>
		/// <param name="offset">Specifies the number of locations to skip in the result set before returning the first location in the paginated response. Combine offset with the limit query parameter to control the items returned in the response. For example, if you supply an offset of 0 and a limit of 10, the first page of the response contains the first 10 items from the complete list of items retrieved by the call. If offset is 10 and limit is 20, the first page of the response contains items 11-30 from the complete result set. Default: 0</param>
		/// <returns>Success</returns>
		public LocationResponse GetInventoryLocations(string limit, string offset)
		{
			var requestUri = "location?limit=" + Uri.EscapeDataString(limit)+"&offset=" + Uri.EscapeDataString(offset);
			var responseMessage = this.client.GetAsync(requestUri).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCode();
				var stream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<LocationResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Use this call to update non-physical location details for an existing inventory location. Specify the inventory location you want to update using the merchantLocationKey path parameter. You can update the following text-based fields: name, phone, locationWebUrl, locationInstructions and locationAdditionalInformation. Whatever text is passed in for these fields in an updateInventoryLocation call will replace the current text strings defined for these fields. For store inventory locations, the operating hours and/or the special hours can also be updated. The merchant location key, the physical location of the store, and its geo-location coordinates can not be updated with an updateInventoryLocation call In addition to the authorization header, which is required for all eBay REST API calls, the following table includes another request header that is mandatory for the updateInventoryLocation call, and two other request headers that are optional: Header Description Required? Applicable Values Accept Describes the response encoding, as required by the caller. Currently, the interfaces require payloads formatted in JSON, and JSON is the default. No application/json Content-Language Use this header to control the language that is used for any returned errors or warnings in the call response. No en-US Content-Type The MIME type of the body of the request. Must be JSON. Yes application/json Unless one or more errors and/or warnings occurs with the call, there is no response payload for this call. A successful call will return an HTTP status value of 204 No Content.
		/// UpdateInventoryLocation location/{merchantLocationKey}/update_location_details
		/// </summary>
		/// <param name="merchantLocationKey">A unique merchant-defined key (ID) for an inventory location. This value is passed in the call URI to indicate the inventory location to be updated. Max length: 36</param>
		/// <param name="requestBody">The inventory location details to be updated (other than the address and geo co-ordinates).</param>
		public async Task UpdateInventoryLocationAsync(string merchantLocationKey, InventoryLocation requestBody)
		{
			var requestUri = "location/"+Uri.EscapeDataString(merchantLocationKey)+"/update_location_details";
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create();
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			var responseMessage = await client.PostAsync(requestUri, content);
			try
			{
				responseMessage.EnsureSuccessStatusCode();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Use this call to update non-physical location details for an existing inventory location. Specify the inventory location you want to update using the merchantLocationKey path parameter. You can update the following text-based fields: name, phone, locationWebUrl, locationInstructions and locationAdditionalInformation. Whatever text is passed in for these fields in an updateInventoryLocation call will replace the current text strings defined for these fields. For store inventory locations, the operating hours and/or the special hours can also be updated. The merchant location key, the physical location of the store, and its geo-location coordinates can not be updated with an updateInventoryLocation call In addition to the authorization header, which is required for all eBay REST API calls, the following table includes another request header that is mandatory for the updateInventoryLocation call, and two other request headers that are optional: Header Description Required? Applicable Values Accept Describes the response encoding, as required by the caller. Currently, the interfaces require payloads formatted in JSON, and JSON is the default. No application/json Content-Language Use this header to control the language that is used for any returned errors or warnings in the call response. No en-US Content-Type The MIME type of the body of the request. Must be JSON. Yes application/json Unless one or more errors and/or warnings occurs with the call, there is no response payload for this call. A successful call will return an HTTP status value of 204 No Content.
		/// UpdateInventoryLocation location/{merchantLocationKey}/update_location_details
		/// </summary>
		/// <param name="merchantLocationKey">A unique merchant-defined key (ID) for an inventory location. This value is passed in the call URI to indicate the inventory location to be updated. Max length: 36</param>
		/// <param name="requestBody">The inventory location details to be updated (other than the address and geo co-ordinates).</param>
		public void UpdateInventoryLocation(string merchantLocationKey, InventoryLocation requestBody)
		{
			var requestUri = "location/"+Uri.EscapeDataString(merchantLocationKey)+"/update_location_details";
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create();
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			var responseMessage = this.client.PostAsync(requestUri, content).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCode();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
	
	public partial class Inventory_itemClient
	{
		
		private System.Net.Http.HttpClient client;
		
		public Inventory_itemClient(System.Net.Http.HttpClient client)
		{
			if (client == null)
				throw new ArgumentNullException("Null HttpClient.", "client");

			if (client.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "client");

			this.client = client;
		}
		
		/// <summary>
		/// This call retrieves the inventory item record for a given SKU. The SKU value is passed in at the end of the call URI. There is no request payload for this call. The authorization header is the only required HTTP header for this call, and it is required for all Inventory API calls. See the HTTP request headers section for more information. For those who prefer to retrieve numerous inventory item records by SKU value with one call (up to 25 at a time), the bulkGetInventoryItem method can be used. To retrieve all inventory item records defined on the seller's account, the getInventoryItems method can be used (with pagination control if desired).
		/// GetInventoryItem inventory_item/{sku}
		/// </summary>
		/// <param name="sku">This is the seller-defined SKU value of the product whose inventory item record you wish to retrieve. Max length: 50.</param>
		/// <returns>Success</returns>
		public async Task<InventoryItemWithSkuLocaleGroupid> GetInventoryItemAsync(string sku)
		{
			var requestUri = "inventory_item/"+Uri.EscapeDataString(sku);
			var responseMessage = await client.GetAsync(requestUri);
			try
			{
				responseMessage.EnsureSuccessStatusCode();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<InventoryItemWithSkuLocaleGroupid>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// This call retrieves the inventory item record for a given SKU. The SKU value is passed in at the end of the call URI. There is no request payload for this call. The authorization header is the only required HTTP header for this call, and it is required for all Inventory API calls. See the HTTP request headers section for more information. For those who prefer to retrieve numerous inventory item records by SKU value with one call (up to 25 at a time), the bulkGetInventoryItem method can be used. To retrieve all inventory item records defined on the seller's account, the getInventoryItems method can be used (with pagination control if desired).
		/// GetInventoryItem inventory_item/{sku}
		/// </summary>
		/// <param name="sku">This is the seller-defined SKU value of the product whose inventory item record you wish to retrieve. Max length: 50.</param>
		/// <returns>Success</returns>
		public InventoryItemWithSkuLocaleGroupid GetInventoryItem(string sku)
		{
			var requestUri = "inventory_item/"+Uri.EscapeDataString(sku);
			var responseMessage = this.client.GetAsync(requestUri).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCode();
				var stream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<InventoryItemWithSkuLocaleGroupid>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Note: Please note that any eBay listing created using the Inventory API cannot be revised or relisted using the Trading API calls. This call creates a new inventory item record or replaces an existing inventory item record. It is up to sellers whether they want to create a complete inventory item record right from the start, or sellers can provide only some information with the initial createOrReplaceInventoryItem call, and then make one or more additional createOrReplaceInventoryItem calls to complete all required fields for the inventory item record and prepare it for publishing. Upon first creating an inventory item record, only the SKU value in the call path is required. In the case of replacing an existing inventory item record, the createOrReplaceInventoryItem call will do a complete replacement of the existing inventory item record, so all fields that are currently defined for the inventory item record are required in that update action, regardless of whether their values changed. So, when replacing/updating an inventory item record, it is advised that the seller run a getInventoryItem call to retrieve the full inventory item record and see all of its current values/settings before attempting to update the record. And if changes are made to an inventory item that is part of one or more active eBay listings, a successful call will automatically update these eBay listings. The key information that is set with the createOrReplaceInventoryItem call include: Seller-defined SKU value for the product. Each seller product, including products within an item inventory group, must have their own SKU value. This SKU value is passed in at the end of the call URI Condition of the item Product details, including any product identifier(s), such as a UPC, ISBN, EAN, or Brand/Manufacturer Part Number pair, a product description, a product title, product/item aspects, and links to images. eBay will use any supplied eBay Product ID (ePID) or a GTIN (UPC, ISBN, or EAN) and attempt to match those identifiers to a product in the eBay Catalog, and if a product match is found, the product details for the inventory item will automatically be populated. Quantity of the inventory item that is available for purchase Package weight and dimensions, which is required if the seller will be offering calculated shipping options. The package weight will also be required if the seller will be providing flat-rate shipping services, but charging a weight surcharge. In addition to the authorization header, which is required for all eBay REST API calls, the createOrReplaceInventoryItem call also requires the Content-Language header, that sets the natural language that will be used in the field values of the request payload. For US English, the code value passed in this header should be en-US. To view other supported Content-Language values, and to read more about all supported HTTP headers for eBay REST API calls, see the HTTP request headers topic in the Using eBay RESTful APIs document. For those who prefer to create or update numerous inventory item records with one call (up to 25 at a time), the bulkCreateOrReplaceInventoryItem method can be used.
		/// CreateOrReplaceInventoryItem inventory_item/{sku}
		/// </summary>
		/// <param name="sku">The seller-defined SKU value for the inventory item is required whether the seller is creating a new inventory item, or updating an existing inventory item. This SKU value is passed in at the end of the call URI. SKU values must be unique across the seller's inventory. Max length: 50.</param>
		/// <param name="requestBody">Details of the inventory item record.</param>
		/// <returns>Success</returns>
		public async Task<BaseResponse> CreateOrReplaceInventoryItemAsync(string sku, InventoryItem requestBody)
		{
			var requestUri = "inventory_item/"+Uri.EscapeDataString(sku);
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create();
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			var responseMessage = await client.PutAsync(requestUri, content);
			try
			{
				responseMessage.EnsureSuccessStatusCode();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<BaseResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Note: Please note that any eBay listing created using the Inventory API cannot be revised or relisted using the Trading API calls. This call creates a new inventory item record or replaces an existing inventory item record. It is up to sellers whether they want to create a complete inventory item record right from the start, or sellers can provide only some information with the initial createOrReplaceInventoryItem call, and then make one or more additional createOrReplaceInventoryItem calls to complete all required fields for the inventory item record and prepare it for publishing. Upon first creating an inventory item record, only the SKU value in the call path is required. In the case of replacing an existing inventory item record, the createOrReplaceInventoryItem call will do a complete replacement of the existing inventory item record, so all fields that are currently defined for the inventory item record are required in that update action, regardless of whether their values changed. So, when replacing/updating an inventory item record, it is advised that the seller run a getInventoryItem call to retrieve the full inventory item record and see all of its current values/settings before attempting to update the record. And if changes are made to an inventory item that is part of one or more active eBay listings, a successful call will automatically update these eBay listings. The key information that is set with the createOrReplaceInventoryItem call include: Seller-defined SKU value for the product. Each seller product, including products within an item inventory group, must have their own SKU value. This SKU value is passed in at the end of the call URI Condition of the item Product details, including any product identifier(s), such as a UPC, ISBN, EAN, or Brand/Manufacturer Part Number pair, a product description, a product title, product/item aspects, and links to images. eBay will use any supplied eBay Product ID (ePID) or a GTIN (UPC, ISBN, or EAN) and attempt to match those identifiers to a product in the eBay Catalog, and if a product match is found, the product details for the inventory item will automatically be populated. Quantity of the inventory item that is available for purchase Package weight and dimensions, which is required if the seller will be offering calculated shipping options. The package weight will also be required if the seller will be providing flat-rate shipping services, but charging a weight surcharge. In addition to the authorization header, which is required for all eBay REST API calls, the createOrReplaceInventoryItem call also requires the Content-Language header, that sets the natural language that will be used in the field values of the request payload. For US English, the code value passed in this header should be en-US. To view other supported Content-Language values, and to read more about all supported HTTP headers for eBay REST API calls, see the HTTP request headers topic in the Using eBay RESTful APIs document. For those who prefer to create or update numerous inventory item records with one call (up to 25 at a time), the bulkCreateOrReplaceInventoryItem method can be used.
		/// CreateOrReplaceInventoryItem inventory_item/{sku}
		/// </summary>
		/// <param name="sku">The seller-defined SKU value for the inventory item is required whether the seller is creating a new inventory item, or updating an existing inventory item. This SKU value is passed in at the end of the call URI. SKU values must be unique across the seller's inventory. Max length: 50.</param>
		/// <param name="requestBody">Details of the inventory item record.</param>
		/// <returns>Success</returns>
		public BaseResponse CreateOrReplaceInventoryItem(string sku, InventoryItem requestBody)
		{
			var requestUri = "inventory_item/"+Uri.EscapeDataString(sku);
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create();
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			var responseMessage = this.client.PutAsync(requestUri, content).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCode();
				var stream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<BaseResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// This call is used to delete an inventory item record associated with a specified SKU. A successful call will not only delete that inventory item record, but will also have the following effects: Delete any and all unpublished offers associated with that SKU; Delete any and all single-variation eBay listings associated with that SKU; Automatically remove that SKU from a multiple-variation listing and remove that SKU from any and all inventory item groups in which that SKU was a member. The authorization header is the only required HTTP header for this call. See the HTTP request headers section for more information.
		/// DeleteInventoryItem inventory_item/{sku}
		/// </summary>
		/// <param name="sku">This is the seller-defined SKU value of the product whose inventory item record you wish to delete. Max length: 50.</param>
		public async Task DeleteInventoryItemAsync(string sku)
		{
			var requestUri = "inventory_item/"+Uri.EscapeDataString(sku);
			var responseMessage = await client.DeleteAsync(requestUri);
			try
			{
				responseMessage.EnsureSuccessStatusCode();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// This call is used to delete an inventory item record associated with a specified SKU. A successful call will not only delete that inventory item record, but will also have the following effects: Delete any and all unpublished offers associated with that SKU; Delete any and all single-variation eBay listings associated with that SKU; Automatically remove that SKU from a multiple-variation listing and remove that SKU from any and all inventory item groups in which that SKU was a member. The authorization header is the only required HTTP header for this call. See the HTTP request headers section for more information.
		/// DeleteInventoryItem inventory_item/{sku}
		/// </summary>
		/// <param name="sku">This is the seller-defined SKU value of the product whose inventory item record you wish to delete. Max length: 50.</param>
		public void DeleteInventoryItem(string sku)
		{
			var requestUri = "inventory_item/"+Uri.EscapeDataString(sku);
			var responseMessage = this.client.DeleteAsync(requestUri).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCode();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// This call retrieves all inventory item records defined for the seller's account. The limit query parameter allows the seller to control how many records are returned per page, and the offset query parameter is used to retrieve a specific page of records. The seller can make multiple calls to scan through multiple pages of records. There is no request payload for this call. The authorization header is the only required HTTP header for this call, and it is required for all Inventory API calls. See the HTTP request headers section for more information. For those who prefer to retrieve numerous inventory item records by SKU value with one call (up to 25 at a time), the bulkGetInventoryItem method can be used.
		/// GetInventoryItems inventory_item
		/// </summary>
		/// <param name="limit">The value passed in this query parameter sets the maximum number of records to return per page of data. Although this field is a string, the value passed in this field should be an integer from 1 to 100. If this query parameter is not set, up to 100 records will be returned on each page of results. Min: 1, Max: 100</param>
		/// <param name="offset">The value passed in this query parameter sets the page number to retrieve. The first page of records has a value of 0, the second page of records has a value of 1, and so on. If this query parameter is not set, its value defaults to 0, and the first page of records is returned.</param>
		/// <returns>Success</returns>
		public async Task<InventoryItems> GetInventoryItemsAsync(string limit, string offset)
		{
			var requestUri = "inventory_item?limit=" + Uri.EscapeDataString(limit)+"&offset=" + Uri.EscapeDataString(offset);
			var responseMessage = await client.GetAsync(requestUri);
			try
			{
				responseMessage.EnsureSuccessStatusCode();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<InventoryItems>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// This call retrieves all inventory item records defined for the seller's account. The limit query parameter allows the seller to control how many records are returned per page, and the offset query parameter is used to retrieve a specific page of records. The seller can make multiple calls to scan through multiple pages of records. There is no request payload for this call. The authorization header is the only required HTTP header for this call, and it is required for all Inventory API calls. See the HTTP request headers section for more information. For those who prefer to retrieve numerous inventory item records by SKU value with one call (up to 25 at a time), the bulkGetInventoryItem method can be used.
		/// GetInventoryItems inventory_item
		/// </summary>
		/// <param name="limit">The value passed in this query parameter sets the maximum number of records to return per page of data. Although this field is a string, the value passed in this field should be an integer from 1 to 100. If this query parameter is not set, up to 100 records will be returned on each page of results. Min: 1, Max: 100</param>
		/// <param name="offset">The value passed in this query parameter sets the page number to retrieve. The first page of records has a value of 0, the second page of records has a value of 1, and so on. If this query parameter is not set, its value defaults to 0, and the first page of records is returned.</param>
		/// <returns>Success</returns>
		public InventoryItems GetInventoryItems(string limit, string offset)
		{
			var requestUri = "inventory_item?limit=" + Uri.EscapeDataString(limit)+"&offset=" + Uri.EscapeDataString(offset);
			var responseMessage = this.client.GetAsync(requestUri).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCode();
				var stream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<InventoryItems>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// This call is used by the seller to update the total ship-to-home quantity of one inventory item, and/or to update the price and/or quantity of one or more offers associated with one inventory item. Up to 25 offers associated with an inventory item may be updated with one bulkUpdatePriceQuantity call. Only one SKU (one product) can be updated per call. The getOffers call can be used to retrieve all offers associated with a SKU. The seller will just pass in the correct SKU value through the sku query parameter. To update an offer, the offerId value is required, and this value is returned in the getOffers call response. It is also useful to know which offers are unpublished and which ones are published. To get this status, look for the status value in the getOffers call response. Offers in the published state are live eBay listings, and these listings will be revised with a successful bulkUpdatePriceQuantity call. An issue will occur if duplicate offerId values are passed through the same offers container, or if one or more of the specified offers are associated with different products/SKUs. Note: For multiple-variation listings, it is recommended that the bulkUpdatePriceQuantity call be used to update price and quantity information for each SKU within that multiple-variation listing instead of using createOrReplaceInventoryItem calls to update the price and quantity for each SKU. Just remember that only one SKU (one product variation) can be updated per call. The authorization header is the only required HTTP header for this call. See the HTTP request headers section for more information.
		/// BulkUpdatePriceQuantity bulk_update_price_quantity
		/// </summary>
		/// <param name="requestBody">Price and allocation details for the given SKU and Marketplace</param>
		/// <returns>Success</returns>
		public async Task<BulkPriceQuantityResponse> BulkUpdatePriceQuantityAsync(BulkPriceQuantity requestBody)
		{
			var requestUri = "bulk_update_price_quantity";
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create();
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			var responseMessage = await client.PostAsync(requestUri, content);
			try
			{
				responseMessage.EnsureSuccessStatusCode();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<BulkPriceQuantityResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// This call is used by the seller to update the total ship-to-home quantity of one inventory item, and/or to update the price and/or quantity of one or more offers associated with one inventory item. Up to 25 offers associated with an inventory item may be updated with one bulkUpdatePriceQuantity call. Only one SKU (one product) can be updated per call. The getOffers call can be used to retrieve all offers associated with a SKU. The seller will just pass in the correct SKU value through the sku query parameter. To update an offer, the offerId value is required, and this value is returned in the getOffers call response. It is also useful to know which offers are unpublished and which ones are published. To get this status, look for the status value in the getOffers call response. Offers in the published state are live eBay listings, and these listings will be revised with a successful bulkUpdatePriceQuantity call. An issue will occur if duplicate offerId values are passed through the same offers container, or if one or more of the specified offers are associated with different products/SKUs. Note: For multiple-variation listings, it is recommended that the bulkUpdatePriceQuantity call be used to update price and quantity information for each SKU within that multiple-variation listing instead of using createOrReplaceInventoryItem calls to update the price and quantity for each SKU. Just remember that only one SKU (one product variation) can be updated per call. The authorization header is the only required HTTP header for this call. See the HTTP request headers section for more information.
		/// BulkUpdatePriceQuantity bulk_update_price_quantity
		/// </summary>
		/// <param name="requestBody">Price and allocation details for the given SKU and Marketplace</param>
		/// <returns>Success</returns>
		public BulkPriceQuantityResponse BulkUpdatePriceQuantity(BulkPriceQuantity requestBody)
		{
			var requestUri = "bulk_update_price_quantity";
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create();
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			var responseMessage = this.client.PostAsync(requestUri, content).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCode();
				var stream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<BulkPriceQuantityResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Note: Please note that any eBay listing created using the Inventory API cannot be revised or relisted using the Trading API calls. This call can be used to create and/or update up to 25 new inventory item records. It is up to sellers whether they want to create a complete inventory item records right from the start, or sellers can provide only some information with the initial bulkCreateOrReplaceInventoryItem call, and then make one or more additional bulkCreateOrReplaceInventoryItem calls to complete all required fields for the inventory item records and prepare for publishing. Upon first creating inventory item records, only the SKU values are required. In the case of updating existing inventory item records, the bulkCreateOrReplaceInventoryItem call will do a complete replacement of the existing inventory item records, so all fields that are currently defined for the inventory item record are required in that update action, regardless of whether their values changed. So, when replacing/updating an inventory item record, it is advised that the seller run a 'Get' call to retrieve the full details of the inventory item records and see all of its current values/settings before attempting to update the records. Any changes that are made to inventory item records that are part of one or more active eBay listings, a successful call will automatically update these active listings. The key information that is set with the bulkCreateOrReplaceInventoryItem call include: Seller-defined SKU value for the product. Each seller product, including products within an item inventory group, must have their own SKU value. Condition of the item Product details, including any product identifier(s), such as a UPC, ISBN, EAN, or Brand/Manufacturer Part Number pair, a product description, a product title, product/item aspects, and links to images. eBay will use any supplied eBay Product ID (ePID) or a GTIN (UPC, ISBN, or EAN) and attempt to match those identifiers to a product in the eBay Catalog, and if a product match is found, the product details for the inventory item will automatically be populated. Quantity of the inventory item that is available for purchase Package weight and dimensions, which is required if the seller will be offering calculated shipping options. The package weight will also be required if the seller will be providing flat-rate shipping services, but charging a weight surcharge. In addition to the authorization header, which is required for all eBay REST API calls, the bulkCreateOrReplaceInventoryItem call also requires the Content-Language header, that sets the natural language that will be used in the field values of the request payload. For US English, the code value passed in this header should be en-US. To view other supported Content-Language values, and to read more about all supported HTTP headers for eBay REST API calls, see the HTTP request headers topic in the Using eBay RESTful APIs document. For those who prefer to create or update a single inventory item record, the createOrReplaceInventoryItem method can be used.
		/// BulkCreateOrReplaceInventoryItem bulk_create_or_replace_inventory_item
		/// </summary>
		/// <param name="requestBody">Details of the inventories with sku and locale</param>
		/// <returns>Success</returns>
		public async Task<BulkInventoryItemResponse> BulkCreateOrReplaceInventoryItemAsync(BulkInventoryItem requestBody)
		{
			var requestUri = "bulk_create_or_replace_inventory_item";
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create();
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			var responseMessage = await client.PostAsync(requestUri, content);
			try
			{
				responseMessage.EnsureSuccessStatusCode();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<BulkInventoryItemResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Note: Please note that any eBay listing created using the Inventory API cannot be revised or relisted using the Trading API calls. This call can be used to create and/or update up to 25 new inventory item records. It is up to sellers whether they want to create a complete inventory item records right from the start, or sellers can provide only some information with the initial bulkCreateOrReplaceInventoryItem call, and then make one or more additional bulkCreateOrReplaceInventoryItem calls to complete all required fields for the inventory item records and prepare for publishing. Upon first creating inventory item records, only the SKU values are required. In the case of updating existing inventory item records, the bulkCreateOrReplaceInventoryItem call will do a complete replacement of the existing inventory item records, so all fields that are currently defined for the inventory item record are required in that update action, regardless of whether their values changed. So, when replacing/updating an inventory item record, it is advised that the seller run a 'Get' call to retrieve the full details of the inventory item records and see all of its current values/settings before attempting to update the records. Any changes that are made to inventory item records that are part of one or more active eBay listings, a successful call will automatically update these active listings. The key information that is set with the bulkCreateOrReplaceInventoryItem call include: Seller-defined SKU value for the product. Each seller product, including products within an item inventory group, must have their own SKU value. Condition of the item Product details, including any product identifier(s), such as a UPC, ISBN, EAN, or Brand/Manufacturer Part Number pair, a product description, a product title, product/item aspects, and links to images. eBay will use any supplied eBay Product ID (ePID) or a GTIN (UPC, ISBN, or EAN) and attempt to match those identifiers to a product in the eBay Catalog, and if a product match is found, the product details for the inventory item will automatically be populated. Quantity of the inventory item that is available for purchase Package weight and dimensions, which is required if the seller will be offering calculated shipping options. The package weight will also be required if the seller will be providing flat-rate shipping services, but charging a weight surcharge. In addition to the authorization header, which is required for all eBay REST API calls, the bulkCreateOrReplaceInventoryItem call also requires the Content-Language header, that sets the natural language that will be used in the field values of the request payload. For US English, the code value passed in this header should be en-US. To view other supported Content-Language values, and to read more about all supported HTTP headers for eBay REST API calls, see the HTTP request headers topic in the Using eBay RESTful APIs document. For those who prefer to create or update a single inventory item record, the createOrReplaceInventoryItem method can be used.
		/// BulkCreateOrReplaceInventoryItem bulk_create_or_replace_inventory_item
		/// </summary>
		/// <param name="requestBody">Details of the inventories with sku and locale</param>
		/// <returns>Success</returns>
		public BulkInventoryItemResponse BulkCreateOrReplaceInventoryItem(BulkInventoryItem requestBody)
		{
			var requestUri = "bulk_create_or_replace_inventory_item";
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create();
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			var responseMessage = this.client.PostAsync(requestUri, content).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCode();
				var stream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<BulkInventoryItemResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// This call retrieves up to 25 inventory item records. The SKU value of each inventory item record to retrieve is specified in the request payload. The authorization header is the only required HTTP header for this call, and it is required for all Inventory API calls. See the HTTP request headers section for more information. For those who prefer to retrieve only one inventory item record by SKU value, , the getInventoryItem method can be used. To retrieve all inventory item records defined on the seller's account, the getInventoryItems method can be used (with pagination control if desired).
		/// BulkGetInventoryItem bulk_get_inventory_item
		/// </summary>
		/// <param name="requestBody">Details of the inventories with sku and locale</param>
		/// <returns>Success</returns>
		public async Task<BulkGetInventoryItemResponse> BulkGetInventoryItemAsync(BulkGetInventoryItem requestBody)
		{
			var requestUri = "bulk_get_inventory_item";
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create();
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			var responseMessage = await client.PostAsync(requestUri, content);
			try
			{
				responseMessage.EnsureSuccessStatusCode();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<BulkGetInventoryItemResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// This call retrieves up to 25 inventory item records. The SKU value of each inventory item record to retrieve is specified in the request payload. The authorization header is the only required HTTP header for this call, and it is required for all Inventory API calls. See the HTTP request headers section for more information. For those who prefer to retrieve only one inventory item record by SKU value, , the getInventoryItem method can be used. To retrieve all inventory item records defined on the seller's account, the getInventoryItems method can be used (with pagination control if desired).
		/// BulkGetInventoryItem bulk_get_inventory_item
		/// </summary>
		/// <param name="requestBody">Details of the inventories with sku and locale</param>
		/// <returns>Success</returns>
		public BulkGetInventoryItemResponse BulkGetInventoryItem(BulkGetInventoryItem requestBody)
		{
			var requestUri = "bulk_get_inventory_item";
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create();
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			var responseMessage = this.client.PostAsync(requestUri, content).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCode();
				var stream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<BulkGetInventoryItemResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
	
	public partial class Product_compatibilityClient
	{
		
		private System.Net.Http.HttpClient client;
		
		public Product_compatibilityClient(System.Net.Http.HttpClient client)
		{
			if (client == null)
				throw new ArgumentNullException("Null HttpClient.", "client");

			if (client.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "client");

			this.client = client;
		}
		
		/// <summary>
		/// This call is used by the seller to retrieve the list of products that are compatible with the inventory item. The SKU value for the inventory item is passed into the call URI, and a successful call with return the compatible vehicle list associated with this inventory item. Product compatibility is currently only applicable to motor vehicle parts and accessory categories, but more categories may be supported in the future.
		/// GetProductCompatibility inventory_item/{sku}/product_compatibility
		/// </summary>
		/// <param name="sku">A SKU (stock keeping unit) is an unique identifier defined by a seller for a product</param>
		/// <returns>Success</returns>
		public async Task<Compatibility> GetProductCompatibilityAsync(string sku)
		{
			var requestUri = "inventory_item/"+Uri.EscapeDataString(sku)+"/product_compatibility";
			var responseMessage = await client.GetAsync(requestUri);
			try
			{
				responseMessage.EnsureSuccessStatusCode();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<Compatibility>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// This call is used by the seller to retrieve the list of products that are compatible with the inventory item. The SKU value for the inventory item is passed into the call URI, and a successful call with return the compatible vehicle list associated with this inventory item. Product compatibility is currently only applicable to motor vehicle parts and accessory categories, but more categories may be supported in the future.
		/// GetProductCompatibility inventory_item/{sku}/product_compatibility
		/// </summary>
		/// <param name="sku">A SKU (stock keeping unit) is an unique identifier defined by a seller for a product</param>
		/// <returns>Success</returns>
		public Compatibility GetProductCompatibility(string sku)
		{
			var requestUri = "inventory_item/"+Uri.EscapeDataString(sku)+"/product_compatibility";
			var responseMessage = this.client.GetAsync(requestUri).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCode();
				var stream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<Compatibility>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// This call is used by the seller to create or replace a list of products that are compatible with the inventory item. The inventory item is identified with a SKU value in the URI. Product compatibility is currently only applicable to motor vehicle parts and accessory categories, but more categories may be supported in the future. In addition to the authorization header, which is required for all eBay REST API calls, the createOrReplaceProductCompatibility call also requires the Content-Language header, that sets the natural language that will be used in the field values of the request payload. For US English, the code value passed in this header should be en-US. To view other supported Content-Language values, and to read more about all supported HTTP headers for eBay REST API calls, see the HTTP request headers topic in the Using eBay RESTful APIs document.
		/// CreateOrReplaceProductCompatibility inventory_item/{sku}/product_compatibility
		/// </summary>
		/// <param name="sku">A SKU (stock keeping unit) is an unique identifier defined by a seller for a product</param>
		/// <param name="requestBody">Details of the compatibility</param>
		/// <returns>Success</returns>
		public async Task<BaseResponse> CreateOrReplaceProductCompatibilityAsync(string sku, Compatibility requestBody)
		{
			var requestUri = "inventory_item/"+Uri.EscapeDataString(sku)+"/product_compatibility";
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create();
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			var responseMessage = await client.PutAsync(requestUri, content);
			try
			{
				responseMessage.EnsureSuccessStatusCode();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<BaseResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// This call is used by the seller to create or replace a list of products that are compatible with the inventory item. The inventory item is identified with a SKU value in the URI. Product compatibility is currently only applicable to motor vehicle parts and accessory categories, but more categories may be supported in the future. In addition to the authorization header, which is required for all eBay REST API calls, the createOrReplaceProductCompatibility call also requires the Content-Language header, that sets the natural language that will be used in the field values of the request payload. For US English, the code value passed in this header should be en-US. To view other supported Content-Language values, and to read more about all supported HTTP headers for eBay REST API calls, see the HTTP request headers topic in the Using eBay RESTful APIs document.
		/// CreateOrReplaceProductCompatibility inventory_item/{sku}/product_compatibility
		/// </summary>
		/// <param name="sku">A SKU (stock keeping unit) is an unique identifier defined by a seller for a product</param>
		/// <param name="requestBody">Details of the compatibility</param>
		/// <returns>Success</returns>
		public BaseResponse CreateOrReplaceProductCompatibility(string sku, Compatibility requestBody)
		{
			var requestUri = "inventory_item/"+Uri.EscapeDataString(sku)+"/product_compatibility";
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create();
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			var responseMessage = this.client.PutAsync(requestUri, content).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCode();
				var stream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<BaseResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// This call is used by the seller to delete the list of products that are compatible with the inventory item that is associated with the compatible product list. The inventory item is identified with a SKU value in the URI. Product compatibility is currently only applicable to motor vehicle parts and accessory categories, but more categories may be supported in the future.
		/// DeleteProductCompatibility inventory_item/{sku}/product_compatibility
		/// </summary>
		/// <param name="sku">A SKU (stock keeping unit) is an unique identifier defined by a seller for a product</param>
		public async Task DeleteProductCompatibilityAsync(string sku)
		{
			var requestUri = "inventory_item/"+Uri.EscapeDataString(sku)+"/product_compatibility";
			var responseMessage = await client.DeleteAsync(requestUri);
			try
			{
				responseMessage.EnsureSuccessStatusCode();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// This call is used by the seller to delete the list of products that are compatible with the inventory item that is associated with the compatible product list. The inventory item is identified with a SKU value in the URI. Product compatibility is currently only applicable to motor vehicle parts and accessory categories, but more categories may be supported in the future.
		/// DeleteProductCompatibility inventory_item/{sku}/product_compatibility
		/// </summary>
		/// <param name="sku">A SKU (stock keeping unit) is an unique identifier defined by a seller for a product</param>
		public void DeleteProductCompatibility(string sku)
		{
			var requestUri = "inventory_item/"+Uri.EscapeDataString(sku)+"/product_compatibility";
			var responseMessage = this.client.DeleteAsync(requestUri).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCode();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
	}
	
	public partial class OfferClient
	{
		
		private System.Net.Http.HttpClient client;
		
		public OfferClient(System.Net.Http.HttpClient client)
		{
			if (client == null)
				throw new ArgumentNullException("Null HttpClient.", "client");

			if (client.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "client");

			this.client = client;
		}
		
		/// <summary>
		/// This call retrieves all existing offers for the specified SKU value. The seller has the option of limiting the offers that are retrieved to a specific eBay marketplace, or to a listing format. Note: At this time, the same SKU value can not be offered across multiple eBay marketplaces, and the only supported listing format is fixed-price, so the marketplace_id and format query parameters currently do not have any practical use for this call. The authorization header is the only required HTTP header for this call. See the HTTP request headers section for more information.
		/// GetOffers offer
		/// </summary>
		/// <param name="sku">The seller-defined SKU value is passed in as a query parameter. All offers associated with this product are returned in the response. Max length: 50.</param>
		/// <param name="marketplace_id">The unique identifier of the eBay marketplace. This query parameter will be passed in if the seller only wants to see the product's offers on a specific eBay marketplace. Note: At this time, the same SKU value can not be offered across multiple eBay marketplaces, so the marketplace_id query parameter currently does not have any practical use for this call.</param>
		/// <param name="format">This enumeration value sets the listing format for the offer. This query parameter will be passed in if the seller only wants to see offers in this specified listing format. Note: At this time, the only supported listing format is fixed-price, so the format query parameter currently does not have any practical use for this call.</param>
		/// <param name="limit">The value passed in this query parameter sets the maximum number of records to return per page of data. Although this field is a string, the value passed in this field should be a positive integer value. If this query parameter is not set, up to 100 records will be returned on each page of results.</param>
		/// <param name="offset">The value passed in this query parameter sets the page number to retrieve. Although this field is a string, the value passed in this field should be a integer value equal to or greater than 0. The first page of records has a value of 0, the second page of records has a value of 1, and so on. If this query parameter is not set, its value defaults to 0, and the first page of records is returned.</param>
		/// <returns>Success</returns>
		public async Task<Offers> GetOffersAsync(string sku, string marketplace_id, string format, string limit, string offset)
		{
			var requestUri = "offer?sku=" + Uri.EscapeDataString(sku)+"&marketplace_id=" + Uri.EscapeDataString(marketplace_id)+"&format=" + Uri.EscapeDataString(format)+"&limit=" + Uri.EscapeDataString(limit)+"&offset=" + Uri.EscapeDataString(offset);
			var responseMessage = await client.GetAsync(requestUri);
			try
			{
				responseMessage.EnsureSuccessStatusCode();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<Offers>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// This call retrieves all existing offers for the specified SKU value. The seller has the option of limiting the offers that are retrieved to a specific eBay marketplace, or to a listing format. Note: At this time, the same SKU value can not be offered across multiple eBay marketplaces, and the only supported listing format is fixed-price, so the marketplace_id and format query parameters currently do not have any practical use for this call. The authorization header is the only required HTTP header for this call. See the HTTP request headers section for more information.
		/// GetOffers offer
		/// </summary>
		/// <param name="sku">The seller-defined SKU value is passed in as a query parameter. All offers associated with this product are returned in the response. Max length: 50.</param>
		/// <param name="marketplace_id">The unique identifier of the eBay marketplace. This query parameter will be passed in if the seller only wants to see the product's offers on a specific eBay marketplace. Note: At this time, the same SKU value can not be offered across multiple eBay marketplaces, so the marketplace_id query parameter currently does not have any practical use for this call.</param>
		/// <param name="format">This enumeration value sets the listing format for the offer. This query parameter will be passed in if the seller only wants to see offers in this specified listing format. Note: At this time, the only supported listing format is fixed-price, so the format query parameter currently does not have any practical use for this call.</param>
		/// <param name="limit">The value passed in this query parameter sets the maximum number of records to return per page of data. Although this field is a string, the value passed in this field should be a positive integer value. If this query parameter is not set, up to 100 records will be returned on each page of results.</param>
		/// <param name="offset">The value passed in this query parameter sets the page number to retrieve. Although this field is a string, the value passed in this field should be a integer value equal to or greater than 0. The first page of records has a value of 0, the second page of records has a value of 1, and so on. If this query parameter is not set, its value defaults to 0, and the first page of records is returned.</param>
		/// <returns>Success</returns>
		public Offers GetOffers(string sku, string marketplace_id, string format, string limit, string offset)
		{
			var requestUri = "offer?sku=" + Uri.EscapeDataString(sku)+"&marketplace_id=" + Uri.EscapeDataString(marketplace_id)+"&format=" + Uri.EscapeDataString(format)+"&limit=" + Uri.EscapeDataString(limit)+"&offset=" + Uri.EscapeDataString(offset);
			var responseMessage = this.client.GetAsync(requestUri).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCode();
				var stream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<Offers>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// This call creates an offer for a specific inventory item on a specific eBay marketplace. It is up to the sellers whether they want to create a complete offer (with all necessary details) right from the start, or sellers can provide only some information with the initial createOffer call, and then make one or more subsequent updateOffer calls to complete the offer and prepare to publish the offer. Upon first creating an offer, the following fields are required in the request payload: sku, marketplaceId, and (listing) format. Other information that will be required before an offer can be published are highlighted below. These settings are either set with createOffer, or they can be set with a subsequent updateOffer call: Inventory location Offer price Available quantity eBay listing category Referenced listing policy profiles to set payment, return, and fulfillment values/settings If the call is successful, a unique offerId value is returned in the response. This value will be required for many other offer-related calls. Note that this call only stages an offer for publishing. The seller must run the publishOffer call to convert the offer to an active eBay listing. In addition to the authorization header, which is required for all eBay REST API calls, the createOffer call also requires the Content-Language header, that sets the natural language that will be used in the field values of the request payload. For US English, the code value passed in this header should be en-US. To view other supported Content-Language values, and to read more about all supported HTTP headers for eBay REST API calls, see the HTTP request headers topic in the Using eBay RESTful APIs document. For those who prefer to create multiple offers (up to 25 at a time) with one call, the bulkCreateOffer method can be used.
		/// CreateOffer offer
		/// </summary>
		/// <param name="requestBody">Details of the offer for the channel</param>
		public async Task CreateOfferAsync(EbayOfferDetailsWithKeys requestBody)
		{
			var requestUri = "offer";
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create();
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			var responseMessage = await client.PostAsync(requestUri, content);
			try
			{
				responseMessage.EnsureSuccessStatusCode();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// This call creates an offer for a specific inventory item on a specific eBay marketplace. It is up to the sellers whether they want to create a complete offer (with all necessary details) right from the start, or sellers can provide only some information with the initial createOffer call, and then make one or more subsequent updateOffer calls to complete the offer and prepare to publish the offer. Upon first creating an offer, the following fields are required in the request payload: sku, marketplaceId, and (listing) format. Other information that will be required before an offer can be published are highlighted below. These settings are either set with createOffer, or they can be set with a subsequent updateOffer call: Inventory location Offer price Available quantity eBay listing category Referenced listing policy profiles to set payment, return, and fulfillment values/settings If the call is successful, a unique offerId value is returned in the response. This value will be required for many other offer-related calls. Note that this call only stages an offer for publishing. The seller must run the publishOffer call to convert the offer to an active eBay listing. In addition to the authorization header, which is required for all eBay REST API calls, the createOffer call also requires the Content-Language header, that sets the natural language that will be used in the field values of the request payload. For US English, the code value passed in this header should be en-US. To view other supported Content-Language values, and to read more about all supported HTTP headers for eBay REST API calls, see the HTTP request headers topic in the Using eBay RESTful APIs document. For those who prefer to create multiple offers (up to 25 at a time) with one call, the bulkCreateOffer method can be used.
		/// CreateOffer offer
		/// </summary>
		/// <param name="requestBody">Details of the offer for the channel</param>
		public void CreateOffer(EbayOfferDetailsWithKeys requestBody)
		{
			var requestUri = "offer";
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create();
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			var responseMessage = this.client.PostAsync(requestUri, content).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCode();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// This call retrieves a specific published or unpublished offer. The unique identifier of the offer (offerId) is passed in at the end of the call URI. The authorization header is the only required HTTP header for this call. See the HTTP request headers section for more information.
		/// GetOffer offer/{offerId}
		/// </summary>
		/// <param name="offerId">The unique identifier of the offer that is to be retrieved.</param>
		/// <returns>Success</returns>
		public async Task<EbayOfferDetailsWithAll> GetOfferAsync(string offerId)
		{
			var requestUri = "offer/"+Uri.EscapeDataString(offerId);
			var responseMessage = await client.GetAsync(requestUri);
			try
			{
				responseMessage.EnsureSuccessStatusCode();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<EbayOfferDetailsWithAll>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// This call retrieves a specific published or unpublished offer. The unique identifier of the offer (offerId) is passed in at the end of the call URI. The authorization header is the only required HTTP header for this call. See the HTTP request headers section for more information.
		/// GetOffer offer/{offerId}
		/// </summary>
		/// <param name="offerId">The unique identifier of the offer that is to be retrieved.</param>
		/// <returns>Success</returns>
		public EbayOfferDetailsWithAll GetOffer(string offerId)
		{
			var requestUri = "offer/"+Uri.EscapeDataString(offerId);
			var responseMessage = this.client.GetAsync(requestUri).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCode();
				var stream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<EbayOfferDetailsWithAll>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// This call updates an existing offer. An existing offer may be in published state (active eBay listing), or in an unpublished state and yet to be published with the publishOffer call. The unique identifier (offerId) for the offer to update is passed in at the end of the call URI. The updateOffer call does a complete replacement of the existing offer object, so all fields that make up the current offer object are required, regardless of whether their values changed. Other information that is required before an unpublished offer can be published or before a published offer can be revised include: Inventory location Offer price Available quantity eBay listing category Referenced listing policy profiles to set payment, return, and fulfillment values/settings For published offers, the listingDescription field is also required to update the offer/eBay listing. For unpublished offers, this field is not necessarily required unless it is already set for the unpublished offer. In addition to the authorization header, which is required for all eBay REST API calls, the updateOffer call also requires the Content-Language header, that sets the natural language that will be used in the field values of the request payload. For US English, the code value passed in this header should be en-US. To view other supported Content-Language values, and to read more about all supported HTTP headers for eBay REST API calls, see the HTTP request headers topic in the Using eBay RESTful APIs document.
		/// UpdateOffer offer/{offerId}
		/// </summary>
		/// <param name="offerId">The unique identifier of the offer that is being updated. This identifier is passed in at the end of the call URI.</param>
		/// <param name="requestBody">Details of the offer for the channel</param>
		/// <returns>Success</returns>
		public async Task<OfferResponse> UpdateOfferAsync(string offerId, EbayOfferDetailsWithId requestBody)
		{
			var requestUri = "offer/"+Uri.EscapeDataString(offerId);
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create();
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			var responseMessage = await client.PutAsync(requestUri, content);
			try
			{
				responseMessage.EnsureSuccessStatusCode();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<OfferResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// This call updates an existing offer. An existing offer may be in published state (active eBay listing), or in an unpublished state and yet to be published with the publishOffer call. The unique identifier (offerId) for the offer to update is passed in at the end of the call URI. The updateOffer call does a complete replacement of the existing offer object, so all fields that make up the current offer object are required, regardless of whether their values changed. Other information that is required before an unpublished offer can be published or before a published offer can be revised include: Inventory location Offer price Available quantity eBay listing category Referenced listing policy profiles to set payment, return, and fulfillment values/settings For published offers, the listingDescription field is also required to update the offer/eBay listing. For unpublished offers, this field is not necessarily required unless it is already set for the unpublished offer. In addition to the authorization header, which is required for all eBay REST API calls, the updateOffer call also requires the Content-Language header, that sets the natural language that will be used in the field values of the request payload. For US English, the code value passed in this header should be en-US. To view other supported Content-Language values, and to read more about all supported HTTP headers for eBay REST API calls, see the HTTP request headers topic in the Using eBay RESTful APIs document.
		/// UpdateOffer offer/{offerId}
		/// </summary>
		/// <param name="offerId">The unique identifier of the offer that is being updated. This identifier is passed in at the end of the call URI.</param>
		/// <param name="requestBody">Details of the offer for the channel</param>
		/// <returns>Success</returns>
		public OfferResponse UpdateOffer(string offerId, EbayOfferDetailsWithId requestBody)
		{
			var requestUri = "offer/"+Uri.EscapeDataString(offerId);
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create();
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			var responseMessage = this.client.PutAsync(requestUri, content).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCode();
				var stream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<OfferResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// If used against an unpublished offer, this call will permanently delete that offer. In the case of a published offer (or live eBay listing), a successful call will either end the single-variation listing associated with the offer, or it will remove that product variation from the eBay listing and also automatically remove that product variation from the inventory item group. In the case of a multiple-variation listing, the deleteOffer will not remove the product variation from the listing if that variation has one or more sales. If that product variation has one or more sales, the seller can alternately just set the available quantity of that product variation to 0, so it is not available in the eBay search or View Item page, and then the seller can remove that product variation from the inventory item group at a later time.
		/// DeleteOffer offer/{offerId}
		/// </summary>
		/// <param name="offerId">The unique identifier of the offer to delete. The unique identifier of the offer (offerId) is passed in at the end of the call URI.</param>
		public async Task DeleteOfferAsync(string offerId)
		{
			var requestUri = "offer/"+Uri.EscapeDataString(offerId);
			var responseMessage = await client.DeleteAsync(requestUri);
			try
			{
				responseMessage.EnsureSuccessStatusCode();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// If used against an unpublished offer, this call will permanently delete that offer. In the case of a published offer (or live eBay listing), a successful call will either end the single-variation listing associated with the offer, or it will remove that product variation from the eBay listing and also automatically remove that product variation from the inventory item group. In the case of a multiple-variation listing, the deleteOffer will not remove the product variation from the listing if that variation has one or more sales. If that product variation has one or more sales, the seller can alternately just set the available quantity of that product variation to 0, so it is not available in the eBay search or View Item page, and then the seller can remove that product variation from the inventory item group at a later time.
		/// DeleteOffer offer/{offerId}
		/// </summary>
		/// <param name="offerId">The unique identifier of the offer to delete. The unique identifier of the offer (offerId) is passed in at the end of the call URI.</param>
		public void DeleteOffer(string offerId)
		{
			var requestUri = "offer/"+Uri.EscapeDataString(offerId);
			var responseMessage = this.client.DeleteAsync(requestUri).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCode();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// This call is used to convert an unpublished offer into a published offer, or live eBay listing. The unique identifier of the offer (offerId) is passed in at the end of the call URI. For those who prefer to publish multiple offers (up to 25 at a time) with one call, the bulkPublishOffer method can be used. In the case of a multiple-variation listing, the publishOfferByInventoryItemGroup call should be used instead, as this call will convert all unpublished offers associated with an inventory item group into a multiple-variation listing.
		/// PublishOffer offer/{offerId}/publish/
		/// </summary>
		/// <param name="offerId">The unique identifier of the offer that is to be published.</param>
		/// <returns>Success</returns>
		public async Task<PublishResponse> PublishOfferAsync(string offerId)
		{
			var requestUri = "offer/"+Uri.EscapeDataString(offerId)+"/publish/";
			var responseMessage = await client.PostAsync(requestUri, new StringContent(String.Empty));
			try
			{
				responseMessage.EnsureSuccessStatusCode();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<PublishResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// This call is used to convert an unpublished offer into a published offer, or live eBay listing. The unique identifier of the offer (offerId) is passed in at the end of the call URI. For those who prefer to publish multiple offers (up to 25 at a time) with one call, the bulkPublishOffer method can be used. In the case of a multiple-variation listing, the publishOfferByInventoryItemGroup call should be used instead, as this call will convert all unpublished offers associated with an inventory item group into a multiple-variation listing.
		/// PublishOffer offer/{offerId}/publish/
		/// </summary>
		/// <param name="offerId">The unique identifier of the offer that is to be published.</param>
		/// <returns>Success</returns>
		public PublishResponse PublishOffer(string offerId)
		{
			var requestUri = "offer/"+Uri.EscapeDataString(offerId)+"/publish/";
			var responseMessage = this.client.PostAsync(requestUri, new StringContent(String.Empty)).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCode();
				var stream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<PublishResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Note: Please note that any eBay listing created using the Inventory API cannot be revised or relisted using the Trading API calls. This call is used to convert all unpublished offers associated with an inventory item group into an active, multiple-variation listing. The unique identifier of the inventory item group (inventoryItemGroupKey) is passed in the request payload. All inventory items and their corresponding offers in the inventory item group must be valid (meet all requirements) for the publishOfferByInventoryItemGroup call to be completely successful. For any inventory items in the group that are missing required data or have no corresponding offers, the publishOfferByInventoryItemGroup will create a new multiple-variation listing, but any inventory items with missing required data/offers will not be in the newly-created listing. If any inventory items in the group to be published have invalid data, or one or more of the inventory items have conflicting data with one another, the publishOfferByInventoryItemGroup call will fail. Be sure to check for any error or warning messages in the call response for any applicable information about one or more inventory items/offers having issues.
		/// PublishOfferByInventoryItemGroup offer/publish_by_inventory_item_group/
		/// </summary>
		/// <param name="requestBody">The identifier of the inventory item group to publish and the eBay marketplace where the listing will be published is needed in the request payload.</param>
		/// <returns>Success</returns>
		public async Task<PublishResponse> PublishOfferByInventoryItemGroupAsync(PublishByInventoryItemGroupRequest requestBody)
		{
			var requestUri = "offer/publish_by_inventory_item_group/";
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create();
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			var responseMessage = await client.PostAsync(requestUri, content);
			try
			{
				responseMessage.EnsureSuccessStatusCode();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<PublishResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Note: Please note that any eBay listing created using the Inventory API cannot be revised or relisted using the Trading API calls. This call is used to convert all unpublished offers associated with an inventory item group into an active, multiple-variation listing. The unique identifier of the inventory item group (inventoryItemGroupKey) is passed in the request payload. All inventory items and their corresponding offers in the inventory item group must be valid (meet all requirements) for the publishOfferByInventoryItemGroup call to be completely successful. For any inventory items in the group that are missing required data or have no corresponding offers, the publishOfferByInventoryItemGroup will create a new multiple-variation listing, but any inventory items with missing required data/offers will not be in the newly-created listing. If any inventory items in the group to be published have invalid data, or one or more of the inventory items have conflicting data with one another, the publishOfferByInventoryItemGroup call will fail. Be sure to check for any error or warning messages in the call response for any applicable information about one or more inventory items/offers having issues.
		/// PublishOfferByInventoryItemGroup offer/publish_by_inventory_item_group/
		/// </summary>
		/// <param name="requestBody">The identifier of the inventory item group to publish and the eBay marketplace where the listing will be published is needed in the request payload.</param>
		/// <returns>Success</returns>
		public PublishResponse PublishOfferByInventoryItemGroup(PublishByInventoryItemGroupRequest requestBody)
		{
			var requestUri = "offer/publish_by_inventory_item_group/";
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create();
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			var responseMessage = this.client.PostAsync(requestUri, content).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCode();
				var stream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<PublishResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// This call is used to end a multiple-variation eBay listing that is associated with the specified inventory item group. This call only ends multiple-variation eBay listing associated with the inventory item group but does not delete the inventory item group object. Similarly, this call also does not delete any of the offers associated with the inventory item group, but instead all of these offers go into the unpublished state. If the seller wanted to relist the multiple-variation eBay listing, they could use the publishOfferByInventoryItemGroup method.
		/// WithdrawOfferByInventoryItemGroup offer/withdraw_by_inventory_item_group
		/// </summary>
		/// <param name="requestBody">The base request of the withdrawOfferByInventoryItemGroup call.</param>
		public async Task WithdrawOfferByInventoryItemGroupAsync(WithdrawByInventoryItemGroupRequest requestBody)
		{
			var requestUri = "offer/withdraw_by_inventory_item_group";
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create();
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			var responseMessage = await client.PostAsync(requestUri, content);
			try
			{
				responseMessage.EnsureSuccessStatusCode();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// This call is used to end a multiple-variation eBay listing that is associated with the specified inventory item group. This call only ends multiple-variation eBay listing associated with the inventory item group but does not delete the inventory item group object. Similarly, this call also does not delete any of the offers associated with the inventory item group, but instead all of these offers go into the unpublished state. If the seller wanted to relist the multiple-variation eBay listing, they could use the publishOfferByInventoryItemGroup method.
		/// WithdrawOfferByInventoryItemGroup offer/withdraw_by_inventory_item_group
		/// </summary>
		/// <param name="requestBody">The base request of the withdrawOfferByInventoryItemGroup call.</param>
		public void WithdrawOfferByInventoryItemGroup(WithdrawByInventoryItemGroupRequest requestBody)
		{
			var requestUri = "offer/withdraw_by_inventory_item_group";
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create();
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			var responseMessage = this.client.PostAsync(requestUri, content).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCode();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// This call is used to retrieve the expected listing fees for up to 250 unpublished offers. An array of one or more offerId values are passed in under the offers container. In the response payload, all listing fees are grouped by eBay marketplace, and listing fees per offer are not shown. A fees container will be returned for each eBay marketplace where the seller is selling the products associated with the specified offers. Errors will occur if the seller passes in offerIds that represent published offers, so this call should be made before the seller publishes offers with the publishOffer.
		/// GetListingFees offer/get_listing_fees
		/// </summary>
		/// <param name="requestBody">List of offers that needs fee information</param>
		/// <returns>Success</returns>
		public async Task<FeesSummaryResponse> GetListingFeesAsync(OfferKeysWithId requestBody)
		{
			var requestUri = "offer/get_listing_fees";
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create();
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			var responseMessage = await client.PostAsync(requestUri, content);
			try
			{
				responseMessage.EnsureSuccessStatusCode();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<FeesSummaryResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// This call is used to retrieve the expected listing fees for up to 250 unpublished offers. An array of one or more offerId values are passed in under the offers container. In the response payload, all listing fees are grouped by eBay marketplace, and listing fees per offer are not shown. A fees container will be returned for each eBay marketplace where the seller is selling the products associated with the specified offers. Errors will occur if the seller passes in offerIds that represent published offers, so this call should be made before the seller publishes offers with the publishOffer.
		/// GetListingFees offer/get_listing_fees
		/// </summary>
		/// <param name="requestBody">List of offers that needs fee information</param>
		/// <returns>Success</returns>
		public FeesSummaryResponse GetListingFees(OfferKeysWithId requestBody)
		{
			var requestUri = "offer/get_listing_fees";
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create();
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			var responseMessage = this.client.PostAsync(requestUri, content).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCode();
				var stream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<FeesSummaryResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// This call creates multiple offers (up to 25) for specific inventory items on a specific eBay marketplace. Although it is not a requirement for the seller to create complete offers (with all necessary details) right from the start, eBay recommends that the seller provide all necessary details with this call since there is currently no bulk operation available to update multiple offers with one call. The following fields are always required in the request payload: sku, marketplaceId, and (listing) format. Other information that will be required before a offer can be published are highlighted below: Inventory location Offer price Available quantity eBay listing category Referenced listing policy profiles to set payment, return, and fulfillment values/settings If the call is successful, unique offerId values are returned in the response for each successfully created offer. The offerId value will be required for many other offer-related calls. Note that this call only stages an offer for publishing. The seller must run either the publishOffer, bulkPublishOffer, or publishOfferByInventoryItemGroup call to convert offer(s) into an active single- or multiple-variation listing. In addition to the authorization header, which is required for all eBay REST API calls, the bulkCreateOffer call also requires the Content-Language header, that sets the natural language that will be used in the field values of the request payload. For US English, the code value passed in this header should be en-US. To view other supported Content-Language values, and to read more about all supported HTTP headers for eBay REST API calls, see the HTTP request headers topic in the Using eBay RESTful APIs document. For those who prefer to create a single offer per call, the createOffer method can be used instead.
		/// BulkCreateOffer bulk_create_offer
		/// </summary>
		/// <param name="requestBody">Details of the offer for the channel</param>
		/// <returns>Success</returns>
		public async Task<BulkOfferResponse> BulkCreateOfferAsync(BulkEbayOfferDetailsWithKeys requestBody)
		{
			var requestUri = "bulk_create_offer";
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create();
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			var responseMessage = await client.PostAsync(requestUri, content);
			try
			{
				responseMessage.EnsureSuccessStatusCode();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<BulkOfferResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// This call creates multiple offers (up to 25) for specific inventory items on a specific eBay marketplace. Although it is not a requirement for the seller to create complete offers (with all necessary details) right from the start, eBay recommends that the seller provide all necessary details with this call since there is currently no bulk operation available to update multiple offers with one call. The following fields are always required in the request payload: sku, marketplaceId, and (listing) format. Other information that will be required before a offer can be published are highlighted below: Inventory location Offer price Available quantity eBay listing category Referenced listing policy profiles to set payment, return, and fulfillment values/settings If the call is successful, unique offerId values are returned in the response for each successfully created offer. The offerId value will be required for many other offer-related calls. Note that this call only stages an offer for publishing. The seller must run either the publishOffer, bulkPublishOffer, or publishOfferByInventoryItemGroup call to convert offer(s) into an active single- or multiple-variation listing. In addition to the authorization header, which is required for all eBay REST API calls, the bulkCreateOffer call also requires the Content-Language header, that sets the natural language that will be used in the field values of the request payload. For US English, the code value passed in this header should be en-US. To view other supported Content-Language values, and to read more about all supported HTTP headers for eBay REST API calls, see the HTTP request headers topic in the Using eBay RESTful APIs document. For those who prefer to create a single offer per call, the createOffer method can be used instead.
		/// BulkCreateOffer bulk_create_offer
		/// </summary>
		/// <param name="requestBody">Details of the offer for the channel</param>
		/// <returns>Success</returns>
		public BulkOfferResponse BulkCreateOffer(BulkEbayOfferDetailsWithKeys requestBody)
		{
			var requestUri = "bulk_create_offer";
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create();
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			var responseMessage = this.client.PostAsync(requestUri, content).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCode();
				var stream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<BulkOfferResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// This call is used to convert unpublished offers (up to 25) into published offers, or live eBay listings. The unique identifier (offerId) of each offer to publlish is passed into the request payload. It is possible that some unpublished offers will be successfully created into eBay listings, but others may fail. The response payload will show the results for each offerId value that is passed into the request payload. The errors and warnings containers will be returned for an offer that had one or more issues being published. For those who prefer to publish one offer per call, the publishOffer method can be used instead. In the case of a multiple-variation listing, the publishOfferByInventoryItemGroup call should be used instead, as this call will convert all unpublished offers associated with an inventory item group into a multiple-variation listing.
		/// BulkPublishOffer bulk_publish_offer
		/// </summary>
		/// <param name="requestBody">The base request of the bulkPublishOffer method.</param>
		/// <returns>Success</returns>
		public async Task<BulkPublishResponse> BulkPublishOfferAsync(BulkOffer requestBody)
		{
			var requestUri = "bulk_publish_offer";
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create();
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			var responseMessage = await client.PostAsync(requestUri, content);
			try
			{
				responseMessage.EnsureSuccessStatusCode();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<BulkPublishResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// This call is used to convert unpublished offers (up to 25) into published offers, or live eBay listings. The unique identifier (offerId) of each offer to publlish is passed into the request payload. It is possible that some unpublished offers will be successfully created into eBay listings, but others may fail. The response payload will show the results for each offerId value that is passed into the request payload. The errors and warnings containers will be returned for an offer that had one or more issues being published. For those who prefer to publish one offer per call, the publishOffer method can be used instead. In the case of a multiple-variation listing, the publishOfferByInventoryItemGroup call should be used instead, as this call will convert all unpublished offers associated with an inventory item group into a multiple-variation listing.
		/// BulkPublishOffer bulk_publish_offer
		/// </summary>
		/// <param name="requestBody">The base request of the bulkPublishOffer method.</param>
		/// <returns>Success</returns>
		public BulkPublishResponse BulkPublishOffer(BulkOffer requestBody)
		{
			var requestUri = "bulk_publish_offer";
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create();
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			var responseMessage = this.client.PostAsync(requestUri, content).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCode();
				var stream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<BulkPublishResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// This call is used to end a single-variation listing that is associated with the specified offer. This call is used in place of the deleteOffer call if the seller only wants to end the listing associated with the offer but does not want to delete the offer object. With this call, the offer object remains, but it goes into the unpublished state, and will require a publishOffer call to relist the offer. To end a multiple-variation listing that is associated with an inventory item group, the withdrawOfferByInventoryItemGroup method can be used. This call only ends the multiple-variation listing associated with an inventory item group but does not delete the inventory item group object, nor does it delete any of the offers associated with the inventory item group, but instead all of these offers go into the unpublished state.
		/// WithdrawOffer offer/{offerId}/withdraw
		/// </summary>
		/// <param name="offerId">The unique identifier of the offer that is to be withdrawn. This value is passed into the path of the call URI.</param>
		/// <returns>Success</returns>
		public async Task<WithdrawResponse> WithdrawOfferAsync(string offerId)
		{
			var requestUri = "offer/"+Uri.EscapeDataString(offerId)+"/withdraw";
			var responseMessage = await client.PostAsync(requestUri, new StringContent(String.Empty));
			try
			{
				responseMessage.EnsureSuccessStatusCode();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<WithdrawResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// This call is used to end a single-variation listing that is associated with the specified offer. This call is used in place of the deleteOffer call if the seller only wants to end the listing associated with the offer but does not want to delete the offer object. With this call, the offer object remains, but it goes into the unpublished state, and will require a publishOffer call to relist the offer. To end a multiple-variation listing that is associated with an inventory item group, the withdrawOfferByInventoryItemGroup method can be used. This call only ends the multiple-variation listing associated with an inventory item group but does not delete the inventory item group object, nor does it delete any of the offers associated with the inventory item group, but instead all of these offers go into the unpublished state.
		/// WithdrawOffer offer/{offerId}/withdraw
		/// </summary>
		/// <param name="offerId">The unique identifier of the offer that is to be withdrawn. This value is passed into the path of the call URI.</param>
		/// <returns>Success</returns>
		public WithdrawResponse WithdrawOffer(string offerId)
		{
			var requestUri = "offer/"+Uri.EscapeDataString(offerId)+"/withdraw";
			var responseMessage = this.client.PostAsync(requestUri, new StringContent(String.Empty)).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCode();
				var stream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<WithdrawResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
	}
	
	public partial class Inventory_item_groupClient
	{
		
		private System.Net.Http.HttpClient client;
		
		public Inventory_item_groupClient(System.Net.Http.HttpClient client)
		{
			if (client == null)
				throw new ArgumentNullException("Null HttpClient.", "client");

			if (client.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "client");

			this.client = client;
		}
		
		/// <summary>
		/// This call retrieves the inventory item group for a given inventoryItemGroupKey value. The inventoryItemGroupKey value is passed in at the end of the call URI.
		/// GetInventoryItemGroup inventory_item_group/{inventoryItemGroupKey}
		/// </summary>
		/// <param name="inventoryItemGroupKey">The unique identifier of an inventory item group. This value is assigned by the seller when an inventory item group is created. The inventoryItemGroupKey value for the inventory item group to retrieve is passed in at the end of the call URI.</param>
		/// <returns>Success</returns>
		public async Task<InventoryItemGroup> GetInventoryItemGroupAsync(string inventoryItemGroupKey)
		{
			var requestUri = "inventory_item_group/"+Uri.EscapeDataString(inventoryItemGroupKey);
			var responseMessage = await client.GetAsync(requestUri);
			try
			{
				responseMessage.EnsureSuccessStatusCode();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<InventoryItemGroup>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// This call retrieves the inventory item group for a given inventoryItemGroupKey value. The inventoryItemGroupKey value is passed in at the end of the call URI.
		/// GetInventoryItemGroup inventory_item_group/{inventoryItemGroupKey}
		/// </summary>
		/// <param name="inventoryItemGroupKey">The unique identifier of an inventory item group. This value is assigned by the seller when an inventory item group is created. The inventoryItemGroupKey value for the inventory item group to retrieve is passed in at the end of the call URI.</param>
		/// <returns>Success</returns>
		public InventoryItemGroup GetInventoryItemGroup(string inventoryItemGroupKey)
		{
			var requestUri = "inventory_item_group/"+Uri.EscapeDataString(inventoryItemGroupKey);
			var responseMessage = this.client.GetAsync(requestUri).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCode();
				var stream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<InventoryItemGroup>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// This call creates a new inventory item group or updates an existing inventory item group. It is up to sellers whether they want to create a complete inventory item group record right from the start, or sellers can provide only some information with the initial createOrReplaceInventoryItemGroup call, and then make one or more additional createOrReplaceInventoryItemGroup calls to complete the inventory item group record. Upon first creating an inventory item group record, the only required elements are the inventoryItemGroupKey identifier in the call URI, and the members of the inventory item group specified through the variantSKUs array in the request payload. In the case of updating/replacing an existing inventory item group, this call does a complete replacement of the existing inventory item group record, so all fields (including the member SKUs) that make up the inventory item group are required, regardless of whether their values changed. So, when replacing/updating an inventory item group record, it is advised that the seller run a getInventoryItemGroup call for that inventory item group to see all of its current values/settings/members before attempting to update the record. And if changes are made to an inventory item group that is part of a live, multiple-variation eBay listing, these changes automatically update the eBay listing. For example, if a SKU value is removed from the inventory item group, the corresponding product variation will be removed from the eBay listing as well. In addition to the required inventory item group identifier and member SKUs, other key information that is set with this call include: Title and description of the inventory item group. The string values provided in these fields will actually become the listing title and listing description of the listing once the first SKU of the inventory item group is published successfully Common aspects that inventory items in the qroup share Product aspects that vary within each product variation Links to images demonstrating the variations of the product, and these images should correspond to the product aspect that is set with the variesBy.aspectsImageVariesBy field In addition to the authorization header, which is required for all eBay REST API calls, the createOrReplaceInventoryItemGroup call also requires the Content-Language header, that sets the natural language that will be used in the field values of the request payload. For US English, the code value passed in this header should be en-US. To view other supported Content-Language values, and to read more about all supported HTTP headers for eBay REST API calls, see the HTTP request headers topic in the Using eBay RESTful APIs document.
		/// CreateOrReplaceInventoryItemGroup inventory_item_group/{inventoryItemGroupKey}
		/// </summary>
		/// <param name="inventoryItemGroupKey">Unique identifier of the inventory item group. This identifier is supplied by the seller. The inventoryItemGroupKey value for the inventory item group to create/update is passed in at the end of the call URI. This value cannot be changed once it is set.</param>
		/// <param name="requestBody">Details of the inventory Item Group</param>
		/// <returns>Success</returns>
		public async Task<BaseResponse> CreateOrReplaceInventoryItemGroupAsync(string inventoryItemGroupKey, InventoryItemGroup requestBody)
		{
			var requestUri = "inventory_item_group/"+Uri.EscapeDataString(inventoryItemGroupKey);
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create();
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			var responseMessage = await client.PutAsync(requestUri, content);
			try
			{
				responseMessage.EnsureSuccessStatusCode();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<BaseResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// This call creates a new inventory item group or updates an existing inventory item group. It is up to sellers whether they want to create a complete inventory item group record right from the start, or sellers can provide only some information with the initial createOrReplaceInventoryItemGroup call, and then make one or more additional createOrReplaceInventoryItemGroup calls to complete the inventory item group record. Upon first creating an inventory item group record, the only required elements are the inventoryItemGroupKey identifier in the call URI, and the members of the inventory item group specified through the variantSKUs array in the request payload. In the case of updating/replacing an existing inventory item group, this call does a complete replacement of the existing inventory item group record, so all fields (including the member SKUs) that make up the inventory item group are required, regardless of whether their values changed. So, when replacing/updating an inventory item group record, it is advised that the seller run a getInventoryItemGroup call for that inventory item group to see all of its current values/settings/members before attempting to update the record. And if changes are made to an inventory item group that is part of a live, multiple-variation eBay listing, these changes automatically update the eBay listing. For example, if a SKU value is removed from the inventory item group, the corresponding product variation will be removed from the eBay listing as well. In addition to the required inventory item group identifier and member SKUs, other key information that is set with this call include: Title and description of the inventory item group. The string values provided in these fields will actually become the listing title and listing description of the listing once the first SKU of the inventory item group is published successfully Common aspects that inventory items in the qroup share Product aspects that vary within each product variation Links to images demonstrating the variations of the product, and these images should correspond to the product aspect that is set with the variesBy.aspectsImageVariesBy field In addition to the authorization header, which is required for all eBay REST API calls, the createOrReplaceInventoryItemGroup call also requires the Content-Language header, that sets the natural language that will be used in the field values of the request payload. For US English, the code value passed in this header should be en-US. To view other supported Content-Language values, and to read more about all supported HTTP headers for eBay REST API calls, see the HTTP request headers topic in the Using eBay RESTful APIs document.
		/// CreateOrReplaceInventoryItemGroup inventory_item_group/{inventoryItemGroupKey}
		/// </summary>
		/// <param name="inventoryItemGroupKey">Unique identifier of the inventory item group. This identifier is supplied by the seller. The inventoryItemGroupKey value for the inventory item group to create/update is passed in at the end of the call URI. This value cannot be changed once it is set.</param>
		/// <param name="requestBody">Details of the inventory Item Group</param>
		/// <returns>Success</returns>
		public BaseResponse CreateOrReplaceInventoryItemGroup(string inventoryItemGroupKey, InventoryItemGroup requestBody)
		{
			var requestUri = "inventory_item_group/"+Uri.EscapeDataString(inventoryItemGroupKey);
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create();
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			var responseMessage = this.client.PutAsync(requestUri, content).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCode();
				var stream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<BaseResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// This call deletes the inventory item group for a given inventoryItemGroupKey value.
		/// DeleteInventoryItemGroup inventory_item_group/{inventoryItemGroupKey}
		/// </summary>
		/// <param name="inventoryItemGroupKey">The unique identifier of an inventory item group. This value is assigned by the seller when an inventory item group is created. The inventoryItemGroupKey value for the inventory item group to delete is passed in at the end of the call URI.</param>
		public async Task DeleteInventoryItemGroupAsync(string inventoryItemGroupKey)
		{
			var requestUri = "inventory_item_group/"+Uri.EscapeDataString(inventoryItemGroupKey);
			var responseMessage = await client.DeleteAsync(requestUri);
			try
			{
				responseMessage.EnsureSuccessStatusCode();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// This call deletes the inventory item group for a given inventoryItemGroupKey value.
		/// DeleteInventoryItemGroup inventory_item_group/{inventoryItemGroupKey}
		/// </summary>
		/// <param name="inventoryItemGroupKey">The unique identifier of an inventory item group. This value is assigned by the seller when an inventory item group is created. The inventoryItemGroupKey value for the inventory item group to delete is passed in at the end of the call URI.</param>
		public void DeleteInventoryItemGroup(string inventoryItemGroupKey)
		{
			var requestUri = "inventory_item_group/"+Uri.EscapeDataString(inventoryItemGroupKey);
			var responseMessage = this.client.DeleteAsync(requestUri).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCode();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
	}
	
	public partial class ListingClient
	{
		
		private System.Net.Http.HttpClient client;
		
		public ListingClient(System.Net.Http.HttpClient client)
		{
			if (client == null)
				throw new ArgumentNullException("Null HttpClient.", "client");

			if (client.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "client");

			this.client = client;
		}
		
		/// <summary>
		/// This call is used to convert existing eBay Listings to the corresponding Inventory API objects. If an eBay listing is successfully migrated to the Inventory API model, new Inventory Location, Inventory Item, and Offer objects are created. For a multiple-variation listing that is successfully migrated, in addition to the three new Inventory API objects just mentioned, an Inventory Item Group object will also be created. If the eBay listing is a motor vehicle part or accessory listing with a compatible vehicle list (ItemCompatibilityList container in Trading API's Add/Revise/Relist/Verify calls), a Product Compatibility object will be created. Migration Requirements To be eligible for migration, the active eBay listings must meet the following requirements: Listing type is Fixed-Price Listing duration is 'GTC' (Good 'til Cancelled) The item(s) in the listings must have seller-defined SKU values associated with them, and in the case of a multiple-variation listing, each product variation must also have its own SKU value Business Polices (Payment, Return Policy, and Shipping) must be used on the listing, as legacy payment, return policy, and shipping fields will not be accepted. With the Payment Policy associated with a listing, the immediate payment requirement must be enabled, and the only accepted payment method should be PayPal The postal/zip code (PostalCode field in Trading's ItemType) or city (Location field in Trading's ItemType) must be set in the listing; the country is also needed, but this value is required in Trading API, so it will always be set for every listing Unsupported Listing Features The following features are not yet available to be set or modified through the Inventory API, but they will remain on the active eBay listing, even after a successful migration to the Inventory model. The downside to this is that the seller will be completely blocked (in APIs or My eBay) from revising these features/settings once the migration takes place: Best Offer settings, including the Best Offer Auto Accept and Auto Reject price thresholds Any listing-level Buyer Requirements Charity donations from sale proceeds Listing Designer Template applied to the listing Listing enhancements like a bold listing title or Gallery Plus Listing in two categories (secondary category) Making the Call In the request payload of the bulkMigrateListings call, the seller will pass in an array of one to five eBay listing IDs (aka Item IDs). To save time and hassle, that seller should do a pre-check on each listing to make sure those listings meet the requirements to be migrated to the new Inventory model. There are no path or query parameters for this call. Call Response If an eBay listing is migrated successfully to the new Inventory model, the following will occur: An Inventory Item object will be created for the item(s) in the listing, and this object will be accessible through the Inventory API An Offer object will be created for the listing, and this object will be accessible through the Inventory API An Inventory Location object will be created and associated with the Offer object, as an Inventory Location must be associated with a published OfferThe response payload of the Bulk Migrate Listings call will show the results of each listing migration. These results include an HTTP status code to indicate the success or failure of each listing migration, the SKU value associated with each item, and if the migration is successful, an Offer ID value. The SKU value will be used in the Inventory API to manage the Inventory Item object, and the Offer ID value will be used in the Inventory API to manage the Offer object. Errors and/or warnings containers will be returned for each listing where an error and/or warning occurred with the attempted migration. If a multiple-variation listing is successfully migrated, along with the Offer and Inventory Location objects, an Inventory Item object will be created for each product variation within the listing, and an Inventory Item Group object will also be created, grouping those variations together in the Inventory API platform. For a motor vehicle part or accessory listing that has a specified list of compatible vehicles, in addition to the Inventory Item, Inventory Location, and Offer objects that are created, a Product Compatibility object will also be created in the Inventory API platform.
		/// BulkMigrateListing bulk_migrate_listing
		/// </summary>
		/// <param name="requestBody">Details of the listings that needs to be migrated into Inventory</param>
		/// <returns>Success</returns>
		public async Task<BulkMigrateListingResponse> BulkMigrateListingAsync(BulkMigrateListing requestBody)
		{
			var requestUri = "bulk_migrate_listing";
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create();
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			var responseMessage = await client.PostAsync(requestUri, content);
			try
			{
				responseMessage.EnsureSuccessStatusCode();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<BulkMigrateListingResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// This call is used to convert existing eBay Listings to the corresponding Inventory API objects. If an eBay listing is successfully migrated to the Inventory API model, new Inventory Location, Inventory Item, and Offer objects are created. For a multiple-variation listing that is successfully migrated, in addition to the three new Inventory API objects just mentioned, an Inventory Item Group object will also be created. If the eBay listing is a motor vehicle part or accessory listing with a compatible vehicle list (ItemCompatibilityList container in Trading API's Add/Revise/Relist/Verify calls), a Product Compatibility object will be created. Migration Requirements To be eligible for migration, the active eBay listings must meet the following requirements: Listing type is Fixed-Price Listing duration is 'GTC' (Good 'til Cancelled) The item(s) in the listings must have seller-defined SKU values associated with them, and in the case of a multiple-variation listing, each product variation must also have its own SKU value Business Polices (Payment, Return Policy, and Shipping) must be used on the listing, as legacy payment, return policy, and shipping fields will not be accepted. With the Payment Policy associated with a listing, the immediate payment requirement must be enabled, and the only accepted payment method should be PayPal The postal/zip code (PostalCode field in Trading's ItemType) or city (Location field in Trading's ItemType) must be set in the listing; the country is also needed, but this value is required in Trading API, so it will always be set for every listing Unsupported Listing Features The following features are not yet available to be set or modified through the Inventory API, but they will remain on the active eBay listing, even after a successful migration to the Inventory model. The downside to this is that the seller will be completely blocked (in APIs or My eBay) from revising these features/settings once the migration takes place: Best Offer settings, including the Best Offer Auto Accept and Auto Reject price thresholds Any listing-level Buyer Requirements Charity donations from sale proceeds Listing Designer Template applied to the listing Listing enhancements like a bold listing title or Gallery Plus Listing in two categories (secondary category) Making the Call In the request payload of the bulkMigrateListings call, the seller will pass in an array of one to five eBay listing IDs (aka Item IDs). To save time and hassle, that seller should do a pre-check on each listing to make sure those listings meet the requirements to be migrated to the new Inventory model. There are no path or query parameters for this call. Call Response If an eBay listing is migrated successfully to the new Inventory model, the following will occur: An Inventory Item object will be created for the item(s) in the listing, and this object will be accessible through the Inventory API An Offer object will be created for the listing, and this object will be accessible through the Inventory API An Inventory Location object will be created and associated with the Offer object, as an Inventory Location must be associated with a published OfferThe response payload of the Bulk Migrate Listings call will show the results of each listing migration. These results include an HTTP status code to indicate the success or failure of each listing migration, the SKU value associated with each item, and if the migration is successful, an Offer ID value. The SKU value will be used in the Inventory API to manage the Inventory Item object, and the Offer ID value will be used in the Inventory API to manage the Offer object. Errors and/or warnings containers will be returned for each listing where an error and/or warning occurred with the attempted migration. If a multiple-variation listing is successfully migrated, along with the Offer and Inventory Location objects, an Inventory Item object will be created for each product variation within the listing, and an Inventory Item Group object will also be created, grouping those variations together in the Inventory API platform. For a motor vehicle part or accessory listing that has a specified list of compatible vehicles, in addition to the Inventory Item, Inventory Location, and Offer objects that are created, a Product Compatibility object will also be created in the Inventory API platform.
		/// BulkMigrateListing bulk_migrate_listing
		/// </summary>
		/// <param name="requestBody">Details of the listings that needs to be migrated into Inventory</param>
		/// <returns>Success</returns>
		public BulkMigrateListingResponse BulkMigrateListing(BulkMigrateListing requestBody)
		{
			var requestUri = "bulk_migrate_listing";
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create();
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			var responseMessage = this.client.PostAsync(requestUri, content).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCode();
				var stream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<BulkMigrateListingResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
}
