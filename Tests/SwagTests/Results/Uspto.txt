//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Net.Http;
	using Newtonsoft.Json;
	
	
	public class DataSetList
	{
		
		public int Total { get; set; }
		
		public DataSetListApis[] DataSetListApis { get; set; }
	}
	
	public class DataSetListApis
	{
		
		/// <summary>
		/// To be used as a dataset parameter value
		/// </summary>
		public string ApiKey { get; set; }
		
		/// <summary>
		/// To be used as a version parameter value
		/// </summary>
		public string ApiVersionNumber { get; set; }
		
		/// <summary>
		/// The URL describing the dataset's fields
		/// </summary>
		public string ApiUrl { get; set; }
		
		/// <summary>
		/// A URL to the API console for each API
		/// </summary>
		public string ApiDocumentationUrl { get; set; }
	}
	
	public partial class MetadataClient
	{
		
		private System.Net.Http.HttpClient client;
		
		public MetadataClient(System.Net.Http.HttpClient client)
		{
			if (client == null)
				throw new ArgumentNullException("Null HttpClient.", "client");

			if (client.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "client");

			this.client = client;
		}
		
		/// <summary>
		/// List available data sets
		/// ListDataSets /
		/// </summary>
		/// <returns>Returns a list of data sets</returns>
		public async Task<dataSetList> ListDataSetsAsync()
		{
			var requestUri = "/";
			var responseMessage = await client.GetAsync(requestUri);
			try
			{
				responseMessage.EnsureSuccessStatusCode();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<dataSetList>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Provides the general information about the API and the list of fields that can be used to query the dataset.
		/// This GET API returns the list of all the searchable field names that are in the oa_citations. Please see the 'fields' attribute which returns an array of field names. Each field or a combination of fields can be searched using the syntax options shown below.
		/// ListSearchableFields /{dataset}/{version}/fields
		/// </summary>
		/// <param name="dataset">Name of the dataset.</param>
		/// <param name="version">Version of the dataset.</param>
		/// <returns>The dataset API for the given version is found and it is accessible to consume.</returns>
		public async Task<string> ListSearchableFieldsAsync(string dataset, string version)
		{
			var requestUri = "/"+Uri.EscapeDataString(dataset)+"/"+Uri.EscapeDataString(version)+"/fields";
			var responseMessage = await client.GetAsync(requestUri);
			try
			{
				responseMessage.EnsureSuccessStatusCode();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
	}
	
	public partial class SearchClient
	{
		
		private System.Net.Http.HttpClient client;
		
		public SearchClient(System.Net.Http.HttpClient client)
		{
			if (client == null)
				throw new ArgumentNullException("Null HttpClient.", "client");

			if (client.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "client");

			this.client = client;
		}
		
		/// <summary>
		/// Provides search capability for the data set with the given search criteria.
		/// This API is based on Solr/Lucense Search. The data is indexed using SOLR. This GET API returns the list of all the searchable field names that are in the Solr Index. Please see the 'fields' attribute which returns an array of field names. Each field or a combination of fields can be searched using the Solr/Lucene Syntax. Please refer https://lucene.apache.org/core/3_6_2/queryparsersyntax.html#Overview for the query syntax. List of field names that are searchable can be determined using above GET api.
		/// PerformSearch /{dataset}/{version}/records
		/// </summary>
		/// <param name="version">Version of the dataset.</param>
		/// <param name="dataset">Name of the dataset. In this case, the default value is oa_citations</param>
		/// <returns>successful operation</returns>
		public async Task<string[]> PerformSearchAsync(string version, string dataset)
		{
			var requestUri = "/"+Uri.EscapeDataString(dataset)+"/"+Uri.EscapeDataString(version)+"/records";
			var responseMessage = await client.PostAsync(requestUri, new StringContent(String.Empty));
			try
			{
				responseMessage.EnsureSuccessStatusCode();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<string[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
	}
}
