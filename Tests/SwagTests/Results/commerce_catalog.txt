//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Net.Http;
	using Newtonsoft.Json;
	
	
	/// <summary>
	/// This type contains the name and values of a category aspect.
	/// </summary>
	public class Aspect
	{
		
		/// <summary>
		/// The localized name of this category aspect.
		/// </summary>
		public string LocalizedName { get; set; }
		
		/// <summary>
		/// A list of the localized values of this category aspect.
		/// </summary>
		public string[] LocalizedValues { get; set; }
	}
	
	/// <summary>
	/// This type contains information about one category aspect that is associated with a specified category.
	/// </summary>
	public class AspectDistribution
	{
		
		/// <summary>
		/// Contains information about one or more values of the category aspect identified by localizedAspectName.
		/// </summary>
		public AspectValueDistribution[] AspectValueDistributions { get; set; }
		
		/// <summary>
		/// The localized name of an aspect that is associated with the category identified by dominantCategoryId.
		/// </summary>
		public string LocalizedAspectName { get; set; }
	}
	
	/// <summary>
	/// This type contains information about one value of a specified aspect. This value serves as a product refinement.
	/// </summary>
	public class AspectValueDistribution
	{
		
		/// <summary>
		/// The localized value of the category aspect identified by refinement.aspectDistributions.localizedAspectName.
		/// </summary>
		public string LocalizedAspectValue { get; set; }
		
		/// <summary>
		/// The number of times the value of localizedAspectValue has been used for eBay product listings. By comparing this quantity to the matchCount for other values of the same aspect, you can present a histogram of the values to sellers, who can use that information to select which aspect value is most appropriate for their product. You can then include the user-selected value in the the search call's aspect_filter parameter to refine your search.
		/// </summary>
		public int MatchCount { get; set; }
		
		/// <summary>
		/// A HATEOAS reference that further refines the search with this particular localizedAspectValue.
		/// </summary>
		public string RefinementHref { get; set; }
	}
	
	/// <summary>
	/// This type contains detailed information about each required and recommended aspect associated with an eBay category. These details include the aspect name, supported/possible values, and constraint information.
	/// </summary>
	public class CategoryAspect
	{
		
		/// <summary>
		/// Returned only if this field is populated. This provides information and context for the category aspect. The help text can be presented to the seller to clarify the intended purpose of this aspect, and recommendations for its use. For example, the help text for the Country/Region of Manufacture aspect is: Specifying the country/region of manufacture can help streamline customs clearance.
		/// </summary>
		public string AspectHelpText { get; set; }
		
		/// <summary>
		/// This type contains information about the constraints for an aspect that's associated with a specific eBay category or eBay Catalog product.
		/// </summary>
		public ProductAspectConstraint Constraint { get; set; }
		
		/// <summary>
		/// The name of the category aspect.
		/// </summary>
		public string Name { get; set; }
		
		/// <summary>
		/// Not returned if the value of the constraint field is FREE_TEXT and there are no stored values for this aspect. Contains information about one or more supported values for the category identified by the name field), as well as constraint information for those values.
		/// </summary>
		public CategoryAspectValue[] Values { get; set; }
	}
	
	/// <summary>
	/// This type contains the supported values for a given category aspect name, as well as constraint information for specified category aspect values for a product.
	/// </summary>
	public class CategoryAspectValue
	{
		
		/// <summary>
		/// A supported value of the corresponding category aspect (shown in the aspects.name field). Every supported value for the category aspect is shown in the aspects.values container.
		/// </summary>
		public string Value { get; set; }
		
		/// <summary>
		/// Not returned if the value of the value field can always be selected for this aspect of the specified category (that is, when no constraints apply to using the value). Contains a list of the dependencies that identify when the value of the value field is available for the current aspect. Each dependency specifies the values of another aspect of the same category (a control aspect), for which the current value of the current aspect can also be selected by the seller. Example: A shirt is available in three sizes and three colors, but only the Small and Medium sizes come in Green. Thus for the Color aspect, the value Green is constrained by its dependency on Size (the control aspect). Only when the Size aspect value is Small or Medium, can the Color aspect value of Green be selected by the seller.
		/// </summary>
		public ValueConstraint[] ValueConstraints { get; set; }
	}
	
	/// <summary>
	/// This type contains the full details of a specified catalog change request, including the original payload of the createChangeRequest call, processing status and key dates, and resolution details.
	/// </summary>
	public class ChangeRequest
	{
		
		/// <summary>
		/// The unique identifier of this change request. This value was originally generated by the createChangeRequest call and returned in the location code of that call's HTTP response header.
		/// </summary>
		public string ChangeRequestId { get; set; }
		
		/// <summary>
		/// The current processing status of this change request. If the value of this field is APPROVED_WITH_MODIFICATIONS, the change request has been approved with one or more modifications applied by eBay. Check the processResolution.corrections response object for details about the modifications. If the value of this field is REJECTED, the change request has been rejected for violating eBay standards or for conflicting with an existing product record. Check the processResolution.violations response object for details about the rejection. Available values: APPROVED &mdash; Upon review, the change request has been approved as submitted. APPROVED_WITH_MODIFICATIONS &mdash; Upon review, the change request has been approved with one or more corrections applied by eBay. Check the processResolution.corrections response object for details about the modifications. REJECTED &mdash; Upon review, the change request has been rejected for a conflict with an existing catalog product, or for violating eBay standards. Check the processResolution.violations response object for details about the rejection. SUBMITTED &mdash; The change request has been submitted and is being processed. UNDER_EXTENDED_REVIEW &mdash; After one hour of review, the change request is under extended review by eBay. UNDER_REVIEW &mdash; Upon submission/processing, the change request is under review by eBay. This typically takes up to one hour. For implementation help, refer to <a href='https://developer.ebay.com/devzone/rest/api-ref/catalog/types/ChangeRequestStatus.html'>eBay API documentation</a>
		/// </summary>
		public string ChangeRequestStatus { get; set; }
		
		/// <summary>
		/// The type of catalog modification being requested by this change request. Available values: PRODUCT_CREATION &mdash; Change request to create a new product PRODUCT_UPDATE &mdash; Change request to update an existing product For implementation help, refer to <a href='https://developer.ebay.com/devzone/rest/api-ref/catalog/types/ChangeRequestType.html'>eBay API documentation</a>
		/// </summary>
		public string ChangeRequestType { get; set; }
		
		/// <summary>
		/// The creation date of this change request.
		/// </summary>
		public string CreationDate { get; set; }
		
		/// <summary>
		/// eBay's estimate of the completion date of this change request.
		/// </summary>
		public string ExpectedCompletionDate { get; set; }
		
		/// <summary>
		/// This type provides details of conflicting products, corrections required, or violations that were discovered in a change request.
		/// </summary>
		public ProcessResolution ProcessResolution { get; set; }
		
		/// <summary>
		/// A text description and explanation of the status indicated by the changeRequestStatus field.
		/// </summary>
		public string ProcessStatusMessage { get; set; }
		
		/// <summary>
		/// A text description of why this change request was submitted.
		/// </summary>
		public string ReasonForChangeRequest { get; set; }
		
		/// <summary>
		/// Returned if the referenceType field is returned in the response. This is the identifier of an object of the type specified by the value of referenceType. For example, if the value of referenceType is INVENTORY_ITEM, this field should contain the seller's SKU for an inventory item.
		/// </summary>
		public string ReferenceId { get; set; }
		
		/// <summary>
		/// Returned if this field was included in the the createChangeRequest call. This specifies the type of eBay object that the seller wants to create or update using the requested change. It applies to objects that are incomplete due to the need for a matching catalog product. Providing a referenceType and a referenceId in a catalog change request enables eBay to automatically apply the resulting new or updated product directly to the specified object without requiring additional action on your part. Available values: INVENTORY_ITEM &mdash; The requested change will support the completion of an inventory item, which you can then use to create an offer. LISTING &mdash; The requested change will support the modification of an active product listing. LISTING_DRAFT &mdash; The requested change will support the completion of an offer, which you can then publish as a product listing. For implementation help, refer to <a href='https://developer.ebay.com/devzone/rest/api-ref/catalog/types/ReferenceType.html'>eBay API documentation</a>
		/// </summary>
		public string ReferenceType { get; set; }
		
		/// <summary>
		/// Returned if the value of changeRequestStatus is APPROVED, APPROVED_WITH_MODIFICATIONS, or REJECTED. This is the date that the change request was resolved.
		/// </summary>
		public string ResolutionDate { get; set; }
		
		/// <summary>
		/// This type contains the full details of a suggested product, including information about the product's identifiers, description, product images, categories, and aspects.
		/// </summary>
		public SuggestedProduct SuggestedProduct { get; set; }
	}
	
	/// <summary>
	/// This type contains information about an existing catalog product that presents a conflict with a seller's suggested product.
	/// </summary>
	public class ConflictingProduct
	{
		
		/// <summary>
		/// The eBay assigned identifier of this conflict.
		/// </summary>
		public string ConflictCode { get; set; }
		
		/// <summary>
		/// Contains information about one or more aspects of the conflicting product, which the seller's change request either duplicates or provides similar values. The seller should either accept the conflicting product's aspects and values and adopt the product as is, or submit a change request to create or update a product that doesn't conflict with an existing product record.
		/// </summary>
		public ProductAspect[] DifferentiatingAspects { get; set; }
		
		/// <summary>
		/// The eBay product ID of the conflicting catalog product.
		/// </summary>
		public string Epid { get; set; }
		
		/// <summary>
		/// The reason for this conflict.
		/// </summary>
		public string Reason { get; set; }
	}
	
	/// <summary>
	/// This type contains information about a correction that eBay has applied to the suggested product in a change request.
	/// </summary>
	public class Correction
	{
		
		/// <summary>
		/// This type identifies a product aspect that requires correction in a catalog change request, along with its aspect values that must be corrected.
		/// </summary>
		public CorrectionAspectValues AspectValues { get; set; }
		
		/// <summary>
		/// The eBay-assigned identifier of the correction type for this correction.
		/// </summary>
		public string CorrectionCode { get; set; }
		
		/// <summary>
		/// Contains information about a particular product attribute with an incorrect value.
		/// </summary>
		public CorrectionProductAttribute ProductAttribute { get; set; }
		
		/// <summary>
		/// The reason why this correction is required.
		/// </summary>
		public string Reason { get; set; }
	}
	
	/// <summary>
	/// This type contains a value of a given eBay product aspect which must be corrected, along with the correct value.
	/// </summary>
	public class CorrectionAspectValue
	{
		
		/// <summary>
		/// The aspect's correct value
		/// </summary>
		public string NewValue { get; set; }
		
		/// <summary>
		/// The aspect's current incorrect value.
		/// </summary>
		public string Value { get; set; }
	}
	
	/// <summary>
	/// This type identifies a product aspect that requires correction in a catalog change request, along with its aspect values that must be corrected.
	/// </summary>
	public class CorrectionAspectValues
	{
		
		/// <summary>
		/// The localized name of this product aspect that requires correction, such as Model Number, Size, or Color.
		/// </summary>
		public string AspectName { get; set; }
		
		/// <summary>
		/// A list of one or more values of this product aspect that must be corrected.
		/// </summary>
		public CorrectionAspectValue[] Values { get; set; }
	}
	
	/// <summary>
	/// Contains information about a particular product attribute with an incorrect value.
	/// </summary>
	public class CorrectionProductAttribute
	{
		
		/// <summary>
		/// The name of the product attribute type in the change request which requires correction, such as BRAND, CATEGORY, or TITLE. See the ProductAttributeName type for available values. Note: If the value of this field is ASPECT_NAME, see corrections.aspectValues for correction information. For implementation help, refer to <a href='https://developer.ebay.com/devzone/rest/api-ref/catalog/types/ProductAttributeName.html'>eBay API documentation</a>
		/// </summary>
		public string AttributeName { get; set; }
		
		/// <summary>
		/// Not returned if the value of attributeName is ASPECT_NAME (see instead corrections.aspectValues). This is the named attribute's correct value.
		/// </summary>
		public string NewValue { get; set; }
		
		/// <summary>
		/// Not returned if the value of attributeName is ASPECT_NAME (see instead corrections.aspectValues). This is the named attribute's current incorrect value.
		/// </summary>
		public string Value { get; set; }
	}
	
	/// <summary>
	/// This type contains the input payload of the createChangeRequest call, including the type of request, the reason for a product update request, and the details of the new or updated product being suggested.
	/// </summary>
	public class CreateChangeRequestPayload
	{
		
		/// <summary>
		/// The type of catalog modification being requested by this change request. Available values: PRODUCT_CREATION &mdash; Change request to create a new product PRODUCT_UPDATE &mdash; Change request to update an existing product For implementation help, refer to <a href='https://developer.ebay.com/devzone/rest/api-ref/catalog/types/ChangeRequestType.html'>eBay API documentation</a>
		/// </summary>
		public string ChangeRequestType { get; set; }
		
		/// <summary>
		/// Required if the value of changeRequestType is PRODUCT_UPDATE, and optional otherwise; this is a text description of why this change is being requested.
		/// </summary>
		public string ReasonForChangeRequest { get; set; }
		
		/// <summary>
		/// Required if the referenceType field is included in the request. This is the identifier of an object of the type specified by the value of referenceType. For example, if the value of referenceType is INVENTORY_ITEM, this field should contain the seller's SKU for an inventory item.
		/// </summary>
		public string ReferenceId { get; set; }
		
		/// <summary>
		/// The type of object that the requested change is intended to support. This applies to objects that are incomplete due to the need for a matching catalog product. Providing a referenceType and a referenceId in a catalog change request enables eBay to automatically apply the resulting new or updated product directly to the specified object without requiring additional action on your part. Available values: INVENTORY_ITEM &mdash; The requested change will support the completion of an inventory item, which you can then use to create an offer. LISTING &mdash; The requested change will support the modification of an active product listing. LISTING_DRAFT &mdash; The requested change will support the completion of an offer, which you can then publish as a product listing. For implementation help, refer to <a href='https://developer.ebay.com/devzone/rest/api-ref/catalog/types/ReferenceType.html'>eBay API documentation</a>
		/// </summary>
		public string ReferenceType { get; set; }
		
		/// <summary>
		/// This type contains the full details of a suggested product, including information about the product's identifiers, description, product images, categories, and aspects.
		/// </summary>
		public SuggestedProduct SuggestedProduct { get; set; }
	}
	
	/// <summary>
	/// This type defines the fields that can be returned in an error.
	/// </summary>
	public class Error
	{
		
		/// <summary>
		/// Identifies the type of erro.
		/// </summary>
		public string Category { get; set; }
		
		/// <summary>
		/// Name for the primary system where the error occurred. This is relevant for application errors.
		/// </summary>
		public string Domain { get; set; }
		
		/// <summary>
		/// A unique number to identify the error.
		/// </summary>
		public int ErrorId { get; set; }
		
		/// <summary>
		/// An array of request elements most closely associated to the error.
		/// </summary>
		public string[] InputRefIds { get; set; }
		
		/// <summary>
		/// A more detailed explanation of the error.
		/// </summary>
		public string LongMessage { get; set; }
		
		/// <summary>
		/// Information on how to correct the problem, in the end user's terms and language where applicable.
		/// </summary>
		public string Message { get; set; }
		
		/// <summary>
		/// An array of request elements most closely associated to the error.
		/// </summary>
		public string[] OutputRefIds { get; set; }
		
		/// <summary>
		/// An array of name/value pairs that describe details the error condition. These are useful when multiple errors are returned.
		/// </summary>
		public ErrorParameter[] Parameters { get; set; }
		
		/// <summary>
		/// Further helps indicate which subsystem the error is coming from. System subcategories include: Initialization, Serialization, Security, Monitoring, Rate Limiting, etc.
		/// </summary>
		public string Subdomain { get; set; }
	}
	
	public class ErrorParameter
	{
		
		/// <summary>
		/// The object of the error.
		/// </summary>
		public string Name { get; set; }
		
		/// <summary>
		/// The value of the object.
		/// </summary>
		public string Value { get; set; }
	}
	
	/// <summary>
	/// This type contains the output payload of the getChangeRequests call, which is a portion of the collection of change requests that match the search criteria. The returned set of change requests is a page, and the response includes information for navigating the output pages.
	/// </summary>
	public class GetChangeRequestsResponse
	{
		
		/// <summary>
		/// Contains the full details of one or more catalog change requests, including the original payload of the createChangeRequest call, processing status and key dates, and resolution details.
		/// </summary>
		public ChangeRequest[] ChangeRequests { get; set; }
		
		/// <summary>
		/// The URI of the getChangeRequests call request that produced this page of results.
		/// </summary>
		public string Href { get; set; }
		
		/// <summary>
		/// The maximum number of change requests in this page, a subset of the full collection of change requests that match the filter criteria of this call. This field combines with the offset field to identify the change requests being returned.
		/// </summary>
		public int Limit { get; set; }
		
		/// <summary>
		/// The getChangeRequests call URI for the next page. For example, the following URI returns records 41 thru 50 from the collection of change requests: path/change_request?limit=10&amp;offset=40 Note: This feature employs a zero-based list, where the first order in the list has an offset of 0.
		/// </summary>
		public string Next { get; set; }
		
		/// <summary>
		/// The first change request in this page based on its position in the returned collection of change requests. For example, if offset is set to 10 and limit is set to 10, this page includes change requests 11 thru 20 from the resulting collection of change requests. Note: This feature employs a zero-based list, where the first item in the list has an offset of 0.
		/// </summary>
		public int Offset { get; set; }
		
		/// <summary>
		/// The getChangeRequests call URI for the previous page. For example, the following URI returns orders 21 thru 30 from the collection of orders: path/change_request?limit=10&amp;offset=20 Note: This feature employs a zero-based list, where the first order in the list has an offset of 0.
		/// </summary>
		public string Prev { get; set; }
		
		/// <summary>
		/// The total number of change requests in the collection. Note: If no change requests are found, this field is returned with a value of 0.
		/// </summary>
		public int Total { get; set; }
	}
	
	/// <summary>
	/// This type contains information about a product image stored in eBay Picture Services (EPS).
	/// </summary>
	public class Image
	{
		
		/// <summary>
		/// The height of the image in pixels.
		/// </summary>
		public int Height { get; set; }
		
		/// <summary>
		/// The eBay Picture Services (EPS) URL of the image.
		/// </summary>
		public string ImageUrl { get; set; }
		
		/// <summary>
		/// The width of the image in pixels.
		/// </summary>
		public int Width { get; set; }
	}
	
	/// <summary>
	/// This type provides details of conflicting products, corrections required, or violations that were discovered in a change request.
	/// </summary>
	public class ProcessResolution
	{
		
		/// <summary>
		/// Contains information about one or more existing products with identifying information that matches or instersects with the suggested product. For each conflicting product, the difference is in the presence or value of one or more product aspects. If the seller accepts the aspects and their values of the conflicting product (such as a color value of scarlet instead of crimson), that product can be adopted by the seller instead of the suggested product. If the seller does not accept any of the conflicting products as is, you can submit a change request to update one of them, or to create a new product for which identifying information doesn't overlap with an existing product enough to produce a conflict.
		/// </summary>
		public ConflictingProduct[] ConflictingProducts { get; set; }
		
		/// <summary>
		/// Contains information about one or more corrections to this change request that eBay has applied to the new or updated product. Sellers can accept these corrections by adopting the product, which is identified by the epid field.
		/// </summary>
		public Correction[] Corrections { get; set; }
		
		/// <summary>
		/// Returned only if the value of changeRequestStatus is APPROVED or APPROVED_WITH_MODIFICATIONS; this is the eBay identifier of the resulting product.
		/// </summary>
		public string Epid { get; set; }
		
		/// <summary>
		/// The URI of the getProduct call request that retrieves this product's details. This field is returned under one of the following conditions: The value of changeRequestType is PRODUCT_UPDATE. The value of changeRequestType is PRODUCT_CREATION, and the value of changeRequestStatus is APPROVED or APPROVED_WITH_MODIFICATIONS.
		/// </summary>
		public string ProductHref { get; set; }
		
		/// <summary>
		/// Contains information about one or more violations in the values of the suggested product's aspects or fixed attributes.
		/// </summary>
		public Violation[] Violations { get; set; }
	}
	
	/// <summary>
	/// This type contains the full details of a specified product, including information about the product's identifiers, product images, aspects, and categories.
	/// </summary>
	public class Product
	{
		
		/// <summary>
		/// Contains information about additional images associated with this product. For the primary image, see the image container.
		/// </summary>
		public Image[] AdditionalImages { get; set; }
		
		/// <summary>
		/// Contains an array of the category aspects and their values that are associated with this product.
		/// </summary>
		public Aspect[] Aspects { get; set; }
		
		/// <summary>
		/// The manufacturer's brand name for this product.
		/// </summary>
		public string Brand { get; set; }
		
		/// <summary>
		/// The rich description of this product, which might contain HTML.
		/// </summary>
		public string Description { get; set; }
		
		/// <summary>
		/// A list of all European Article Numbers (EANs) that identify this product.
		/// </summary>
		public string[] Ean { get; set; }
		
		/// <summary>
		/// The eBay product ID of this product.
		/// </summary>
		public string Epid { get; set; }
		
		/// <summary>
		/// A list of all GTINs that identify this product. Currently this can include EAN, ISBN, and UPC identifier types.
		/// </summary>
		public string[] Gtin { get; set; }
		
		/// <summary>
		/// This type contains information about a product image stored in eBay Picture Services (EPS).
		/// </summary>
		public Image Image { get; set; }
		
		/// <summary>
		/// A list of all International Standard Book Numbers (ISBNs) that identify this product.
		/// </summary>
		public string[] Isbn { get; set; }
		
		/// <summary>
		/// A list of all MPN values that the manufacturer uses to identify this product.
		/// </summary>
		public string[] Mpn { get; set; }
		
		/// <summary>
		/// A list of category IDs (other than the value of primaryCategoryId) for all the leaf categories to which this product might belong.
		/// </summary>
		public string[] OtherApplicableCategoryIds { get; set; }
		
		/// <summary>
		/// The identifier of the leaf category that eBay recommends using to list this product, based on previous listings of similar products. Products in the eBay catalog are not automatically associated with any particular category, but using an inappropriate category can make it difficult for prospective buyers to find the product. For other possible categories that might be used, see otherApplicableCategoryIds.
		/// </summary>
		public string PrimaryCategoryId { get; set; }
		
		/// <summary>
		/// The URL for this product's eBay product page.
		/// </summary>
		public string ProductWebUrl { get; set; }
		
		/// <summary>
		/// The title of this product on eBay.
		/// </summary>
		public string Title { get; set; }
		
		/// <summary>
		/// A list of Universal Product Codes (UPCs) that identify this product.
		/// </summary>
		public string[] Upc { get; set; }
		
		/// <summary>
		/// The current version number of this product record in the catalog.
		/// </summary>
		public string Version { get; set; }
	}
	
	/// <summary>
	/// This type contains the name and values of a category aspect that is associated with a particular product.
	/// </summary>
	public class ProductAspect
	{
		
		/// <summary>
		/// The name of the product aspect, such as Model Number, Size, or Color.
		/// </summary>
		public string Name { get; set; }
		
		/// <summary>
		/// Required or returned if a value is provided for the name field. This is a list of one or more localized values of this product aspect.
		/// </summary>
		public string[] Values { get; set; }
	}
	
	/// <summary>
	/// This type contains information about the constraints for an aspect that's associated with a specific eBay category or eBay Catalog product.
	/// </summary>
	public class ProductAspectConstraint
	{
		
		/// <summary>
		/// The data type used to represent the aspect. See the AspectDataTypeEnum type for more information about each data type. For implementation help, refer to <a href='https://developer.ebay.com/devzone/rest/api-ref/catalog/types/AspectDataTypeEnum.html'>eBay API documentation</a>
		/// </summary>
		public string AspectDataType { get; set; }
		
		/// <summary>
		/// Returned only if the value of aspectDataType is STRING or NUMBER. The required format for date or number values (e.g. a date value may be expressed as MMYYYY or MMYY).
		/// </summary>
		public string AspectFormat { get; set; }
		
		/// <summary>
		/// Indicates whether the seller must select from a closed list of aspect values, or can input the aspect value manually. For implementation help, refer to <a href='https://developer.ebay.com/devzone/rest/api-ref/catalog/types/AspectModeEnum.html'>eBay API documentation</a>
		/// </summary>
		public string AspectMode { get; set; }
		
		/// <summary>
		/// A value of true indicates that the aspect is mandatory for products listed in this category.
		/// </summary>
		public bool AspectRequired { get; set; }
		
		/// <summary>
		/// This value indicates the level of importance of the product identifier appearing in the catalog product. For implementation help, refer to <a href='https://developer.ebay.com/devzone/rest/api-ref/catalog/types/ImportanceEnum.html'>eBay API documentation</a>
		/// </summary>
		public string Importance { get; set; }
		
		/// <summary>
		/// Indicates whether the aspect requires only one value, or can accept multiple values when listing in this category. An example of a product aspect that will often have numerous values is Features. For implementation help, refer to <a href='https://developer.ebay.com/devzone/rest/api-ref/catalog/types/ItemToAspectCardinalityEnum.html'>eBay API documentation</a>
		/// </summary>
		public string ProductToAspectCardinality { get; set; }
	}
	
	/// <summary>
	/// This type contains information about a product aspect associated with a given catalog product.
	/// </summary>
	public class ProductAspectValue
	{
		
		/// <summary>
		/// A supported value of the corresponding product aspect (shown in the aspects.name field). Every supported value for the product aspect is shown under the aspects.values container. Note that one of these values can possibly be used instead of the product aspect value(s) currently defined for the eBay Catalog product and specified in the aspects.valuesAssociatedWithProduct array.
		/// </summary>
		public string Value { get; set; }
		
		/// <summary>
		/// Not returned if the value of the value field can always be selected for this aspect of the specified category. Contains a list of the dependencies that identify when the value of the value field is available for the current aspect. Each dependency specifies the values of another aspect of the same category (a control aspect), for which the current value of the current aspect can also be selected by the seller. Example: A shirt is available in three sizes and three colors, but only the Small and Medium sizes come in Green. Thus for the Color aspect, the value Green is constrained by its dependency on Size (the control aspect). Only when the Size aspect value is Small or Medium, can the Color aspect value of Green be selected by the seller.
		/// </summary>
		public ValueConstraint[] ValueConstraints { get; set; }
	}
	
	/// <summary>
	/// This type contains information about certain available product attributes, their input requirements, and their constraints for specified categories.
	/// </summary>
	public class ProductIdentifier
	{
		
		/// <summary>
		/// This type contains information about the input, formatting, and occurrence constraints of a product identifier.
		/// </summary>
		public ProductIdentifierConstraint Constraint { get; set; }
		
		/// <summary>
		/// A list of one or more valid values for this product identifier.
		/// </summary>
		public string[] Values { get; set; }
	}
	
	/// <summary>
	/// This type contains information about the input, formatting, and occurrence constraints of a product identifier.
	/// </summary>
	public class ProductIdentifierConstraint
	{
		
		/// <summary>
		/// This value indicates the level of importance of the product identifier appearing in the catalog product. For implementation help, refer to <a href='https://developer.ebay.com/devzone/rest/api-ref/catalog/types/ImportanceEnum.html'>eBay API documentation</a>
		/// </summary>
		public string Importance { get; set; }
		
		/// <summary>
		/// Indicates whether the seller must select from a closed list of identifier values, or can input the identifier manually. For implementation help, refer to <a href='https://developer.ebay.com/devzone/rest/api-ref/catalog/types/AspectModeEnum.html'>eBay API documentation</a>
		/// </summary>
		public string Mode { get; set; }
		
		/// <summary>
		/// A value of true indicates that the identifier is mandatory for the product or categories specified.
		/// </summary>
		public bool Required { get; set; }
	}
	
	/// <summary>
	/// This type contains information about certain available product attributes, their input requirements, and their constraints for a specified product and any specified categories.
	/// </summary>
	public class ProductIdentifierForProductMetadata
	{
		
		/// <summary>
		/// This type contains information about the input, formatting, and occurrence constraints of a product identifier.
		/// </summary>
		public ProductIdentifierConstraint Constraint { get; set; }
		
		/// <summary>
		/// The identifier value currently associated with the product.
		/// </summary>
		public string ValueAssociatedWithProduct { get; set; }
		
		/// <summary>
		/// A list of one or more valid values for this product identifier.
		/// </summary>
		public string[] Values { get; set; }
	}
	
	/// <summary>
	/// This type is the container type for the response payload of the getProductMetadata call, which returns merged aspect metadata for a catalog product.
	/// </summary>
	public class ProductMetadata
	{
		
		/// <summary>
		/// Contains information about one or more aspects that are supported for the specified catalog product, including those that are currently associated with the product. This is a union (with duplicates removed) of all aspects associated with the specified category or categories (if provided) and those associated with the product.
		/// </summary>
		public ProductMetadataAspect[] Aspects { get; set; }
		
		/// <summary>
		/// This type contains information about certain available product attributes, their input requirements, and their constraints for a specified product and any specified categories.
		/// </summary>
		public ProductIdentifierForProductMetadata Brand { get; set; }
		
		/// <summary>
		/// This type contains information about certain available product attributes, their input requirements, and their constraints for a specified product and any specified categories.
		/// </summary>
		public ProductIdentifierForProductMetadata Ean { get; set; }
		
		/// <summary>
		/// This type contains information about certain available product attributes, their input requirements, and their constraints for a specified product and any specified categories.
		/// </summary>
		public ProductIdentifierForProductMetadata Isbn { get; set; }
		
		/// <summary>
		/// This type contains information about certain available product attributes, their input requirements, and their constraints for a specified product and any specified categories.
		/// </summary>
		public ProductIdentifierForProductMetadata Mpn { get; set; }
		
		/// <summary>
		/// This type contains information about certain available product attributes, their input requirements, and their constraints for a specified product and any specified categories.
		/// </summary>
		public ProductIdentifierForProductMetadata Upc { get; set; }
	}
	
	/// <summary>
	/// This type contains detailed information about an aspect that's supported for a given eBay Catalog product. These details include the aspect name, current value(s), supported/possible values, and constraint information.
	/// </summary>
	public class ProductMetadataAspect
	{
		
		/// <summary>
		/// Returned only if this field is populated. This provides information and context for the product aspect. The help text can be presented to the seller to clarify the intended purpose of the aspect, and recommendations for its use. For example, the help text for the Country/Region of Manufacture aspect is: Specifying the country/region of manufacture can help streamline customs clearance.
		/// </summary>
		public string AspectHelpText { get; set; }
		
		/// <summary>
		/// This type contains information about the constraints for an aspect that's associated with a specific eBay category or eBay Catalog product.
		/// </summary>
		public ProductAspectConstraint Constraint { get; set; }
		
		/// <summary>
		/// A value of true indicates that this product aspect can be removed from the specified catalog product definition by omitting it from a product change request. A value of false indicates that this product aspect cannot be dropped (although it is possible that its value could be modified).
		/// </summary>
		public bool Droppable { get; set; }
		
		/// <summary>
		/// The name of the product aspect, such as Model Number, Size, or Color.
		/// </summary>
		public string Name { get; set; }
		
		/// <summary>
		/// Not returned if the value of the constraint field is FREE_TEXT and there are no stored values for this aspect. Contains information about the supported values for the product aspect identified by the name field, as well as constraint information for the product aspect values. These values can be used instead of the product aspect value(s) currently defined for the eBay Catalog product, and those specified in the valuesAssociatedWithProduct array.
		/// </summary>
		public ProductAspectValue[] Values { get; set; }
		
		/// <summary>
		/// The value(s) currently defined for the eBay Catalog product for the product aspect identified by the corresponding name field.
		/// </summary>
		public string[] ValuesAssociatedWithProduct { get; set; }
	}
	
	/// <summary>
	/// This type is the container type for the response payload of the getProductMetadataForCategories call, which returns required and recommended product aspects, brand names, and manufacturer part numbers for one or more eBay categories.
	/// </summary>
	public class ProductMetadataForCategories
	{
		
		/// <summary>
		/// Contains information about one or more required and recommended product aspects associated with the specified eBay category or categories. This is a union (with duplicates removed) of all aspects associated with the specified categories.
		/// </summary>
		public CategoryAspect[] Aspects { get; set; }
		
		/// <summary>
		/// This type contains information about certain available product attributes, their input requirements, and their constraints for specified categories.
		/// </summary>
		public ProductIdentifier Brand { get; set; }
		
		/// <summary>
		/// This type contains information about certain available product attributes, their input requirements, and their constraints for specified categories.
		/// </summary>
		public ProductIdentifier Ean { get; set; }
		
		/// <summary>
		/// This type contains information about certain available product attributes, their input requirements, and their constraints for specified categories.
		/// </summary>
		public ProductIdentifier Isbn { get; set; }
		
		/// <summary>
		/// This type contains information about certain available product attributes, their input requirements, and their constraints for specified categories.
		/// </summary>
		public ProductIdentifier Mpn { get; set; }
		
		/// <summary>
		/// This type contains information about certain available product attributes, their input requirements, and their constraints for specified categories.
		/// </summary>
		public ProductIdentifier Upc { get; set; }
	}
	
	/// <summary>
	/// This type contains the specifications for the collection of products that match the search or filter criteria of a search call. A maximum of 200 product summaries is returned (the result set), fewer if you include the limit query parameter in the request.
	/// </summary>
	public class ProductSearchResponse
	{
		
		/// <summary>
		/// This field is reserved for internal or future use.
		/// </summary>
		public string Href { get; set; }
		
		/// <summary>
		/// The number of product summaries returned in the response. This is the result set, a subset of the full collection of products that match the search or filter criteria of this call. If the limit query parameter was included in the request, this field will have the same value. Default: 50
		/// </summary>
		public int Limit { get; set; }
		
		/// <summary>
		/// This field is reserved for internal or future use.
		/// </summary>
		public string Next { get; set; }
		
		/// <summary>
		/// This field is reserved for internal or future use.
		/// </summary>
		public int Offset { get; set; }
		
		/// <summary>
		/// This field is reserved for internal or future use.
		/// </summary>
		public string Prev { get; set; }
		
		/// <summary>
		/// Returned if the fieldGroups query parameter was omitted from the request, or if it was included with a value of MATCHING_PRODUCTS or FULL. This container provides an array of product summaries in the current result set for products that match the combination of the q, category_ids, and aspect_filter parameters that were provided in the request. Each product summary includes information about the product's identifiers, product images, aspects, the product page URL, and the getProduct URL for retrieving the product details.
		/// </summary>
		public ProductSummary[] ProductSummaries { get; set; }
		
		/// <summary>
		/// This type identifies a product category and the aspects associated with that category. Each aspect distribution container returns the distribution of values that have been used for the aspect.
		/// </summary>
		public Refinement Refinement { get; set; }
		
		/// <summary>
		/// This field is reserved for internal or future use.
		/// </summary>
		public int Total { get; set; }
	}
	
	/// <summary>
	/// This type contains a summary of a specified product. The product summary includes information about the product's identifiers, product images, aspects, and the getProduct URL for retrieving the product details.
	/// </summary>
	public class ProductSummary
	{
		
		/// <summary>
		/// Contains information about additional images associated with this product. For the primary image, see the image container.
		/// </summary>
		public Image[] AdditionalImages { get; set; }
		
		/// <summary>
		/// Contains an array of the category aspects and their values that are associated with this product.
		/// </summary>
		public Aspect[] Aspects { get; set; }
		
		/// <summary>
		/// The manufacturer's brand name for this product.
		/// </summary>
		public string Brand { get; set; }
		
		/// <summary>
		/// A list of all European Article Numbers (EANs) that identify this product.
		/// </summary>
		public string[] Ean { get; set; }
		
		/// <summary>
		/// The eBay product ID of this product.
		/// </summary>
		public string Epid { get; set; }
		
		/// <summary>
		/// A list of all GTINs that identify this product. This includes all of the values returned in the ean, isbn, and upc fields.
		/// </summary>
		public string[] Gtin { get; set; }
		
		/// <summary>
		/// This type contains information about a product image stored in eBay Picture Services (EPS).
		/// </summary>
		public Image Image { get; set; }
		
		/// <summary>
		/// A list of all International Standard Book Numbers (ISBNs) that identify this product.
		/// </summary>
		public string[] Isbn { get; set; }
		
		/// <summary>
		/// A list of all Manufacturer Product Number (MPN) values that the manufacturer uses to identify this product.
		/// </summary>
		public string[] Mpn { get; set; }
		
		/// <summary>
		/// The URI of the getProduct call request that retrieves this product's details.
		/// </summary>
		public string ProductHref { get; set; }
		
		/// <summary>
		/// The URL for this product's eBay product page.
		/// </summary>
		public string ProductWebUrl { get; set; }
		
		/// <summary>
		/// The title of this product on eBay.
		/// </summary>
		public string Title { get; set; }
		
		/// <summary>
		/// A list of Universal Product Codes (UPCs) that identify this product.
		/// </summary>
		public string[] Upc { get; set; }
	}
	
	/// <summary>
	/// This type identifies a product category and the aspects associated with that category. Each aspect distribution container returns the distribution of values that have been used for the aspect.
	/// </summary>
	public class Refinement
	{
		
		/// <summary>
		/// Contains information about one or more aspects that are associated with the category identified by dominantCategoryId.
		/// </summary>
		public AspectDistribution[] AspectDistributions { get; set; }
		
		/// <summary>
		/// The ID of the category that eBay determines is most likely to cover the products matching the search criteria.
		/// </summary>
		public string DominantCategoryId { get; set; }
	}
	
	/// <summary>
	/// This type contains the full details of a suggested product, including information about the product's identifiers, description, product images, categories, and aspects.
	/// </summary>
	public class SuggestedProduct
	{
		
		/// <summary>
		/// A list of URLs for additional images associated with the suggested product. For the URL of the primary image, see the imageUrl field.
		/// </summary>
		public string[] AdditionalImageUrls { get; set; }
		
		/// <summary>
		/// Contains one or more category aspects and their values that are associated with the suggested product.
		/// </summary>
		public ProductAspect[] Aspects { get; set; }
		
		/// <summary>
		/// The manufacturer's brand name for the suggested product.
		/// </summary>
		public string Brand { get; set; }
		
		/// <summary>
		/// A rich description of the suggested product, which can contain HTML, including the following basic tags: Text formatting tags such as &lt;b&gt;, &lt;i&gt;, &lt;br&gt;, &lt;ol&gt;, &lt;ul&gt;, and &lt;li&gt; Table formatting tags such as &lt;table&gt;, &lt;tr&gt;, &lt;td&gt;, &lt;th&gt;, &lt;thead&gt;, &lt;tfoot&gt;, &lt;tbody&gt;, &lt;caption&gt;, &lt;col&gt;, and &lt;colgroup&gt; Note: Active content from sellers is prohibited on eBay, including animation or video via JavaScript, Flash, plug-ins, or form actions.
		/// </summary>
		public string Description { get; set; }
		
		/// <summary>
		/// A list of all European Article Numbers (EANs) that identify the suggested product.
		/// </summary>
		public string[] Ean { get; set; }
		
		/// <summary>
		/// Required or returned only if the value of the changeRequestType field is PRODUCT_UPDATE. This is the eBay product ID of the product record for which an update is being suggested.
		/// </summary>
		public string Epid { get; set; }
		
		/// <summary>
		/// Required or returned if the value of the changeRequestType field is PRODUCT_CREATION. This is the URL of the primary image associated with the suggested product.
		/// </summary>
		public string ImageUrl { get; set; }
		
		/// <summary>
		/// A list of all International Standard Book Numbers (ISBNs) that identify the suggested product.
		/// </summary>
		public string[] Isbn { get; set; }
		
		/// <summary>
		/// A list of all Manufacturer Product Number (MPN) values that the manufacturer uses to identify the suggested product.
		/// </summary>
		public string[] Mpn { get; set; }
		
		/// <summary>
		/// A list of category IDs (other than the value of primaryCategoryId) for all the leaf categories to which the suggested product might belong.
		/// </summary>
		public string[] OtherApplicableCategoryIds { get; set; }
		
		/// <summary>
		/// The identifier of the category that eBay recommends using to list the suggested product, based on previous listings of similar products. Products in the eBay catalog are not automatically associated with any particular category, but using an inappropriate category can make it difficult for prospective buyers to find the product. For other possible categories that might be used, see otherApplicableCategoryIds.
		/// </summary>
		public string PrimaryCategoryId { get; set; }
		
		/// <summary>
		/// The catalog title that will be used as the listing title for all item listings based on the suggested product.
		/// </summary>
		public string Title { get; set; }
		
		/// <summary>
		/// A list of all Universal Product Codes (UPCs) that identify the suggested product.
		/// </summary>
		public string[] Upc { get; set; }
		
		/// <summary>
		/// Required or returned only if the value of changeRequestType is PRODUCT_UPDATE. This is the current version number in the catalog of the product record for which an update is being suggested.
		/// </summary>
		public string Version { get; set; }
	}
	
	/// <summary>
	/// This type contains a list of the dependencies that identify when a particular value is available for a given aspect of a given category. Each dependency specifies the values of another aspect of the same category (the control aspect), for which the given value of the given aspect can also be selected by the seller. This container consists of constraint information for the corresponding product aspect value.
	/// </summary>
	public class ValueConstraint
	{
		
		/// <summary>
		/// The name of the control aspect on which the current aspect value depends.
		/// </summary>
		public string ApplicableForAspectName { get; set; }
		
		/// <summary>
		/// Contains a list of the values of the control aspect on which this aspect's value depends. When the control aspect has any of the specified values, the current value of the current aspect will also be available.
		/// </summary>
		public string[] ApplicableForAspectValues { get; set; }
	}
	
	/// <summary>
	/// This type contains information about a violation of eBay standards in a change request.
	/// </summary>
	public class Violation
	{
		
		/// <summary>
		/// Contains the name of a product aspect that is in violation of eBay standards in a particular catalog change request, along with its values that produced the violation.
		/// </summary>
		public ViolationAspectValues AspectsValues { get; set; }
		
		/// <summary>
		/// This type contains the name of a particular product attribute with a value in violation of eBay standards, and if the name is not ASPECT_NAME (a product aspect), the values of the attribute that are in violation.
		/// </summary>
		public ViolationProductAttribute ProductAttribute { get; set; }
		
		/// <summary>
		/// An explanation of the reason for this violation.
		/// </summary>
		public string Reason { get; set; }
		
		/// <summary>
		/// The eBay-assigned identifier of the violation type of this violation.
		/// </summary>
		public string ViolationCode { get; set; }
	}
	
	/// <summary>
	/// Contains the name of a product aspect that is in violation of eBay standards in a particular catalog change request, along with its values that produced the violation.
	/// </summary>
	public class ViolationAspectValues
	{
		
		/// <summary>
		/// The localized name of this product aspect that's in violation, such as Model Number, Size, or Color.
		/// </summary>
		public string AspectName { get; set; }
		
		/// <summary>
		/// A list of one or more values of this product aspect that are in violation of eBay standards.
		/// </summary>
		public string[] Values { get; set; }
	}
	
	/// <summary>
	/// This type contains the name of a particular product attribute with a value in violation of eBay standards, and if the name is not ASPECT_NAME (a product aspect), the values of the attribute that are in violation.
	/// </summary>
	public class ViolationProductAttribute
	{
		
		/// <summary>
		/// The name of the product attribute type in the change request which is in violation, such as BRAND, CATEGORY, or TITLE. See the ProductAttributeName type for available values. Note: If the value of this field is ASPECT_NAME, see violations.aspectsValues for violation information. For implementation help, refer to <a href='https://developer.ebay.com/devzone/rest/api-ref/catalog/types/ProductAttributeName.html'>eBay API documentation</a>
		/// </summary>
		public string Name { get; set; }
		
		/// <summary>
		/// Not returned if the value of name is ASPECT_NAME (see instead violations.aspectsValues). This is a list of the named attribute's values that are in violation.
		/// </summary>
		public string[] Values { get; set; }
	}
	
	public partial class Change_requestClient
	{
		
		private System.Net.Http.HttpClient client;
		
		public Change_requestClient(System.Net.Http.HttpClient client)
		{
			if (client == null)
				throw new ArgumentNullException("Null HttpClient.", "client");

			if (client.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "client");

			this.client = client;
		}
		
		/// <summary>
		/// Note: The three catalog change request methods in the Catalog API are deprecated, and are scheduled to be decommissioned in Q1 of 2020. Currently, this method may still return data for a valid change request ID, but the data will be static, the status will not change, and it will not be possible to make any changes to the change request. At any time, it is possible that all catalog change requests for a user will be removed, and then this method will just trigger this error: The specified change request ID was not found. (error code 75150). Use this call to retrieve the contents of a catalog change request based on its unique identifier, change_request_id. The change_request_id value was originally generated by the createChangeRequest call, and is returned by the getChangeRequests call in the changeRequests.changeRequestId field.
		/// GetChangeRequest change_request/{change_request_id}
		/// </summary>
		/// <param name="change_request_id">The unique identifier of the change request being requested. This value was originally generated by the createChangeRequest call, and is returned by the getChangeRequests call in the changeRequests.changeRequestId field.</param>
		/// <returns>Success</returns>
		public async Task<ChangeRequest> GetChangeRequestAsync(string change_request_id)
		{
			var requestUri = "change_request/"+Uri.EscapeDataString(change_request_id);
			var responseMessage = await client.GetAsync(requestUri);
			try
			{
				responseMessage.EnsureSuccessStatusCode();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ChangeRequest>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Note: The three catalog change request methods in the Catalog API are deprecated, and are scheduled to be decommissioned in Q1 of 2020. Currently, this method may still return data for a valid change request ID, but the data will be static, the status will not change, and it will not be possible to make any changes to the change request. At any time, it is possible that all catalog change requests for a user will be removed, and then this method will just trigger this error: The specified change request ID was not found. (error code 75150). Use this call to retrieve the contents of a catalog change request based on its unique identifier, change_request_id. The change_request_id value was originally generated by the createChangeRequest call, and is returned by the getChangeRequests call in the changeRequests.changeRequestId field.
		/// GetChangeRequest change_request/{change_request_id}
		/// </summary>
		/// <param name="change_request_id">The unique identifier of the change request being requested. This value was originally generated by the createChangeRequest call, and is returned by the getChangeRequests call in the changeRequests.changeRequestId field.</param>
		/// <returns>Success</returns>
		public ChangeRequest GetChangeRequest(string change_request_id)
		{
			var requestUri = "change_request/"+Uri.EscapeDataString(change_request_id);
			var responseMessage = this.client.GetAsync(requestUri).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCode();
				var stream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ChangeRequest>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Note: The three catalog change request methods in the Catalog API are deprecated, and are scheduled to be decommissioned in Q1 of 2020. Currently, this method may still return existing change requests for a user, but the data will be static, the statuses will not change, and it will not be possible to make any changes to any of the change requests. At any time, it is possible that all catalog change requests for a user will be removed, and then this method will just return an empty changeRequests array. Use this call to search for and retrieve one or more catalog change requests that were submitted by the authenticated user based on their creation date, processing status, reference type or reference ID.
		/// GetChangeRequests change_request
		/// </summary>
		/// <param name="filter">One or more comma-separated criteria for narrowing down the collection of change requests returned by this call. These criteria correspond to specific fields in the response payload. Multiple filter criteria combine to further restrict the results. The available criteria are as follows: creationDate The time period during which qualifying change requests were created (the changeRequests.creationDate field). In the URI, this is expressed as a starting timestamp, with or without an ending timestamp (in brackets). The timestamps are in ISO 8601 format, which uses the 24-hour Universal Coordinated Time (UTC) clock. For example: creationDate:[2016-02-21T08:25:43.511Z..] identifies orders created on or after the given timestamp. creationDate:[2016-02-21T08:25:43.511Z..2016-04-21T08:25:43.511Z] identifies orders created between the given timestamps, inclusive. changeRequestStatus The degree to which qualifying change requests have been resolved (the changeRequests.changeRequestStatus field). For example: changeRequestStatus:{SUBMITTED} specifies change requests that have been submitted and are being processed. changeRequestStatus:{UNDER_REVIEW|APPROVED_WITH_MODIFICATIONS} specifies change requests that are being reviewed by eBay, and change requests that have been approved, but eBay has made some modifications such as correcting typographic errors. changeRequestStatus:{REJECTED} specifies change requests that have been rejected by eBay because of a violation. referenceId The identifier of an object of the type specified by the value of the referenceType parameter. For example, if the value of referenceType is INVENTORY_ITEM, this field should contain the seller's SKU for an inventory item. If you include this without the referenceType parameter, the filter will apply to objects of any reference type with this reference ID, if specified in the change request. This parameter can take multiple values. For example: referenceId:{234242|675756} referenceType The type of object that a requested catalog change is intended to support, if specified in the change request (the changeRequests.referenceType field). For example: referenceType:{INVENTORY_ITEM} indicates that the requested change will support the completion of an inventory item, which you can then use to create an offer. referenceType:{LISTING} indicates that the requested change will support the modification of an active product listing. referenceType:{LISTING_DRAFT} indicates that the requested change will support the completion of an offer, which you can then publish as a product listing. For implementation help, refer to eBay API documentation at https://developer.ebay.com/devzone/rest/api-ref/catalog/types/FilterField.html</param>
		/// <param name="limit">The number of change requests to return. This is the result set, a subset of the full collection of change requests that match the filter criteria of this call. Maximum: 200 Default: 50</param>
		/// <param name="offset">The first change request to return based on its position in the returned collection of change requests. Use this parameter in conjunction with the limit parameter to control the pagination of the output. For example, if offset is set to 10 and limit is set to 10, the call retrieves change requests 11 thru 20 from the resulting collection of change requests. Note: This feature employs a zero-based list, where the first item in the list has an offset of 0. Default: 0 (zero)</param>
		/// <returns>Success</returns>
		public async Task<GetChangeRequestsResponse> GetChangeRequestsAsync(string filter, string limit, string offset)
		{
			var requestUri = "change_request?filter=" + Uri.EscapeDataString(filter)+"&limit=" + Uri.EscapeDataString(limit)+"&offset=" + Uri.EscapeDataString(offset);
			var responseMessage = await client.GetAsync(requestUri);
			try
			{
				responseMessage.EnsureSuccessStatusCode();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<GetChangeRequestsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Note: The three catalog change request methods in the Catalog API are deprecated, and are scheduled to be decommissioned in Q1 of 2020. Currently, this method may still return existing change requests for a user, but the data will be static, the statuses will not change, and it will not be possible to make any changes to any of the change requests. At any time, it is possible that all catalog change requests for a user will be removed, and then this method will just return an empty changeRequests array. Use this call to search for and retrieve one or more catalog change requests that were submitted by the authenticated user based on their creation date, processing status, reference type or reference ID.
		/// GetChangeRequests change_request
		/// </summary>
		/// <param name="filter">One or more comma-separated criteria for narrowing down the collection of change requests returned by this call. These criteria correspond to specific fields in the response payload. Multiple filter criteria combine to further restrict the results. The available criteria are as follows: creationDate The time period during which qualifying change requests were created (the changeRequests.creationDate field). In the URI, this is expressed as a starting timestamp, with or without an ending timestamp (in brackets). The timestamps are in ISO 8601 format, which uses the 24-hour Universal Coordinated Time (UTC) clock. For example: creationDate:[2016-02-21T08:25:43.511Z..] identifies orders created on or after the given timestamp. creationDate:[2016-02-21T08:25:43.511Z..2016-04-21T08:25:43.511Z] identifies orders created between the given timestamps, inclusive. changeRequestStatus The degree to which qualifying change requests have been resolved (the changeRequests.changeRequestStatus field). For example: changeRequestStatus:{SUBMITTED} specifies change requests that have been submitted and are being processed. changeRequestStatus:{UNDER_REVIEW|APPROVED_WITH_MODIFICATIONS} specifies change requests that are being reviewed by eBay, and change requests that have been approved, but eBay has made some modifications such as correcting typographic errors. changeRequestStatus:{REJECTED} specifies change requests that have been rejected by eBay because of a violation. referenceId The identifier of an object of the type specified by the value of the referenceType parameter. For example, if the value of referenceType is INVENTORY_ITEM, this field should contain the seller's SKU for an inventory item. If you include this without the referenceType parameter, the filter will apply to objects of any reference type with this reference ID, if specified in the change request. This parameter can take multiple values. For example: referenceId:{234242|675756} referenceType The type of object that a requested catalog change is intended to support, if specified in the change request (the changeRequests.referenceType field). For example: referenceType:{INVENTORY_ITEM} indicates that the requested change will support the completion of an inventory item, which you can then use to create an offer. referenceType:{LISTING} indicates that the requested change will support the modification of an active product listing. referenceType:{LISTING_DRAFT} indicates that the requested change will support the completion of an offer, which you can then publish as a product listing. For implementation help, refer to eBay API documentation at https://developer.ebay.com/devzone/rest/api-ref/catalog/types/FilterField.html</param>
		/// <param name="limit">The number of change requests to return. This is the result set, a subset of the full collection of change requests that match the filter criteria of this call. Maximum: 200 Default: 50</param>
		/// <param name="offset">The first change request to return based on its position in the returned collection of change requests. Use this parameter in conjunction with the limit parameter to control the pagination of the output. For example, if offset is set to 10 and limit is set to 10, the call retrieves change requests 11 thru 20 from the resulting collection of change requests. Note: This feature employs a zero-based list, where the first item in the list has an offset of 0. Default: 0 (zero)</param>
		/// <returns>Success</returns>
		public GetChangeRequestsResponse GetChangeRequests(string filter, string limit, string offset)
		{
			var requestUri = "change_request?filter=" + Uri.EscapeDataString(filter)+"&limit=" + Uri.EscapeDataString(limit)+"&offset=" + Uri.EscapeDataString(offset);
			var responseMessage = this.client.GetAsync(requestUri).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCode();
				var stream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<GetChangeRequestsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Note: The three catalog change request methods in the Catalog API are deprecated, and are scheduled to be decommissioned in Q1 of 2020. This method is no longer supported for any eBay categories and will return this error if used: Change Request is not supported for this product at this moment. (error code 75157) When sellers are unable to identify an eBay catalog product on which to base their item listing, this call enables you to request that eBay update an existing product record or create a new product record that will successfully match the seller's inventory item.
		/// CreateChangeRequest change_request
		/// </summary>
		/// <param name="requestBody">Contains the full details of a specified catalog change request, including the type of request, the reason for a product update request, and the details of the new or updated product being suggested.</param>
		public async Task CreateChangeRequestAsync(CreateChangeRequestPayload requestBody)
		{
			var requestUri = "change_request";
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create();
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			var responseMessage = await client.PostAsync(requestUri, content);
			try
			{
				responseMessage.EnsureSuccessStatusCode();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Note: The three catalog change request methods in the Catalog API are deprecated, and are scheduled to be decommissioned in Q1 of 2020. This method is no longer supported for any eBay categories and will return this error if used: Change Request is not supported for this product at this moment. (error code 75157) When sellers are unable to identify an eBay catalog product on which to base their item listing, this call enables you to request that eBay update an existing product record or create a new product record that will successfully match the seller's inventory item.
		/// CreateChangeRequest change_request
		/// </summary>
		/// <param name="requestBody">Contains the full details of a specified catalog change request, including the type of request, the reason for a product update request, and the details of the new or updated product being suggested.</param>
		public void CreateChangeRequest(CreateChangeRequestPayload requestBody)
		{
			var requestUri = "change_request";
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create();
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			var responseMessage = this.client.PostAsync(requestUri, content).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCode();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
	
	public partial class ProductClient
	{
		
		private System.Net.Http.HttpClient client;
		
		public ProductClient(System.Net.Http.HttpClient client)
		{
			if (client == null)
				throw new ArgumentNullException("Null HttpClient.", "client");

			if (client.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "client");

			this.client = client;
		}
		
		/// <summary>
		/// This call retrieves details of the catalog product identified by the eBay product identifier (ePID) specified in the request. These details include the product's title and description, aspects and their values, associated images, applicable category IDs, and any recognized identifiers that apply to the product. For a new listing, you can use the search call to identify candidate products on which to base the listing, then use the getProduct call to present the full details of those candidate products to the seller to makea a final selection.
		/// GetProduct product/{epid}
		/// </summary>
		/// <param name="epid">The ePID of the product being requested. This value can be discovered by issuing the search call and examining the value of the productSummaries.epid field for the desired returned product summary.</param>
		/// <returns>OK</returns>
		public async Task<Product> GetProductAsync(string epid)
		{
			var requestUri = "product/"+Uri.EscapeDataString(epid);
			var responseMessage = await client.GetAsync(requestUri);
			try
			{
				responseMessage.EnsureSuccessStatusCode();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<Product>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// This call retrieves details of the catalog product identified by the eBay product identifier (ePID) specified in the request. These details include the product's title and description, aspects and their values, associated images, applicable category IDs, and any recognized identifiers that apply to the product. For a new listing, you can use the search call to identify candidate products on which to base the listing, then use the getProduct call to present the full details of those candidate products to the seller to makea a final selection.
		/// GetProduct product/{epid}
		/// </summary>
		/// <param name="epid">The ePID of the product being requested. This value can be discovered by issuing the search call and examining the value of the productSummaries.epid field for the desired returned product summary.</param>
		/// <returns>OK</returns>
		public Product GetProduct(string epid)
		{
			var requestUri = "product/"+Uri.EscapeDataString(epid);
			var responseMessage = this.client.GetAsync(requestUri).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCode();
				var stream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<Product>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
	}
	
	public partial class Product_summaryClient
	{
		
		private System.Net.Http.HttpClient client;
		
		public Product_summaryClient(System.Net.Http.HttpClient client)
		{
			if (client == null)
				throw new ArgumentNullException("Null HttpClient.", "client");

			if (client.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "client");

			this.client = client;
		}
		
		/// <summary>
		/// This call searches for and retrieves summaries of one or more products in the eBay catalog that match the search criteria provided by a seller. The seller can use the summaries to select the product in the eBay catalog that corresponds to the item that the seller wants to offer for sale. When a corresponding product is found and adopted by the seller, eBay will use the product information to populate the item listing. The criteria supported by search include keywords, product categories, and category aspects. To see the full details of a selected product, use the getProduct call. In addition to product summaries, this call can also be used to identify refinements, which help you to better pinpoint the product you're looking for. A refinement consists of one or more aspect values and a count of the number of times that each value has been used in previous eBay listings. An aspect is a property (e.g. color or size) of an eBay category, used by sellers to provide details about the items they're listing. The refinement container is returned when you include the fieldGroups query parameter in the request with a value of ASPECT_REFINEMENTS or FULL. Example A seller wants to find a product that is &quot;gray&quot; in color, but doesn't know what term the manufacturer uses for that color. It might be Silver, Brushed Nickel, Pewter, or even Grey. The returned refinement container identifies all aspects that have been used in past listings for products that match your search criteria, along with all of the values those aspects have taken, and the number of times each value was used. You can use this data to present the seller with a histogram of the values of each aspect. The seller can see which color values have been used in the past, and how frequently they have been used, and selects the most likely value or values for their product. You issue the search call again with those values in the aspect_filter parameter to narrow down the collection of products returned by the call. Although all query parameters are optional, this call must include at least the q parameter, or the category_ids, gtin, or mpn parameter with a valid value. If you provide more than one of these parameters, they will be combined with a logical AND to further refine the returned collection of matching products. Note: This call requires that certain special characters in the query parameters be percent-encoded: &nbsp;&nbsp;&nbsp;&nbsp;(space) = %20 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;, = %2C &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;: = %3A &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[ = %5B &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;] = %5D &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ = %7B &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;| = %7C &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} = %7D This requirement applies to all query parameter values. However, for readability, call examples and samples in this documentation will not use the encoding. This call returns product summaries rather than the full details of the products. To retrieve the full details of a product, use the getProduct call with an ePID.
		/// Search product_summary/search
		/// </summary>
		/// <param name="aspect_filter">An eBay category and one or more aspects of that category, with the values that can be used to narrow down the collection of products returned by this call. Aspects are product attributes that can represent different types of information for different products. Every product has aspects, but different products have different sets of aspects. You can determine appropriate values for the aspects by first submitting this call without this parameter. It will return either the productSummaries.aspects container, the refinement.aspectDistributions container, or both, depending on the value of the fieldgroups parameter in the request. The productSummaries.aspects container provides the category aspects and their values that are associated with each returned product. The refinement.aspectDistributions container provides information about the distribution of values of the set of category aspects associated with the specified categories. In both cases sellers can select from among the returned aspects to use with this parameter. Note: You can also use the Taxonomy API's getItemAspectsForCategory call to retrieve detailed information about aspects and their values that are appropriate for your selected category. The syntax for the aspect_filter parameter is as follows (on several lines for readability; categoryId is required): aspect_filter=categoryId:category_id, aspect1:{valueA|valueB|...}, aspect2:{valueC|valueD|...},... A matching product must be within the specified category, and it must have least one of the values identified for every specified aspect. Note: Aspect names and values are case sensitive. Here is an example of an aspect_filter parameter in which 9355 is the category ID, Color is an aspect of that category, and Black and White are possible values of that aspect (on several lines for readability): GET https://api.ebay.com/commerce/catalog/v1_beta/product_summary/search? aspect_filter=categoryId:9355,Color:{White|Black} Here is the aspect_filter with required URL encoding and a second aspect (on several lines for readability): GET https://api.ebay.com/commerce/catalog/v1_beta/product_summary/search? aspect_filter=categoryId:9355,Color:%7BWhite%7CBlack%7D, Storage%20Capacity:%128GB%7C256GB%7D Note: You cannot use the aspect_filter parameter in the same call with either the gtin parameter or the mpn parameter. For implementation help, refer to eBay API documentation at https://developer.ebay.com/devzone/rest/api-ref/catalog/types/AspectFilter.html</param>
		/// <param name="category_ids">Important: Currently, only the first category_id value is accepted. One or more comma-separated category identifiers for narrowing down the collection of products returned by this call. Note: This parameter requires a valid category ID value. You can use the Taxonomy API's getCategorySuggestions call to retrieve appropriate category IDs for your product based on keywords. The syntax for this parameter is as follows: category_ids=category_id1,category_id2,... Here is an example of a call with the category_ids parameter: GET https://api.ebay.com/commerce/catalog/v1_beta/product_summary/search? category_ids=178893 Note: Although all query parameters are optional, this call must include at least the q parameter, or the category_ids, gtin, or mpn parameter with a valid value. If you provide only the category_ids parameter, you cannot specify a top-level (L1) category.</param>
		/// <param name="fieldgroups">The type of information to return in the response. Important: This parameter may not produce valid results if you also provide more than one value for the category_ids parameter. It is recommended that you avoid using this combination. Valid Values: ASPECT_REFINEMENTS &mdash; This returns the refinement container, which includes the category aspect and aspect value distributions that apply to the returned products. For example, if you searched for Ford Mustang, some of the category aspects might be Model Year, Exterior Color, Vehicle Mileage, and so on. Note: Aspects are category specific. FULL &mdash; This returns all the refinement containers and all the matching products. This value overrides the other values, which will be ignored. MATCHING_PRODUCTS &mdash; This returns summaries for all products that match the values you provide for the q and category_ids parameters. This does not affect your use of the ASPECT_REFINEMENTS value, which you can use in the same call. Code so that your app gracefully handles any future changes to this list. Default: MATCHING_PRODUCTS</param>
		/// <param name="gtin">A string consisting of one or more comma-separated Global Trade Item Numbers (GTINs) that identify products to search for. Currently the GTIN values can include EAN, ISBN, and UPC identifier types. Note: Although all query parameters are optional, this call must include at least the q parameter, or the category_ids, gtin, or mpn parameter with a valid value. You cannot use the gtin parameter in the same call with either the q parameter or the aspect_filter parameter.</param>
		/// <param name="limit">The number of product summaries to return. This is the result set, a subset of the full collection of products that match the search or filter criteria of this call. Maximum: 200 Default: 50</param>
		/// <param name="mpn">A string consisting of one or more comma-separated Manufacturer Part Numbers (MPNs) that identify products to search for. This call will return all products that have one of the specified MPNs. MPNs are defined by manufacturers for their own products, and are therefore certain to be unique only within a given brand. However, many MPNs do turn out to be globally unique. Note: Although all query parameters are optional, this call must include at least the q parameter, or the category_ids, gtin, or mpn parameter with a valid value. You cannot use the mpn parameter in the same call with either the q parameter or the aspect_filter parameter.</param>
		/// <param name="offset">This parameter is reserved for internal or future use.</param>
		/// <param name="q">A string consisting of one or more keywords to use to search for products in the eBay catalog. Note: This call searches the following product record fields: title, description, brand, and aspects.localizedName, which do not include product IDs. Wildcard characters (e.g. *) are not allowed. The keywords are handled as follows: If the keywords are separated by a comma (e.g. iPhone,256GB), the query returns products that have iPhone AND 256GB. If the keywords are separated by a space (e.g. &quot;iPhone&nbsp;ipad&quot; or &quot;iPhone,&nbsp;ipad&quot;), the query ignores any commas and returns products that have iPhone OR iPad. Note: Although all query parameters are optional, this call must include at least the q parameter, or the category_ids, gtin, or mpn parameter with a valid value. You cannot use the q parameter in the same call with either the gtin parameter or the mpn parameter.</param>
		/// <returns>Success</returns>
		public async Task<ProductSearchResponse> SearchAsync(string aspect_filter, string category_ids, string fieldgroups, string gtin, string limit, string mpn, string offset, string q)
		{
			var requestUri = "product_summary/search?aspect_filter=" + Uri.EscapeDataString(aspect_filter)+"&category_ids=" + Uri.EscapeDataString(category_ids)+"&fieldgroups=" + Uri.EscapeDataString(fieldgroups)+"&gtin=" + Uri.EscapeDataString(gtin)+"&limit=" + Uri.EscapeDataString(limit)+"&mpn=" + Uri.EscapeDataString(mpn)+"&offset=" + Uri.EscapeDataString(offset)+"&q=" + Uri.EscapeDataString(q);
			var responseMessage = await client.GetAsync(requestUri);
			try
			{
				responseMessage.EnsureSuccessStatusCode();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ProductSearchResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// This call searches for and retrieves summaries of one or more products in the eBay catalog that match the search criteria provided by a seller. The seller can use the summaries to select the product in the eBay catalog that corresponds to the item that the seller wants to offer for sale. When a corresponding product is found and adopted by the seller, eBay will use the product information to populate the item listing. The criteria supported by search include keywords, product categories, and category aspects. To see the full details of a selected product, use the getProduct call. In addition to product summaries, this call can also be used to identify refinements, which help you to better pinpoint the product you're looking for. A refinement consists of one or more aspect values and a count of the number of times that each value has been used in previous eBay listings. An aspect is a property (e.g. color or size) of an eBay category, used by sellers to provide details about the items they're listing. The refinement container is returned when you include the fieldGroups query parameter in the request with a value of ASPECT_REFINEMENTS or FULL. Example A seller wants to find a product that is &quot;gray&quot; in color, but doesn't know what term the manufacturer uses for that color. It might be Silver, Brushed Nickel, Pewter, or even Grey. The returned refinement container identifies all aspects that have been used in past listings for products that match your search criteria, along with all of the values those aspects have taken, and the number of times each value was used. You can use this data to present the seller with a histogram of the values of each aspect. The seller can see which color values have been used in the past, and how frequently they have been used, and selects the most likely value or values for their product. You issue the search call again with those values in the aspect_filter parameter to narrow down the collection of products returned by the call. Although all query parameters are optional, this call must include at least the q parameter, or the category_ids, gtin, or mpn parameter with a valid value. If you provide more than one of these parameters, they will be combined with a logical AND to further refine the returned collection of matching products. Note: This call requires that certain special characters in the query parameters be percent-encoded: &nbsp;&nbsp;&nbsp;&nbsp;(space) = %20 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;, = %2C &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;: = %3A &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[ = %5B &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;] = %5D &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ = %7B &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;| = %7C &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} = %7D This requirement applies to all query parameter values. However, for readability, call examples and samples in this documentation will not use the encoding. This call returns product summaries rather than the full details of the products. To retrieve the full details of a product, use the getProduct call with an ePID.
		/// Search product_summary/search
		/// </summary>
		/// <param name="aspect_filter">An eBay category and one or more aspects of that category, with the values that can be used to narrow down the collection of products returned by this call. Aspects are product attributes that can represent different types of information for different products. Every product has aspects, but different products have different sets of aspects. You can determine appropriate values for the aspects by first submitting this call without this parameter. It will return either the productSummaries.aspects container, the refinement.aspectDistributions container, or both, depending on the value of the fieldgroups parameter in the request. The productSummaries.aspects container provides the category aspects and their values that are associated with each returned product. The refinement.aspectDistributions container provides information about the distribution of values of the set of category aspects associated with the specified categories. In both cases sellers can select from among the returned aspects to use with this parameter. Note: You can also use the Taxonomy API's getItemAspectsForCategory call to retrieve detailed information about aspects and their values that are appropriate for your selected category. The syntax for the aspect_filter parameter is as follows (on several lines for readability; categoryId is required): aspect_filter=categoryId:category_id, aspect1:{valueA|valueB|...}, aspect2:{valueC|valueD|...},... A matching product must be within the specified category, and it must have least one of the values identified for every specified aspect. Note: Aspect names and values are case sensitive. Here is an example of an aspect_filter parameter in which 9355 is the category ID, Color is an aspect of that category, and Black and White are possible values of that aspect (on several lines for readability): GET https://api.ebay.com/commerce/catalog/v1_beta/product_summary/search? aspect_filter=categoryId:9355,Color:{White|Black} Here is the aspect_filter with required URL encoding and a second aspect (on several lines for readability): GET https://api.ebay.com/commerce/catalog/v1_beta/product_summary/search? aspect_filter=categoryId:9355,Color:%7BWhite%7CBlack%7D, Storage%20Capacity:%128GB%7C256GB%7D Note: You cannot use the aspect_filter parameter in the same call with either the gtin parameter or the mpn parameter. For implementation help, refer to eBay API documentation at https://developer.ebay.com/devzone/rest/api-ref/catalog/types/AspectFilter.html</param>
		/// <param name="category_ids">Important: Currently, only the first category_id value is accepted. One or more comma-separated category identifiers for narrowing down the collection of products returned by this call. Note: This parameter requires a valid category ID value. You can use the Taxonomy API's getCategorySuggestions call to retrieve appropriate category IDs for your product based on keywords. The syntax for this parameter is as follows: category_ids=category_id1,category_id2,... Here is an example of a call with the category_ids parameter: GET https://api.ebay.com/commerce/catalog/v1_beta/product_summary/search? category_ids=178893 Note: Although all query parameters are optional, this call must include at least the q parameter, or the category_ids, gtin, or mpn parameter with a valid value. If you provide only the category_ids parameter, you cannot specify a top-level (L1) category.</param>
		/// <param name="fieldgroups">The type of information to return in the response. Important: This parameter may not produce valid results if you also provide more than one value for the category_ids parameter. It is recommended that you avoid using this combination. Valid Values: ASPECT_REFINEMENTS &mdash; This returns the refinement container, which includes the category aspect and aspect value distributions that apply to the returned products. For example, if you searched for Ford Mustang, some of the category aspects might be Model Year, Exterior Color, Vehicle Mileage, and so on. Note: Aspects are category specific. FULL &mdash; This returns all the refinement containers and all the matching products. This value overrides the other values, which will be ignored. MATCHING_PRODUCTS &mdash; This returns summaries for all products that match the values you provide for the q and category_ids parameters. This does not affect your use of the ASPECT_REFINEMENTS value, which you can use in the same call. Code so that your app gracefully handles any future changes to this list. Default: MATCHING_PRODUCTS</param>
		/// <param name="gtin">A string consisting of one or more comma-separated Global Trade Item Numbers (GTINs) that identify products to search for. Currently the GTIN values can include EAN, ISBN, and UPC identifier types. Note: Although all query parameters are optional, this call must include at least the q parameter, or the category_ids, gtin, or mpn parameter with a valid value. You cannot use the gtin parameter in the same call with either the q parameter or the aspect_filter parameter.</param>
		/// <param name="limit">The number of product summaries to return. This is the result set, a subset of the full collection of products that match the search or filter criteria of this call. Maximum: 200 Default: 50</param>
		/// <param name="mpn">A string consisting of one or more comma-separated Manufacturer Part Numbers (MPNs) that identify products to search for. This call will return all products that have one of the specified MPNs. MPNs are defined by manufacturers for their own products, and are therefore certain to be unique only within a given brand. However, many MPNs do turn out to be globally unique. Note: Although all query parameters are optional, this call must include at least the q parameter, or the category_ids, gtin, or mpn parameter with a valid value. You cannot use the mpn parameter in the same call with either the q parameter or the aspect_filter parameter.</param>
		/// <param name="offset">This parameter is reserved for internal or future use.</param>
		/// <param name="q">A string consisting of one or more keywords to use to search for products in the eBay catalog. Note: This call searches the following product record fields: title, description, brand, and aspects.localizedName, which do not include product IDs. Wildcard characters (e.g. *) are not allowed. The keywords are handled as follows: If the keywords are separated by a comma (e.g. iPhone,256GB), the query returns products that have iPhone AND 256GB. If the keywords are separated by a space (e.g. &quot;iPhone&nbsp;ipad&quot; or &quot;iPhone,&nbsp;ipad&quot;), the query ignores any commas and returns products that have iPhone OR iPad. Note: Although all query parameters are optional, this call must include at least the q parameter, or the category_ids, gtin, or mpn parameter with a valid value. You cannot use the q parameter in the same call with either the gtin parameter or the mpn parameter.</param>
		/// <returns>Success</returns>
		public ProductSearchResponse Search(string aspect_filter, string category_ids, string fieldgroups, string gtin, string limit, string mpn, string offset, string q)
		{
			var requestUri = "product_summary/search?aspect_filter=" + Uri.EscapeDataString(aspect_filter)+"&category_ids=" + Uri.EscapeDataString(category_ids)+"&fieldgroups=" + Uri.EscapeDataString(fieldgroups)+"&gtin=" + Uri.EscapeDataString(gtin)+"&limit=" + Uri.EscapeDataString(limit)+"&mpn=" + Uri.EscapeDataString(mpn)+"&offset=" + Uri.EscapeDataString(offset)+"&q=" + Uri.EscapeDataString(q);
			var responseMessage = this.client.GetAsync(requestUri).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCode();
				var stream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ProductSearchResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
	}
	
	public partial class Product_metadataClient
	{
		
		private System.Net.Http.HttpClient client;
		
		public Product_metadataClient(System.Net.Http.HttpClient client)
		{
			if (client == null)
				throw new ArgumentNullException("Null HttpClient.", "client");

			if (client.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "client");

			this.client = client;
		}
		
		/// <summary>
		/// This call retrieves an array of all supported aspects, aspect constraints, and aspect values for the specified catalog product and its associated or suggested categories, as well as the values currently associated with that product. The array is a union (with duplicates removed) of all returned aspects. After using the search and getProduct calls to find a catalog product that matches a seller's inventory item, you may discover a matching product, but determine that one or more product details are missing or inaccurate. You can propose updates to the product's aspects and aspect values for the catalog by taking the following steps: Use the Taxonomy API's category_tree calls to discover the appropriate category or categories for the seller's inventory item. See Finding categories for a listing or promotion. Use getProductMetadata to determine the aspects of your selected categories and the values of those aspects that should be added to the aspects and values already associated with your product. Use the createChangeRequest call to to submit a change request to update the product in the eBay catalog for your seller's marketplace. Note: The X-EBAY-C-MARKETPLACE-ID request header is required to identify the user's business context. The eBay Product Identifier (ePID) for a catalog product is also required and is specified through the epid query parameter.
		/// GetProductMetadata get_product_metadata
		/// </summary>
		/// <param name="epid">The unique eBay product identifier of the catalog product that you want to update. The supported and applied aspects, constraints, and values for this eBay catalog product are returned.</param>
		/// <param name="other_applicable_category_ids">Use only if you are also including the primary_category_id parameter in the request. Provide one or more comma-separated category IDs in this parameter. Sellers can use other_applicable_category_ids to retrieve information about the specified categories' associated aspects, constraints, and values, along with the same information for the category specified in the primary_category_id parameter, for the seller to assess, select, and populate for submission with the createChangeRequest call. eBay category IDs are returned by the Taxonomy API's category_tree calls.</param>
		/// <param name="primary_category_id">Use only if the seller believes this product is associated with the wrong primary category. Use this parameter to submit the unique identifier of the primary category that the seller wants to use instead. This call retrieves information about the specified category's associated aspects, constraints, and values for the seller to assess, select, and populate for submission with the Catalog API's createChangeRequest call. If you exclude this parameter from your request, this call retrieves information about the aspects, constraints, and values of the specified product's current primary category and other applicable categories. If you include this parameter in your request, this call does not return any information about the specified product's current primary or other applicable categories, but only about the specified category. To retrieve information about any other categories, you must specify them with the other_applicable_category_ids parameter. eBay category IDs are returned by the Taxonomy API's category_tree calls.</param>
		/// <returns>Success</returns>
		public async Task<ProductMetadata> GetProductMetadataAsync(string epid, string other_applicable_category_ids, string primary_category_id)
		{
			var requestUri = "get_product_metadata?epid=" + Uri.EscapeDataString(epid)+"&other_applicable_category_ids=" + Uri.EscapeDataString(other_applicable_category_ids)+"&primary_category_id=" + Uri.EscapeDataString(primary_category_id);
			var responseMessage = await client.GetAsync(requestUri);
			try
			{
				responseMessage.EnsureSuccessStatusCode();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ProductMetadata>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// This call retrieves an array of all supported aspects, aspect constraints, and aspect values for the specified catalog product and its associated or suggested categories, as well as the values currently associated with that product. The array is a union (with duplicates removed) of all returned aspects. After using the search and getProduct calls to find a catalog product that matches a seller's inventory item, you may discover a matching product, but determine that one or more product details are missing or inaccurate. You can propose updates to the product's aspects and aspect values for the catalog by taking the following steps: Use the Taxonomy API's category_tree calls to discover the appropriate category or categories for the seller's inventory item. See Finding categories for a listing or promotion. Use getProductMetadata to determine the aspects of your selected categories and the values of those aspects that should be added to the aspects and values already associated with your product. Use the createChangeRequest call to to submit a change request to update the product in the eBay catalog for your seller's marketplace. Note: The X-EBAY-C-MARKETPLACE-ID request header is required to identify the user's business context. The eBay Product Identifier (ePID) for a catalog product is also required and is specified through the epid query parameter.
		/// GetProductMetadata get_product_metadata
		/// </summary>
		/// <param name="epid">The unique eBay product identifier of the catalog product that you want to update. The supported and applied aspects, constraints, and values for this eBay catalog product are returned.</param>
		/// <param name="other_applicable_category_ids">Use only if you are also including the primary_category_id parameter in the request. Provide one or more comma-separated category IDs in this parameter. Sellers can use other_applicable_category_ids to retrieve information about the specified categories' associated aspects, constraints, and values, along with the same information for the category specified in the primary_category_id parameter, for the seller to assess, select, and populate for submission with the createChangeRequest call. eBay category IDs are returned by the Taxonomy API's category_tree calls.</param>
		/// <param name="primary_category_id">Use only if the seller believes this product is associated with the wrong primary category. Use this parameter to submit the unique identifier of the primary category that the seller wants to use instead. This call retrieves information about the specified category's associated aspects, constraints, and values for the seller to assess, select, and populate for submission with the Catalog API's createChangeRequest call. If you exclude this parameter from your request, this call retrieves information about the aspects, constraints, and values of the specified product's current primary category and other applicable categories. If you include this parameter in your request, this call does not return any information about the specified product's current primary or other applicable categories, but only about the specified category. To retrieve information about any other categories, you must specify them with the other_applicable_category_ids parameter. eBay category IDs are returned by the Taxonomy API's category_tree calls.</param>
		/// <returns>Success</returns>
		public ProductMetadata GetProductMetadata(string epid, string other_applicable_category_ids, string primary_category_id)
		{
			var requestUri = "get_product_metadata?epid=" + Uri.EscapeDataString(epid)+"&other_applicable_category_ids=" + Uri.EscapeDataString(other_applicable_category_ids)+"&primary_category_id=" + Uri.EscapeDataString(primary_category_id);
			var responseMessage = this.client.GetAsync(requestUri).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCode();
				var stream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ProductMetadata>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// This call retrieves an array of all supported aspects, aspect constraints, and aspect values for the specified eBay categories. The array is a union (with duplicates removed) of all returned aspects. After using the search and getProduct calls to find a catalog product that matches a seller's inventory item, you may determine that a matching product does not exist in the eBay catalog. You can propose a new product for the catalog by taking the following steps: Use the Taxonomy API's category_tree calls to discover the appropriate category or categories for the seller's inventory item. See Finding categories for a listing or promotion. Use getProductMetadataForCategories to determine the aspects of your selected categories that should be associated with your new product. Use the createChangeRequest call to to submit a change request to add the new product to the eBay catalog for your seller's marketplace. Note: The X-EBAY-C-MARKETPLACE-ID request header is required to identify the user's business context. At least one eBay category ID is required and is specified through the primary_category_id query parameter.
		/// GetProductMetadataForCategories get_product_metadata_for_categories
		/// </summary>
		/// <param name="other_applicable_category_ids">A string of comma-separated category IDs. if sellers want to specify more than the primary category under which to offer a product, they can use this parameter to retrieve the aspects associated with all of the additional specified categories. eBay category IDs are returned by the Taxonomy API's category_tree calls.</param>
		/// <param name="primary_category_id">The unique identifier of the primary eBay category for which you will retrieve product aspects. eBay category IDs are returned by the Taxonomy API's category_tree calls.</param>
		/// <returns>Success</returns>
		public async Task<ProductMetadataForCategories> GetProductMetadataForCategoriesAsync(string other_applicable_category_ids, string primary_category_id)
		{
			var requestUri = "get_product_metadata_for_categories?other_applicable_category_ids=" + Uri.EscapeDataString(other_applicable_category_ids)+"&primary_category_id=" + Uri.EscapeDataString(primary_category_id);
			var responseMessage = await client.GetAsync(requestUri);
			try
			{
				responseMessage.EnsureSuccessStatusCode();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ProductMetadataForCategories>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// This call retrieves an array of all supported aspects, aspect constraints, and aspect values for the specified eBay categories. The array is a union (with duplicates removed) of all returned aspects. After using the search and getProduct calls to find a catalog product that matches a seller's inventory item, you may determine that a matching product does not exist in the eBay catalog. You can propose a new product for the catalog by taking the following steps: Use the Taxonomy API's category_tree calls to discover the appropriate category or categories for the seller's inventory item. See Finding categories for a listing or promotion. Use getProductMetadataForCategories to determine the aspects of your selected categories that should be associated with your new product. Use the createChangeRequest call to to submit a change request to add the new product to the eBay catalog for your seller's marketplace. Note: The X-EBAY-C-MARKETPLACE-ID request header is required to identify the user's business context. At least one eBay category ID is required and is specified through the primary_category_id query parameter.
		/// GetProductMetadataForCategories get_product_metadata_for_categories
		/// </summary>
		/// <param name="other_applicable_category_ids">A string of comma-separated category IDs. if sellers want to specify more than the primary category under which to offer a product, they can use this parameter to retrieve the aspects associated with all of the additional specified categories. eBay category IDs are returned by the Taxonomy API's category_tree calls.</param>
		/// <param name="primary_category_id">The unique identifier of the primary eBay category for which you will retrieve product aspects. eBay category IDs are returned by the Taxonomy API's category_tree calls.</param>
		/// <returns>Success</returns>
		public ProductMetadataForCategories GetProductMetadataForCategories(string other_applicable_category_ids, string primary_category_id)
		{
			var requestUri = "get_product_metadata_for_categories?other_applicable_category_ids=" + Uri.EscapeDataString(other_applicable_category_ids)+"&primary_category_id=" + Uri.EscapeDataString(primary_category_id);
			var responseMessage = this.client.GetAsync(requestUri).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCode();
				var stream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ProductMetadataForCategories>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
	}
}
