//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Net.Http;
	using Newtonsoft.Json;
	
	
	/// <summary>
	/// This complex type defines a &quot;rate&quot; as the quota of calls that can be made to a resource per time window, the remaining number of calls before the threshold is met, the amount of time until the time window resets, and the length of the time window (in seconds).
	/// </summary>
	public class Rate
	{
		
		/// <summary>
		/// The maximum number of requests that can be made to this resource during a set time period. The length of time to which the limit is applied is defined by the associated timeWindow value. This value is often referred to as the &quot;call quota&quot; for the resource.
		/// </summary>
		public int Limit { get; set; }
		
		/// <summary>
		/// The remaining number of requests that can be made to this resource before the associated time window resets.
		/// </summary>
		public int Remaining { get; set; }
		
		/// <summary>
		/// The data and time the time window and accumulated calls for this resource reset. When the reset time is reached, the remaining value is reset to the value of limit, and this reset value is reset to the current time plus the number of seconds defined by the timeWindow value. The time stamp is formatted as an ISO 8601 string, which is based on the 24-hour Universal Coordinated Time (UTC) clock. Format: YYYY-MM-DDTHH:MM:SS.SSSZ Example: 2018-08-04T07:09:00.000Z
		/// </summary>
		public string Reset { get; set; }
		
		/// <summary>
		/// A period of time, expressed in seconds. The call quota for a resource is applied to the period of time defined by the value of this field.
		/// </summary>
		public int TimeWindow { get; set; }
	}
	
	/// <summary>
	/// This complex types defines the resource (such as an API method) for which the rate-limit data is returned. A method is included in an API, and an API is part of an API context for the API version specified.
	/// </summary>
	public class RateLimit
	{
		
		/// <summary>
		/// The context of the API for which rate-limit data is returned. For example buy, sell, commerce, or developer.
		/// </summary>
		public string ApiContext { get; set; }
		
		/// <summary>
		/// The name of the API for which rate-limit data is returned. For example browse for the Buy API, inventory for the Sell API, or taxonomy for the Commerce API.
		/// </summary>
		public string ApiName { get; set; }
		
		/// <summary>
		/// The version of the API for which rate-limit data is returned. For example v1 or v2.
		/// </summary>
		public string ApiVersion { get; set; }
		
		/// <summary>
		/// A list of the methods for which rate-limit data is returned. For example item for the Feed API, getOrder for the Fulfillment API, and getProduct for the Catalog API.
		/// </summary>
		public Resource[] Resources { get; set; }
	}
	
	/// <summary>
	/// This complex type defines a list of rate-limit data as it pertains to a method within the specified version of an API.
	/// </summary>
	public class RateLimitsResponse
	{
		
		/// <summary>
		/// The rate-limit data for the specified APIs. The rate-limit data is returned for all the methods in the specified APIs and data pertains to the current time window.
		/// </summary>
		public RateLimit[] RateLimits { get; set; }
	}
	
	/// <summary>
	/// This complex type defines the resource (API method) and the current rate-limit data for that resource.
	/// </summary>
	public class Resource
	{
		
		/// <summary>
		/// The name of the resource (an API or an API method) to which the rate-limit data applies.
		/// </summary>
		public string Name { get; set; }
		
		/// <summary>
		/// A list of rate-limit data, where each list element represents the rate-limit data for a specific resource.
		/// </summary>
		public Rate[] Rates { get; set; }
	}
	
	/// <summary>
	/// This type defines the fields that can be returned in an error.
	/// </summary>
	public class Error
	{
		
		/// <summary>
		/// Identifies the type of erro.
		/// </summary>
		public string Category { get; set; }
		
		/// <summary>
		/// Name for the primary system where the error occurred. This is relevant for application errors.
		/// </summary>
		public string Domain { get; set; }
		
		/// <summary>
		/// A unique number to identify the error.
		/// </summary>
		public int ErrorId { get; set; }
		
		/// <summary>
		/// An array of request elements most closely associated to the error.
		/// </summary>
		public string[] InputRefIds { get; set; }
		
		/// <summary>
		/// A more detailed explanation of the error.
		/// </summary>
		public string LongMessage { get; set; }
		
		/// <summary>
		/// Information on how to correct the problem, in the end user's terms and language where applicable.
		/// </summary>
		public string Message { get; set; }
		
		/// <summary>
		/// An array of request elements most closely associated to the error.
		/// </summary>
		public string[] OutputRefIds { get; set; }
		
		/// <summary>
		/// An array of name/value pairs that describe details the error condition. These are useful when multiple errors are returned.
		/// </summary>
		public ErrorParameter[] Parameters { get; set; }
		
		/// <summary>
		/// Further helps indicate which subsystem the error is coming from. System subcategories include: Initialization, Serialization, Security, Monitoring, Rate Limiting, etc.
		/// </summary>
		public string Subdomain { get; set; }
	}
	
	public class ErrorParameter
	{
		
		/// <summary>
		/// The object of the error.
		/// </summary>
		public string Name { get; set; }
		
		/// <summary>
		/// The value of the object.
		/// </summary>
		public string Value { get; set; }
	}
	
	public partial class Rate_limitClient
	{
		
		private System.Net.Http.HttpClient client;
		
		public Rate_limitClient(System.Net.Http.HttpClient client)
		{
			if (client == null)
				throw new ArgumentNullException("Null HttpClient.", "client");

			if (client.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "client");

			this.client = client;
		}
		
		/// <summary>
		/// This method retrieves the call limit and utilization data for an application. The data is retrieved for all RESTful APIs and resources. The response from getRateLimits includes a list of the applicable resources and the &quot;call limit&quot;, or quota, that is set for each resource. In addition to quota information, the response also includes the number of remaining calls available before the limit is reached, the time remaining before the quota resets, and the length of the &quot;time window&quot; to which the quota applies. By default, this method returns utilization data for all RESTful API resources. Use the api_name and api_context query parameters to filter the response to only the desired APIs. For more on call limits, see Compatible Application Check.
		/// GetRateLimits rate_limit/
		/// </summary>
		/// <param name="api_context">This optional query parameter filters the result to include only the specified API context. Acceptable values for the parameter are buy, sell, commerce, and developer.</param>
		/// <param name="api_name">This optional query parameter filters the result to include only the APIs specified. Example values are browse for the Buy APIs context, inventory for the Sell APIs context, and taxonomy for the Commerce APIs context.</param>
		/// <returns>OK</returns>
		public async Task<RateLimitsResponse> GetRateLimitsAsync(string api_context, string api_name)
		{
			var requestUri = "rate_limit/?api_context=" + Uri.EscapeDataString(api_context)+"&api_name=" + Uri.EscapeDataString(api_name);
			var responseMessage = await client.GetAsync(requestUri);
			try
			{
				responseMessage.EnsureSuccessStatusCode();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<RateLimitsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// This method retrieves the call limit and utilization data for an application. The data is retrieved for all RESTful APIs and resources. The response from getRateLimits includes a list of the applicable resources and the &quot;call limit&quot;, or quota, that is set for each resource. In addition to quota information, the response also includes the number of remaining calls available before the limit is reached, the time remaining before the quota resets, and the length of the &quot;time window&quot; to which the quota applies. By default, this method returns utilization data for all RESTful API resources. Use the api_name and api_context query parameters to filter the response to only the desired APIs. For more on call limits, see Compatible Application Check.
		/// GetRateLimits rate_limit/
		/// </summary>
		/// <param name="api_context">This optional query parameter filters the result to include only the specified API context. Acceptable values for the parameter are buy, sell, commerce, and developer.</param>
		/// <param name="api_name">This optional query parameter filters the result to include only the APIs specified. Example values are browse for the Buy APIs context, inventory for the Sell APIs context, and taxonomy for the Commerce APIs context.</param>
		/// <returns>OK</returns>
		public RateLimitsResponse GetRateLimits(string api_context, string api_name)
		{
			var requestUri = "rate_limit/?api_context=" + Uri.EscapeDataString(api_context)+"&api_name=" + Uri.EscapeDataString(api_name);
			var responseMessage = this.client.GetAsync(requestUri).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCode();
				var stream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<RateLimitsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
	}
	
	public partial class User_rate_limitClient
	{
		
		private System.Net.Http.HttpClient client;
		
		public User_rate_limitClient(System.Net.Http.HttpClient client)
		{
			if (client == null)
				throw new ArgumentNullException("Null HttpClient.", "client");

			if (client.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "client");

			this.client = client;
		}
		
		/// <summary>
		/// This method retrieves the call limit and utilization data for an application user. The call-limit data is returned for all RESTful APIs and resources that limit calls on a per-user basis. The response from getUserRateLimits includes a list of the applicable resources and the &quot;call limit&quot;, or quota, that is set for each resource. In addition to quota information, the response also includes the number of remaining calls available before the limit is reached, the time remaining before the quota resets, and the length of the &quot;time window&quot; to which the quota applies. By default, this method returns utilization data for all RESTful API resources that limit request access by user. Use the api_name and api_context query parameters to filter the response to only the desired APIs. For more on call limits, see Compatible Application Check.
		/// GetUserRateLimits user_rate_limit/
		/// </summary>
		/// <param name="api_context">This optional query parameter filters the result to include only the specified API context. Acceptable values for the parameter are buy, sell, commerce, and developer.</param>
		/// <param name="api_name">This optional query parameter filters the result to include only the APIs specified. Example values are browse for the Buy APIs context, inventory for the Sell APIs context, and taxonomy for the Commerce APIs context.</param>
		/// <returns>OK</returns>
		public async Task<RateLimitsResponse> GetUserRateLimitsAsync(string api_context, string api_name)
		{
			var requestUri = "user_rate_limit/?api_context=" + Uri.EscapeDataString(api_context)+"&api_name=" + Uri.EscapeDataString(api_name);
			var responseMessage = await client.GetAsync(requestUri);
			try
			{
				responseMessage.EnsureSuccessStatusCode();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<RateLimitsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// This method retrieves the call limit and utilization data for an application user. The call-limit data is returned for all RESTful APIs and resources that limit calls on a per-user basis. The response from getUserRateLimits includes a list of the applicable resources and the &quot;call limit&quot;, or quota, that is set for each resource. In addition to quota information, the response also includes the number of remaining calls available before the limit is reached, the time remaining before the quota resets, and the length of the &quot;time window&quot; to which the quota applies. By default, this method returns utilization data for all RESTful API resources that limit request access by user. Use the api_name and api_context query parameters to filter the response to only the desired APIs. For more on call limits, see Compatible Application Check.
		/// GetUserRateLimits user_rate_limit/
		/// </summary>
		/// <param name="api_context">This optional query parameter filters the result to include only the specified API context. Acceptable values for the parameter are buy, sell, commerce, and developer.</param>
		/// <param name="api_name">This optional query parameter filters the result to include only the APIs specified. Example values are browse for the Buy APIs context, inventory for the Sell APIs context, and taxonomy for the Commerce APIs context.</param>
		/// <returns>OK</returns>
		public RateLimitsResponse GetUserRateLimits(string api_context, string api_name)
		{
			var requestUri = "user_rate_limit/?api_context=" + Uri.EscapeDataString(api_context)+"&api_name=" + Uri.EscapeDataString(api_name);
			var responseMessage = this.client.GetAsync(requestUri).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCode();
				var stream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<RateLimitsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
	}
}
