//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Net.Http;
	using Newtonsoft.Json;
	
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient client;
		
		private System.Uri baseUri;
		
		public Misc(System.Net.Http.HttpClient client, System.Uri baseUri)
		{
			if (client == null)
				throw new ArgumentNullException("client", "Null HttpClient.");

			if (baseUri == null)
				throw new ArgumentNullException("baseUri", "Null baseUri");

			this.client = client;
			this.baseUri = baseUri;
		}
		
		/// <summary>
		/// ValuesGet /api/Values
		/// </summary>
		/// <returns>Success</returns>
		public async Task<string> ValuesGetAsync()
		{
			var requestUri = new Uri(this.baseUri, "/api/Values");
			var responseMessage = await client.GetAsync(requestUri);
			try
			{
				responseMessage.EnsureSuccessStatusCode();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (System.IO.StreamReader streamReader = new System.IO.StreamReader(stream))
				{
				return streamReader.ReadToEnd();;
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// ValuesGet /api/Values
		/// </summary>
		/// <returns>Success</returns>
		public string ValuesGet()
		{
			var requestUri = new Uri(this.baseUri, "/api/Values");
			var responseMessage = this.client.GetAsync(requestUri).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCode();
				var stream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (System.IO.StreamReader streamReader = new System.IO.StreamReader(stream))
				{
				return streamReader.ReadToEnd();;
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// ValuesPost /api/Values
		/// </summary>
		/// <returns>Success</returns>
		public async Task<string> ValuesPostAsync()
		{
			var requestUri = new Uri(this.baseUri, "/api/Values");
			var responseMessage = await client.PostAsync(requestUri, new StringContent(String.Empty));
			try
			{
				responseMessage.EnsureSuccessStatusCode();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (System.IO.StreamReader streamReader = new System.IO.StreamReader(stream))
				{
				return streamReader.ReadToEnd();;
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// ValuesPost /api/Values
		/// </summary>
		/// <returns>Success</returns>
		public string ValuesPost()
		{
			var requestUri = new Uri(this.baseUri, "/api/Values");
			var responseMessage = this.client.PostAsync(requestUri, new StringContent(String.Empty)).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCode();
				var stream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (System.IO.StreamReader streamReader = new System.IO.StreamReader(stream))
				{
				return streamReader.ReadToEnd();;
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// ValuesGetById /api/Values/{id}
		/// </summary>
		/// <returns>Success</returns>
		public async Task<string> ValuesGetByIdAsync(int id)
		{
			var requestUri = new Uri(this.baseUri, "/api/Values/"+id);
			var responseMessage = await client.GetAsync(requestUri);
			try
			{
				responseMessage.EnsureSuccessStatusCode();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (System.IO.StreamReader streamReader = new System.IO.StreamReader(stream))
				{
				return streamReader.ReadToEnd();;
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// ValuesGetById /api/Values/{id}
		/// </summary>
		/// <returns>Success</returns>
		public string ValuesGetById(int id)
		{
			var requestUri = new Uri(this.baseUri, "/api/Values/"+id);
			var responseMessage = this.client.GetAsync(requestUri).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCode();
				var stream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (System.IO.StreamReader streamReader = new System.IO.StreamReader(stream))
				{
				return streamReader.ReadToEnd();;
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// ValuesPutById /api/Values/{id}
		/// </summary>
		/// <returns>Success</returns>
		public async Task ValuesPutByIdAsync(int id)
		{
			var requestUri = new Uri(this.baseUri, "/api/Values/"+id);
			var responseMessage = await client.PutAsync(requestUri, new StringContent(String.Empty));
			try
			{
				responseMessage.EnsureSuccessStatusCode();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// ValuesPutById /api/Values/{id}
		/// </summary>
		/// <returns>Success</returns>
		public void ValuesPutById(int id)
		{
			var requestUri = new Uri(this.baseUri, "/api/Values/"+id);
			var responseMessage = this.client.PutAsync(requestUri, new StringContent(String.Empty)).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCode();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// ValuesDeleteById /api/Values/{id}
		/// </summary>
		/// <returns>Success</returns>
		public async Task ValuesDeleteByIdAsync(int id)
		{
			var requestUri = new Uri(this.baseUri, "/api/Values/"+id);
			var responseMessage = await client.DeleteAsync(requestUri);
			try
			{
				responseMessage.EnsureSuccessStatusCode();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// ValuesDeleteById /api/Values/{id}
		/// </summary>
		/// <returns>Success</returns>
		public void ValuesDeleteById(int id)
		{
			var requestUri = new Uri(this.baseUri, "/api/Values/"+id);
			var responseMessage = this.client.DeleteAsync(requestUri).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCode();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
	}
}
