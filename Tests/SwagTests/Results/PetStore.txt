//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Net.Http;
	using Newtonsoft.Json;
	
	
	public class Pet
	{
		
		[System.ComponentModel.DataAnnotations.RequiredAttribute()]
		public long Id { get; set; }
		
		[System.ComponentModel.DataAnnotations.RequiredAttribute()]
		public string Name { get; set; }
		
		public string Tag { get; set; }
	}
	
	public class Error
	{
		
		[System.ComponentModel.DataAnnotations.RequiredAttribute()]
		public int Code { get; set; }
		
		[System.ComponentModel.DataAnnotations.RequiredAttribute()]
		public string Message { get; set; }
	}
	
	public partial class PetsClient
	{
		
		private System.Net.Http.HttpClient client;
		
		public PetsClient(System.Net.Http.HttpClient client)
		{
			if (client == null)
				throw new ArgumentNullException("Null HttpClient.", "client");

			if (client.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "client");

			this.client = client;
		}
		
		/// <summary>
		/// List all pets
		/// ListPets /pets
		/// </summary>
		/// <param name="limit">How many items to return at one time (max 100)</param>
		/// <returns>A paged array of pets</returns>
		public async Task<Pets> ListPetsAsync(int limit)
		{
			var requestUri = "/pets?limit="+limit;
			var responseMessage = await client.GetAsync(requestUri);
			try
			{
				responseMessage.EnsureSuccessStatusCode();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<Pets>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// List all pets
		/// ListPets /pets
		/// </summary>
		/// <param name="limit">How many items to return at one time (max 100)</param>
		/// <returns>A paged array of pets</returns>
		public Pets ListPets(int limit)
		{
			var requestUri = "/pets?limit="+limit;
			var responseMessage = this.client.GetAsync(requestUri).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCode();
				var stream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<Pets>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Create a pet
		/// CreatePets /pets
		/// </summary>
		public async Task CreatePetsAsync()
		{
			var requestUri = "/pets";
			var responseMessage = await client.PostAsync(requestUri, new StringContent(String.Empty));
			try
			{
				responseMessage.EnsureSuccessStatusCode();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Create a pet
		/// CreatePets /pets
		/// </summary>
		public void CreatePets()
		{
			var requestUri = "/pets";
			var responseMessage = this.client.PostAsync(requestUri, new StringContent(String.Empty)).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCode();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Info for a specific pet
		/// ShowPetById /pets/{petId}
		/// </summary>
		/// <param name="petId">The id of the pet to retrieve</param>
		/// <returns>Expected response to a valid request</returns>
		public async Task<Pet> ShowPetByIdAsync(string petId)
		{
			var requestUri = "/pets/"+Uri.EscapeDataString(petId);
			var responseMessage = await client.GetAsync(requestUri);
			try
			{
				responseMessage.EnsureSuccessStatusCode();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<Pet>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Info for a specific pet
		/// ShowPetById /pets/{petId}
		/// </summary>
		/// <param name="petId">The id of the pet to retrieve</param>
		/// <returns>Expected response to a valid request</returns>
		public Pet ShowPetById(string petId)
		{
			var requestUri = "/pets/"+Uri.EscapeDataString(petId);
			var responseMessage = this.client.GetAsync(requestUri).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCode();
				var stream = responseMessage.Content.ReadAsStreamAsync().Result;
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<Pet>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
	}
}
