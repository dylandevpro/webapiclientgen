//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DemoWebApi.DemoData.Client
{
    
    
    public enum AddressType
    {
        
        Postal,
        
        Residential,
    }
    
    public enum Days
    {
        
        Sat = 1,
        
        Sun = 2,
        
        Mon = 3,
        
        Tue = 4,
        
        Wed = 5,
        
        Thu = 6,
        
        Fri = 7,
    }
    
    public class Address : object
    {
        
        private System.Guid _Id;
        
        private string _Street1;
        
        private string _Street2;
        
        private string _City;
        
        private string _State;
        
        private string _PostalCode;
        
        private string _Country;
        
        private DemoWebApi.DemoData.Client.AddressType _Type;
        
        private DemoWebApi.DemoData.Another.Client.MyPoint _Location;
        
        public System.Guid Id
        {
            get
            {
                return _Id;
            }
            set
            {
                _Id = value;
            }
        }
        
        public string Street1
        {
            get
            {
                return _Street1;
            }
            set
            {
                _Street1 = value;
            }
        }
        
        public string Street2
        {
            get
            {
                return _Street2;
            }
            set
            {
                _Street2 = value;
            }
        }
        
        public string City
        {
            get
            {
                return _City;
            }
            set
            {
                _City = value;
            }
        }
        
        public string State
        {
            get
            {
                return _State;
            }
            set
            {
                _State = value;
            }
        }
        
        public string PostalCode
        {
            get
            {
                return _PostalCode;
            }
            set
            {
                _PostalCode = value;
            }
        }
        
        public string Country
        {
            get
            {
                return _Country;
            }
            set
            {
                _Country = value;
            }
        }
        
        public DemoWebApi.DemoData.Client.AddressType Type
        {
            get
            {
                return _Type;
            }
            set
            {
                _Type = value;
            }
        }
        
        public DemoWebApi.DemoData.Another.Client.MyPoint Location
        {
            get
            {
                return _Location;
            }
            set
            {
                _Location = value;
            }
        }
    }
    
    public class Entity : object
    {
        
        private System.Guid _Id;
        
        private string _Name;
        
        private DemoWebApi.DemoData.Client.Address[] _Addresses;
        
        public System.Guid Id
        {
            get
            {
                return _Id;
            }
            set
            {
                _Id = value;
            }
        }
        
        public string Name
        {
            get
            {
                return _Name;
            }
            set
            {
                _Name = value;
            }
        }
        
        public DemoWebApi.DemoData.Client.Address[] Addresses
        {
            get
            {
                return _Addresses;
            }
            set
            {
                _Addresses = value;
            }
        }
    }
    
    public class Person : DemoWebApi.DemoData.Client.Entity
    {
        
        private string _Surname;
        
        private string _GivenName;
        
        private System.Nullable<System.DateTime> _BirthDate;
        
        public string Surname
        {
            get
            {
                return _Surname;
            }
            set
            {
                _Surname = value;
            }
        }
        
        public string GivenName
        {
            get
            {
                return _GivenName;
            }
            set
            {
                _GivenName = value;
            }
        }
        
        public System.Nullable<System.DateTime> BirthDate
        {
            get
            {
                return _BirthDate;
            }
            set
            {
                _BirthDate = value;
            }
        }
    }
    
    public class Company : DemoWebApi.DemoData.Client.Entity
    {
        
        private string _BusinessNumber;
        
        private string _BusinessNumberType;
        
        private string[][] _TextMatrix;
        
        private int[][] _Int2DJagged;
        
        private int[,] _Int2D;
        
        private string[] _Lines;
        
        public string BusinessNumber
        {
            get
            {
                return _BusinessNumber;
            }
            set
            {
                _BusinessNumber = value;
            }
        }
        
        public string BusinessNumberType
        {
            get
            {
                return _BusinessNumberType;
            }
            set
            {
                _BusinessNumberType = value;
            }
        }
        
        public string[][] TextMatrix
        {
            get
            {
                return _TextMatrix;
            }
            set
            {
                _TextMatrix = value;
            }
        }
        
        public int[][] Int2DJagged
        {
            get
            {
                return _Int2DJagged;
            }
            set
            {
                _Int2DJagged = value;
            }
        }
        
        public int[,] Int2D
        {
            get
            {
                return _Int2D;
            }
            set
            {
                _Int2D = value;
            }
        }
        
        public string[] Lines
        {
            get
            {
                return _Lines;
            }
            set
            {
                _Lines = value;
            }
        }
    }
    
    public class MyPeopleDic : object
    {
        
        private System.Collections.Generic.Dictionary<string, DemoWebApi.DemoData.Client.Person> _Dic;
        
        private System.Collections.Generic.Dictionary<string, string> _AnotherDic;
        
        private System.Collections.Generic.Dictionary<int, string> _IntDic;
        
        public System.Collections.Generic.Dictionary<string, DemoWebApi.DemoData.Client.Person> Dic
        {
            get
            {
                return _Dic;
            }
            set
            {
                _Dic = value;
            }
        }
        
        public System.Collections.Generic.Dictionary<string, string> AnotherDic
        {
            get
            {
                return _AnotherDic;
            }
            set
            {
                _AnotherDic = value;
            }
        }
        
        public System.Collections.Generic.Dictionary<int, string> IntDic
        {
            get
            {
                return _IntDic;
            }
            set
            {
                _IntDic = value;
            }
        }
    }
}
namespace DemoWebApi.DemoData.Another.Client
{
    
    
    public class MyPoint
    {
        
        private double _X;
        
        private double _Y;
        
        public double X
        {
            get
            {
                return _X;
            }
            set
            {
                _X = value;
            }
        }
        
        public double Y
        {
            get
            {
                return _Y;
            }
            set
            {
                _Y = value;
            }
        }
    }
}
namespace DemoWebApi.Models.Client
{
    
    
    public class Handy : object
    {
        
        private long _Id;
        
        private string _Name;
        
        public long Id
        {
            get
            {
                return _Id;
            }
            set
            {
                _Id = value;
            }
        }
        
        public string Name
        {
            get
            {
                return _Name;
            }
            set
            {
                _Name = value;
            }
        }
    }
}
namespace DemoWebApi.Controllers.Client
{
    using System;
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using System.Net.Http;
    using Newtonsoft.Json;
    
    
    public partial class SuperDemo
    {
        
        private System.Net.Http.HttpClient client;
        
        private System.Uri baseUri;
        
        public SuperDemo(System.Net.Http.HttpClient client, System.Uri baseUri)
        {
            if (client == null)
                throw new ArgumentNullException("client", "Null HttpClient.");

            if (baseUri == null)
                throw new ArgumentNullException("baseUri", "Null baseUri");

            this.client = client;
            this.baseUri = baseUri;
        }
        
        /// <summary>
        /// 
        /// GET api/SuperDemo/int?d={d}
        /// </summary>
        public async Task<int> GetIntSquareAsync(int d)
        {
            var template = new System.UriTemplate("api/SuperDemo/int?d={d}");
            var uriParameters = new System.Collections.Specialized.NameValueCollection();
            uriParameters.Add("d", d.ToString());
            var requestUri = template.BindByName(this.baseUri, uriParameters);
            var responseMessage = await client.GetAsync(requestUri.ToString());
            responseMessage.EnsureSuccessStatusCode();
            var text = await responseMessage.Content.ReadAsStringAsync();
            return System.Int32.Parse(text);
        }
        
        /// <summary>
        /// 
        /// GET api/SuperDemo/int?d={d}
        /// </summary>
        public int GetIntSquare(int d)
        {
            var template = new System.UriTemplate("api/SuperDemo/int?d={d}");
            var uriParameters = new System.Collections.Specialized.NameValueCollection();
            uriParameters.Add("d", d.ToString());
            var requestUri = template.BindByName(this.baseUri, uriParameters);
            var responseMessage = this.client.GetAsync(requestUri.ToString()).Result;
            responseMessage.EnsureSuccessStatusCode();
            var text = responseMessage.Content.ReadAsStringAsync().Result;
            return System.Int32.Parse(text);
        }
        
        /// <summary>
        /// 
        /// GET api/SuperDemo/decimal?d={d}
        /// </summary>
        public async Task<decimal> GetDecimalSquareAsync(decimal d)
        {
            var template = new System.UriTemplate("api/SuperDemo/decimal?d={d}");
            var uriParameters = new System.Collections.Specialized.NameValueCollection();
            uriParameters.Add("d", d.ToString());
            var requestUri = template.BindByName(this.baseUri, uriParameters);
            var responseMessage = await client.GetAsync(requestUri.ToString());
            responseMessage.EnsureSuccessStatusCode();
            var text = await responseMessage.Content.ReadAsStringAsync();
            return JsonConvert.DeserializeObject<decimal>(text);
        }
        
        /// <summary>
        /// 
        /// GET api/SuperDemo/decimal?d={d}
        /// </summary>
        public decimal GetDecimalSquare(decimal d)
        {
            var template = new System.UriTemplate("api/SuperDemo/decimal?d={d}");
            var uriParameters = new System.Collections.Specialized.NameValueCollection();
            uriParameters.Add("d", d.ToString());
            var requestUri = template.BindByName(this.baseUri, uriParameters);
            var responseMessage = this.client.GetAsync(requestUri.ToString()).Result;
            responseMessage.EnsureSuccessStatusCode();
            var text = responseMessage.Content.ReadAsStringAsync().Result;
            return JsonConvert.DeserializeObject<decimal>(text);
        }
        
        /// <summary>
        /// 
        /// GET api/SuperDemo/NullableDatetime?hasValue={hasValue}
        /// </summary>
        public async Task<System.Nullable<System.DateTime>> GetDateTimeAsync(bool hasValue)
        {
            var template = new System.UriTemplate("api/SuperDemo/NullableDatetime?hasValue={hasValue}");
            var uriParameters = new System.Collections.Specialized.NameValueCollection();
            uriParameters.Add("hasValue", hasValue.ToString());
            var requestUri = template.BindByName(this.baseUri, uriParameters);
            var responseMessage = await client.GetAsync(requestUri.ToString());
            responseMessage.EnsureSuccessStatusCode();
            var text = await responseMessage.Content.ReadAsStringAsync();
            return JsonConvert.DeserializeObject<System.Nullable<System.DateTime>>(text);
        }
        
        /// <summary>
        /// 
        /// GET api/SuperDemo/NullableDatetime?hasValue={hasValue}
        /// </summary>
        public System.Nullable<System.DateTime> GetDateTime(bool hasValue)
        {
            var template = new System.UriTemplate("api/SuperDemo/NullableDatetime?hasValue={hasValue}");
            var uriParameters = new System.Collections.Specialized.NameValueCollection();
            uriParameters.Add("hasValue", hasValue.ToString());
            var requestUri = template.BindByName(this.baseUri, uriParameters);
            var responseMessage = this.client.GetAsync(requestUri.ToString()).Result;
            responseMessage.EnsureSuccessStatusCode();
            var text = responseMessage.Content.ReadAsStringAsync().Result;
            return JsonConvert.DeserializeObject<System.Nullable<System.DateTime>>(text);
        }
        
        /// <summary>
        /// 
        /// GET api/SuperDemo/DateTimeOffset
        /// </summary>
        public async Task<System.DateTimeOffset> GetDateTimeOffsetAsync()
        {
            var template = new System.UriTemplate("api/SuperDemo/DateTimeOffset");
            var uriParameters = new System.Collections.Specialized.NameValueCollection();
            var requestUri = template.BindByName(this.baseUri, uriParameters);
            var responseMessage = await client.GetAsync(requestUri.ToString());
            responseMessage.EnsureSuccessStatusCode();
            var text = await responseMessage.Content.ReadAsStringAsync();
            return JsonConvert.DeserializeObject<System.DateTimeOffset>(text);
        }
        
        /// <summary>
        /// 
        /// GET api/SuperDemo/DateTimeOffset
        /// </summary>
        public System.DateTimeOffset GetDateTimeOffset()
        {
            var template = new System.UriTemplate("api/SuperDemo/DateTimeOffset");
            var uriParameters = new System.Collections.Specialized.NameValueCollection();
            var requestUri = template.BindByName(this.baseUri, uriParameters);
            var responseMessage = this.client.GetAsync(requestUri.ToString()).Result;
            responseMessage.EnsureSuccessStatusCode();
            var text = responseMessage.Content.ReadAsStringAsync().Result;
            return JsonConvert.DeserializeObject<System.DateTimeOffset>(text);
        }
        
        /// <summary>
        /// DateTime and DateTimeOffset may not be represented well in URL, so must put them into the POST body.
        /// POST api/SuperDemo/DateTimeOffset
        /// </summary>
        public async Task<bool> PostDateTimeOffsetAsync(System.DateTimeOffset d)
        {
            var requestUri = new System.Uri(this.baseUri, "api/SuperDemo/DateTimeOffset");
            var responseMessage = await client.PostAsJsonAsync(requestUri.ToString(), d);
            responseMessage.EnsureSuccessStatusCode();
            var text = await responseMessage.Content.ReadAsStringAsync();
            return System.Boolean.Parse(text);
        }
        
        /// <summary>
        /// DateTime and DateTimeOffset may not be represented well in URL, so must put them into the POST body.
        /// POST api/SuperDemo/DateTimeOffset
        /// </summary>
        public bool PostDateTimeOffset(System.DateTimeOffset d)
        {
            var requestUri = new System.Uri(this.baseUri, "api/SuperDemo/DateTimeOffset");
            var responseMessage = this.client.PostAsJsonAsync(requestUri.ToString(), d).Result;
            responseMessage.EnsureSuccessStatusCode();
            var text = responseMessage.Content.ReadAsStringAsync().Result;
            return System.Boolean.Parse(text);
        }
        
        /// <summary>
        /// 
        /// POST api/SuperDemo/DateTimeOffsetNullable
        /// </summary>
        public async Task<bool> PostDateTimeOffsetNullableAsync(System.Nullable<System.DateTimeOffset> d)
        {
            var requestUri = new System.Uri(this.baseUri, "api/SuperDemo/DateTimeOffsetNullable");
            var responseMessage = await client.PostAsJsonAsync(requestUri.ToString(), d);
            responseMessage.EnsureSuccessStatusCode();
            var text = await responseMessage.Content.ReadAsStringAsync();
            return System.Boolean.Parse(text);
        }
        
        /// <summary>
        /// 
        /// POST api/SuperDemo/DateTimeOffsetNullable
        /// </summary>
        public bool PostDateTimeOffsetNullable(System.Nullable<System.DateTimeOffset> d)
        {
            var requestUri = new System.Uri(this.baseUri, "api/SuperDemo/DateTimeOffsetNullable");
            var responseMessage = this.client.PostAsJsonAsync(requestUri.ToString(), d).Result;
            responseMessage.EnsureSuccessStatusCode();
            var text = responseMessage.Content.ReadAsStringAsync().Result;
            return System.Boolean.Parse(text);
        }
        
        /// <summary>
        /// 
        /// GET api/SuperDemo/NullableDecimal?hasValue={hasValue}
        /// </summary>
        public async Task<System.Nullable<decimal>> GetNullableDecimalAsync(bool hasValue)
        {
            var template = new System.UriTemplate("api/SuperDemo/NullableDecimal?hasValue={hasValue}");
            var uriParameters = new System.Collections.Specialized.NameValueCollection();
            uriParameters.Add("hasValue", hasValue.ToString());
            var requestUri = template.BindByName(this.baseUri, uriParameters);
            var responseMessage = await client.GetAsync(requestUri.ToString());
            responseMessage.EnsureSuccessStatusCode();
            var text = await responseMessage.Content.ReadAsStringAsync();
            return JsonConvert.DeserializeObject<System.Nullable<decimal>>(text);
        }
        
        /// <summary>
        /// 
        /// GET api/SuperDemo/NullableDecimal?hasValue={hasValue}
        /// </summary>
        public System.Nullable<decimal> GetNullableDecimal(bool hasValue)
        {
            var template = new System.UriTemplate("api/SuperDemo/NullableDecimal?hasValue={hasValue}");
            var uriParameters = new System.Collections.Specialized.NameValueCollection();
            uriParameters.Add("hasValue", hasValue.ToString());
            var requestUri = template.BindByName(this.baseUri, uriParameters);
            var responseMessage = this.client.GetAsync(requestUri.ToString()).Result;
            responseMessage.EnsureSuccessStatusCode();
            var text = responseMessage.Content.ReadAsStringAsync().Result;
            return JsonConvert.DeserializeObject<System.Nullable<decimal>>(text);
        }
        
        /// <summary>
        /// 
        /// GET api/SuperDemo/FloatZero
        /// </summary>
        public async Task<float> GetFloatZeroAsync()
        {
            var template = new System.UriTemplate("api/SuperDemo/FloatZero");
            var uriParameters = new System.Collections.Specialized.NameValueCollection();
            var requestUri = template.BindByName(this.baseUri, uriParameters);
            var responseMessage = await client.GetAsync(requestUri.ToString());
            responseMessage.EnsureSuccessStatusCode();
            var text = await responseMessage.Content.ReadAsStringAsync();
            return System.Single.Parse(text);
        }
        
        /// <summary>
        /// 
        /// GET api/SuperDemo/FloatZero
        /// </summary>
        public float GetFloatZero()
        {
            var template = new System.UriTemplate("api/SuperDemo/FloatZero");
            var uriParameters = new System.Collections.Specialized.NameValueCollection();
            var requestUri = template.BindByName(this.baseUri, uriParameters);
            var responseMessage = this.client.GetAsync(requestUri.ToString()).Result;
            responseMessage.EnsureSuccessStatusCode();
            var text = responseMessage.Content.ReadAsStringAsync().Result;
            return System.Single.Parse(text);
        }
        
        /// <summary>
        /// 
        /// GET api/SuperDemo/DoubleZero
        /// </summary>
        public async Task<double> GetDoubleZeroAsync()
        {
            var template = new System.UriTemplate("api/SuperDemo/DoubleZero");
            var uriParameters = new System.Collections.Specialized.NameValueCollection();
            var requestUri = template.BindByName(this.baseUri, uriParameters);
            var responseMessage = await client.GetAsync(requestUri.ToString());
            responseMessage.EnsureSuccessStatusCode();
            var text = await responseMessage.Content.ReadAsStringAsync();
            return System.Double.Parse(text);
        }
        
        /// <summary>
        /// 
        /// GET api/SuperDemo/DoubleZero
        /// </summary>
        public double GetDoubleZero()
        {
            var template = new System.UriTemplate("api/SuperDemo/DoubleZero");
            var uriParameters = new System.Collections.Specialized.NameValueCollection();
            var requestUri = template.BindByName(this.baseUri, uriParameters);
            var responseMessage = this.client.GetAsync(requestUri.ToString()).Result;
            responseMessage.EnsureSuccessStatusCode();
            var text = responseMessage.Content.ReadAsStringAsync().Result;
            return System.Double.Parse(text);
        }
        
        /// <summary>
        /// 
        /// GET api/SuperDemo/DecimalZero
        /// </summary>
        public async Task<decimal> GetDecimalZeroAsync()
        {
            var template = new System.UriTemplate("api/SuperDemo/DecimalZero");
            var uriParameters = new System.Collections.Specialized.NameValueCollection();
            var requestUri = template.BindByName(this.baseUri, uriParameters);
            var responseMessage = await client.GetAsync(requestUri.ToString());
            responseMessage.EnsureSuccessStatusCode();
            var text = await responseMessage.Content.ReadAsStringAsync();
            return JsonConvert.DeserializeObject<decimal>(text);
        }
        
        /// <summary>
        /// 
        /// GET api/SuperDemo/DecimalZero
        /// </summary>
        public decimal GetDecimalZero()
        {
            var template = new System.UriTemplate("api/SuperDemo/DecimalZero");
            var uriParameters = new System.Collections.Specialized.NameValueCollection();
            var requestUri = template.BindByName(this.baseUri, uriParameters);
            var responseMessage = this.client.GetAsync(requestUri.ToString()).Result;
            responseMessage.EnsureSuccessStatusCode();
            var text = responseMessage.Content.ReadAsStringAsync().Result;
            return JsonConvert.DeserializeObject<decimal>(text);
        }
        
        /// <summary>
        /// 
        /// GET api/SuperDemo/NullString
        /// </summary>
        public async Task<string> GetNullStringAsync()
        {
            var template = new System.UriTemplate("api/SuperDemo/NullString");
            var uriParameters = new System.Collections.Specialized.NameValueCollection();
            var requestUri = template.BindByName(this.baseUri, uriParameters);
            var responseMessage = await client.GetAsync(requestUri.ToString());
            responseMessage.EnsureSuccessStatusCode();
            var text = await responseMessage.Content.ReadAsStringAsync();
            return JsonConvert.DeserializeObject<string>(text);
        }
        
        /// <summary>
        /// 
        /// GET api/SuperDemo/NullString
        /// </summary>
        public string GetNullString()
        {
            var template = new System.UriTemplate("api/SuperDemo/NullString");
            var uriParameters = new System.Collections.Specialized.NameValueCollection();
            var requestUri = template.BindByName(this.baseUri, uriParameters);
            var responseMessage = this.client.GetAsync(requestUri.ToString()).Result;
            responseMessage.EnsureSuccessStatusCode();
            var text = responseMessage.Content.ReadAsStringAsync().Result;
            return JsonConvert.DeserializeObject<string>(text);
        }
        
        /// <summary>
        /// 
        /// GET api/SuperDemo/EmptyString
        /// </summary>
        public async Task<string> GetEmptyStringAsync()
        {
            var template = new System.UriTemplate("api/SuperDemo/EmptyString");
            var uriParameters = new System.Collections.Specialized.NameValueCollection();
            var requestUri = template.BindByName(this.baseUri, uriParameters);
            var responseMessage = await client.GetAsync(requestUri.ToString());
            responseMessage.EnsureSuccessStatusCode();
            var text = await responseMessage.Content.ReadAsStringAsync();
            return JsonConvert.DeserializeObject<string>(text);
        }
        
        /// <summary>
        /// 
        /// GET api/SuperDemo/EmptyString
        /// </summary>
        public string GetEmptyString()
        {
            var template = new System.UriTemplate("api/SuperDemo/EmptyString");
            var uriParameters = new System.Collections.Specialized.NameValueCollection();
            var requestUri = template.BindByName(this.baseUri, uriParameters);
            var responseMessage = this.client.GetAsync(requestUri.ToString()).Result;
            responseMessage.EnsureSuccessStatusCode();
            var text = responseMessage.Content.ReadAsStringAsync().Result;
            return JsonConvert.DeserializeObject<string>(text);
        }
        
        /// <summary>
        /// 
        /// GET api/SuperDemo/NullObject
        /// </summary>
        public async Task<DemoWebApi.DemoData.Client.Person> GetNullPersonAsync()
        {
            var template = new System.UriTemplate("api/SuperDemo/NullObject");
            var uriParameters = new System.Collections.Specialized.NameValueCollection();
            var requestUri = template.BindByName(this.baseUri, uriParameters);
            var responseMessage = await client.GetAsync(requestUri.ToString());
            responseMessage.EnsureSuccessStatusCode();
            var text = await responseMessage.Content.ReadAsStringAsync();
            return JsonConvert.DeserializeObject<DemoWebApi.DemoData.Client.Person>(text);
        }
        
        /// <summary>
        /// 
        /// GET api/SuperDemo/NullObject
        /// </summary>
        public DemoWebApi.DemoData.Client.Person GetNullPerson()
        {
            var template = new System.UriTemplate("api/SuperDemo/NullObject");
            var uriParameters = new System.Collections.Specialized.NameValueCollection();
            var requestUri = template.BindByName(this.baseUri, uriParameters);
            var responseMessage = this.client.GetAsync(requestUri.ToString()).Result;
            responseMessage.EnsureSuccessStatusCode();
            var text = responseMessage.Content.ReadAsStringAsync().Result;
            return JsonConvert.DeserializeObject<DemoWebApi.DemoData.Client.Person>(text);
        }
        
        /// <summary>
        /// 
        /// GET api/SuperDemo/TextStream
        /// </summary>
        public async Task<System.Net.Http.HttpResponseMessage> GetTextStreamAsync()
        {
            var template = new System.UriTemplate("api/SuperDemo/TextStream");
            var uriParameters = new System.Collections.Specialized.NameValueCollection();
            var requestUri = template.BindByName(this.baseUri, uriParameters);
            var responseMessage = await client.GetAsync(requestUri.ToString());
            responseMessage.EnsureSuccessStatusCode();
            return responseMessage;
        }
        
        /// <summary>
        /// 
        /// GET api/SuperDemo/TextStream
        /// </summary>
        public System.Net.Http.HttpResponseMessage GetTextStream()
        {
            var template = new System.UriTemplate("api/SuperDemo/TextStream");
            var uriParameters = new System.Collections.Specialized.NameValueCollection();
            var requestUri = template.BindByName(this.baseUri, uriParameters);
            var responseMessage = this.client.GetAsync(requestUri.ToString()).Result;
            responseMessage.EnsureSuccessStatusCode();
            return responseMessage;
        }
        
        /// <summary>
        /// 
        /// GET api/SuperDemo/ByteArray
        /// </summary>
        public async Task<byte[]> GetByteArrayAsync()
        {
            var template = new System.UriTemplate("api/SuperDemo/ByteArray");
            var uriParameters = new System.Collections.Specialized.NameValueCollection();
            var requestUri = template.BindByName(this.baseUri, uriParameters);
            var responseMessage = await client.GetAsync(requestUri.ToString());
            responseMessage.EnsureSuccessStatusCode();
            var text = await responseMessage.Content.ReadAsStringAsync();
            return JsonConvert.DeserializeObject<byte[]>(text);
        }
        
        /// <summary>
        /// 
        /// GET api/SuperDemo/ByteArray
        /// </summary>
        public byte[] GetByteArray()
        {
            var template = new System.UriTemplate("api/SuperDemo/ByteArray");
            var uriParameters = new System.Collections.Specialized.NameValueCollection();
            var requestUri = template.BindByName(this.baseUri, uriParameters);
            var responseMessage = this.client.GetAsync(requestUri.ToString()).Result;
            responseMessage.EnsureSuccessStatusCode();
            var text = responseMessage.Content.ReadAsStringAsync().Result;
            return JsonConvert.DeserializeObject<byte[]>(text);
        }
        
        /// <summary>
        /// 
        /// GET api/SuperDemo/ActionResult
        /// </summary>
        public async Task<System.Net.Http.HttpResponseMessage> GetActionResultAsync()
        {
            var template = new System.UriTemplate("api/SuperDemo/ActionResult");
            var uriParameters = new System.Collections.Specialized.NameValueCollection();
            var requestUri = template.BindByName(this.baseUri, uriParameters);
            var responseMessage = await client.GetAsync(requestUri.ToString());
            responseMessage.EnsureSuccessStatusCode();
            return responseMessage;
        }
        
        /// <summary>
        /// 
        /// GET api/SuperDemo/ActionResult
        /// </summary>
        public System.Net.Http.HttpResponseMessage GetActionResult()
        {
            var template = new System.UriTemplate("api/SuperDemo/ActionResult");
            var uriParameters = new System.Collections.Specialized.NameValueCollection();
            var requestUri = template.BindByName(this.baseUri, uriParameters);
            var responseMessage = this.client.GetAsync(requestUri.ToString()).Result;
            responseMessage.EnsureSuccessStatusCode();
            return responseMessage;
        }
        
        /// <summary>
        /// 
        /// GET api/SuperDemo/byte
        /// </summary>
        public async Task<byte> GetbyteAsync()
        {
            var template = new System.UriTemplate("api/SuperDemo/byte");
            var uriParameters = new System.Collections.Specialized.NameValueCollection();
            var requestUri = template.BindByName(this.baseUri, uriParameters);
            var responseMessage = await client.GetAsync(requestUri.ToString());
            responseMessage.EnsureSuccessStatusCode();
            var text = await responseMessage.Content.ReadAsStringAsync();
            return System.Byte.Parse(text);
        }
        
        /// <summary>
        /// 
        /// GET api/SuperDemo/byte
        /// </summary>
        public byte Getbyte()
        {
            var template = new System.UriTemplate("api/SuperDemo/byte");
            var uriParameters = new System.Collections.Specialized.NameValueCollection();
            var requestUri = template.BindByName(this.baseUri, uriParameters);
            var responseMessage = this.client.GetAsync(requestUri.ToString()).Result;
            responseMessage.EnsureSuccessStatusCode();
            var text = responseMessage.Content.ReadAsStringAsync().Result;
            return System.Byte.Parse(text);
        }
        
        /// <summary>
        /// 
        /// GET api/SuperDemo/sbyte
        /// </summary>
        public async Task<sbyte> GetsbyteAsync()
        {
            var template = new System.UriTemplate("api/SuperDemo/sbyte");
            var uriParameters = new System.Collections.Specialized.NameValueCollection();
            var requestUri = template.BindByName(this.baseUri, uriParameters);
            var responseMessage = await client.GetAsync(requestUri.ToString());
            responseMessage.EnsureSuccessStatusCode();
            var text = await responseMessage.Content.ReadAsStringAsync();
            return System.SByte.Parse(text);
        }
        
        /// <summary>
        /// 
        /// GET api/SuperDemo/sbyte
        /// </summary>
        public sbyte Getsbyte()
        {
            var template = new System.UriTemplate("api/SuperDemo/sbyte");
            var uriParameters = new System.Collections.Specialized.NameValueCollection();
            var requestUri = template.BindByName(this.baseUri, uriParameters);
            var responseMessage = this.client.GetAsync(requestUri.ToString()).Result;
            responseMessage.EnsureSuccessStatusCode();
            var text = responseMessage.Content.ReadAsStringAsync().Result;
            return System.SByte.Parse(text);
        }
        
        /// <summary>
        /// 
        /// GET api/SuperDemo/short
        /// </summary>
        public async Task<short> GetShortAsync()
        {
            var template = new System.UriTemplate("api/SuperDemo/short");
            var uriParameters = new System.Collections.Specialized.NameValueCollection();
            var requestUri = template.BindByName(this.baseUri, uriParameters);
            var responseMessage = await client.GetAsync(requestUri.ToString());
            responseMessage.EnsureSuccessStatusCode();
            var text = await responseMessage.Content.ReadAsStringAsync();
            return System.Int16.Parse(text);
        }
        
        /// <summary>
        /// 
        /// GET api/SuperDemo/short
        /// </summary>
        public short GetShort()
        {
            var template = new System.UriTemplate("api/SuperDemo/short");
            var uriParameters = new System.Collections.Specialized.NameValueCollection();
            var requestUri = template.BindByName(this.baseUri, uriParameters);
            var responseMessage = this.client.GetAsync(requestUri.ToString()).Result;
            responseMessage.EnsureSuccessStatusCode();
            var text = responseMessage.Content.ReadAsStringAsync().Result;
            return System.Int16.Parse(text);
        }
        
        /// <summary>
        /// 
        /// GET api/SuperDemo/ushort
        /// </summary>
        public async Task<ushort> GetUShortAsync()
        {
            var template = new System.UriTemplate("api/SuperDemo/ushort");
            var uriParameters = new System.Collections.Specialized.NameValueCollection();
            var requestUri = template.BindByName(this.baseUri, uriParameters);
            var responseMessage = await client.GetAsync(requestUri.ToString());
            responseMessage.EnsureSuccessStatusCode();
            var text = await responseMessage.Content.ReadAsStringAsync();
            return System.UInt16.Parse(text);
        }
        
        /// <summary>
        /// 
        /// GET api/SuperDemo/ushort
        /// </summary>
        public ushort GetUShort()
        {
            var template = new System.UriTemplate("api/SuperDemo/ushort");
            var uriParameters = new System.Collections.Specialized.NameValueCollection();
            var requestUri = template.BindByName(this.baseUri, uriParameters);
            var responseMessage = this.client.GetAsync(requestUri.ToString()).Result;
            responseMessage.EnsureSuccessStatusCode();
            var text = responseMessage.Content.ReadAsStringAsync().Result;
            return System.UInt16.Parse(text);
        }
        
        /// <summary>
        /// 
        /// GET api/SuperDemo/uint
        /// </summary>
        public async Task<uint> GetUintAsync()
        {
            var template = new System.UriTemplate("api/SuperDemo/uint");
            var uriParameters = new System.Collections.Specialized.NameValueCollection();
            var requestUri = template.BindByName(this.baseUri, uriParameters);
            var responseMessage = await client.GetAsync(requestUri.ToString());
            responseMessage.EnsureSuccessStatusCode();
            var text = await responseMessage.Content.ReadAsStringAsync();
            return System.UInt32.Parse(text);
        }
        
        /// <summary>
        /// 
        /// GET api/SuperDemo/uint
        /// </summary>
        public uint GetUint()
        {
            var template = new System.UriTemplate("api/SuperDemo/uint");
            var uriParameters = new System.Collections.Specialized.NameValueCollection();
            var requestUri = template.BindByName(this.baseUri, uriParameters);
            var responseMessage = this.client.GetAsync(requestUri.ToString()).Result;
            responseMessage.EnsureSuccessStatusCode();
            var text = responseMessage.Content.ReadAsStringAsync().Result;
            return System.UInt32.Parse(text);
        }
        
        /// <summary>
        /// 
        /// GET api/SuperDemo/ulong
        /// </summary>
        public async Task<ulong> GetulongAsync()
        {
            var template = new System.UriTemplate("api/SuperDemo/ulong");
            var uriParameters = new System.Collections.Specialized.NameValueCollection();
            var requestUri = template.BindByName(this.baseUri, uriParameters);
            var responseMessage = await client.GetAsync(requestUri.ToString());
            responseMessage.EnsureSuccessStatusCode();
            var text = await responseMessage.Content.ReadAsStringAsync();
            return System.UInt64.Parse(text);
        }
        
        /// <summary>
        /// 
        /// GET api/SuperDemo/ulong
        /// </summary>
        public ulong Getulong()
        {
            var template = new System.UriTemplate("api/SuperDemo/ulong");
            var uriParameters = new System.Collections.Specialized.NameValueCollection();
            var requestUri = template.BindByName(this.baseUri, uriParameters);
            var responseMessage = this.client.GetAsync(requestUri.ToString()).Result;
            responseMessage.EnsureSuccessStatusCode();
            var text = responseMessage.Content.ReadAsStringAsync().Result;
            return System.UInt64.Parse(text);
        }
        
        /// <summary>
        /// 
        /// GET api/SuperDemo/doulbe
        /// </summary>
        public async Task<double> GetdoubleAsync()
        {
            var template = new System.UriTemplate("api/SuperDemo/doulbe");
            var uriParameters = new System.Collections.Specialized.NameValueCollection();
            var requestUri = template.BindByName(this.baseUri, uriParameters);
            var responseMessage = await client.GetAsync(requestUri.ToString());
            responseMessage.EnsureSuccessStatusCode();
            var text = await responseMessage.Content.ReadAsStringAsync();
            return System.Double.Parse(text);
        }
        
        /// <summary>
        /// 
        /// GET api/SuperDemo/doulbe
        /// </summary>
        public double Getdouble()
        {
            var template = new System.UriTemplate("api/SuperDemo/doulbe");
            var uriParameters = new System.Collections.Specialized.NameValueCollection();
            var requestUri = template.BindByName(this.baseUri, uriParameters);
            var responseMessage = this.client.GetAsync(requestUri.ToString()).Result;
            responseMessage.EnsureSuccessStatusCode();
            var text = responseMessage.Content.ReadAsStringAsync().Result;
            return System.Double.Parse(text);
        }
        
        /// <summary>
        /// 
        /// GET api/SuperDemo/decimal
        /// </summary>
        public async Task<decimal> GetDecimalAsync()
        {
            var template = new System.UriTemplate("api/SuperDemo/decimal");
            var uriParameters = new System.Collections.Specialized.NameValueCollection();
            var requestUri = template.BindByName(this.baseUri, uriParameters);
            var responseMessage = await client.GetAsync(requestUri.ToString());
            responseMessage.EnsureSuccessStatusCode();
            var text = await responseMessage.Content.ReadAsStringAsync();
            return JsonConvert.DeserializeObject<decimal>(text);
        }
        
        /// <summary>
        /// 
        /// GET api/SuperDemo/decimal
        /// </summary>
        public decimal GetDecimal()
        {
            var template = new System.UriTemplate("api/SuperDemo/decimal");
            var uriParameters = new System.Collections.Specialized.NameValueCollection();
            var requestUri = template.BindByName(this.baseUri, uriParameters);
            var responseMessage = this.client.GetAsync(requestUri.ToString()).Result;
            responseMessage.EnsureSuccessStatusCode();
            var text = responseMessage.Content.ReadAsStringAsync().Result;
            return JsonConvert.DeserializeObject<decimal>(text);
        }
        
        /// <summary>
        /// 
        /// GET api/SuperDemo/char
        /// </summary>
        public async Task<char> GetCharAsync()
        {
            var template = new System.UriTemplate("api/SuperDemo/char");
            var uriParameters = new System.Collections.Specialized.NameValueCollection();
            var requestUri = template.BindByName(this.baseUri, uriParameters);
            var responseMessage = await client.GetAsync(requestUri.ToString());
            responseMessage.EnsureSuccessStatusCode();
            var text = await responseMessage.Content.ReadAsStringAsync();
            return JsonConvert.DeserializeObject<char>(text);
        }
        
        /// <summary>
        /// 
        /// GET api/SuperDemo/char
        /// </summary>
        public char GetChar()
        {
            var template = new System.UriTemplate("api/SuperDemo/char");
            var uriParameters = new System.Collections.Specialized.NameValueCollection();
            var requestUri = template.BindByName(this.baseUri, uriParameters);
            var responseMessage = this.client.GetAsync(requestUri.ToString()).Result;
            responseMessage.EnsureSuccessStatusCode();
            var text = responseMessage.Content.ReadAsStringAsync().Result;
            return JsonConvert.DeserializeObject<char>(text);
        }
        
        /// <summary>
        /// 
        /// GET api/SuperDemo/bool
        /// </summary>
        public async Task<bool> GetBoolAsync()
        {
            var template = new System.UriTemplate("api/SuperDemo/bool");
            var uriParameters = new System.Collections.Specialized.NameValueCollection();
            var requestUri = template.BindByName(this.baseUri, uriParameters);
            var responseMessage = await client.GetAsync(requestUri.ToString());
            responseMessage.EnsureSuccessStatusCode();
            var text = await responseMessage.Content.ReadAsStringAsync();
            return System.Boolean.Parse(text);
        }
        
        /// <summary>
        /// 
        /// GET api/SuperDemo/bool
        /// </summary>
        public bool GetBool()
        {
            var template = new System.UriTemplate("api/SuperDemo/bool");
            var uriParameters = new System.Collections.Specialized.NameValueCollection();
            var requestUri = template.BindByName(this.baseUri, uriParameters);
            var responseMessage = this.client.GetAsync(requestUri.ToString()).Result;
            responseMessage.EnsureSuccessStatusCode();
            var text = responseMessage.Content.ReadAsStringAsync().Result;
            return System.Boolean.Parse(text);
        }
        
        /// <summary>
        /// 
        /// GET api/SuperDemo/int2d
        /// </summary>
        public async Task<int[,]> GetInt2DAsync()
        {
            var template = new System.UriTemplate("api/SuperDemo/int2d");
            var uriParameters = new System.Collections.Specialized.NameValueCollection();
            var requestUri = template.BindByName(this.baseUri, uriParameters);
            var responseMessage = await client.GetAsync(requestUri.ToString());
            responseMessage.EnsureSuccessStatusCode();
            var text = await responseMessage.Content.ReadAsStringAsync();
            return JsonConvert.DeserializeObject<int[,]>(text);
        }
        
        /// <summary>
        /// 
        /// GET api/SuperDemo/int2d
        /// </summary>
        public int[,] GetInt2D()
        {
            var template = new System.UriTemplate("api/SuperDemo/int2d");
            var uriParameters = new System.Collections.Specialized.NameValueCollection();
            var requestUri = template.BindByName(this.baseUri, uriParameters);
            var responseMessage = this.client.GetAsync(requestUri.ToString()).Result;
            responseMessage.EnsureSuccessStatusCode();
            var text = responseMessage.Content.ReadAsStringAsync().Result;
            return JsonConvert.DeserializeObject<int[,]>(text);
        }
        
        /// <summary>
        /// 
        /// GET api/SuperDemo/int2dJagged
        /// </summary>
        public async Task<int[][]> GetInt2DJaggedAsync()
        {
            var template = new System.UriTemplate("api/SuperDemo/int2dJagged");
            var uriParameters = new System.Collections.Specialized.NameValueCollection();
            var requestUri = template.BindByName(this.baseUri, uriParameters);
            var responseMessage = await client.GetAsync(requestUri.ToString());
            responseMessage.EnsureSuccessStatusCode();
            var text = await responseMessage.Content.ReadAsStringAsync();
            return JsonConvert.DeserializeObject<int[][]>(text);
        }
        
        /// <summary>
        /// 
        /// GET api/SuperDemo/int2dJagged
        /// </summary>
        public int[][] GetInt2DJagged()
        {
            var template = new System.UriTemplate("api/SuperDemo/int2dJagged");
            var uriParameters = new System.Collections.Specialized.NameValueCollection();
            var requestUri = template.BindByName(this.baseUri, uriParameters);
            var responseMessage = this.client.GetAsync(requestUri.ToString()).Result;
            responseMessage.EnsureSuccessStatusCode();
            var text = responseMessage.Content.ReadAsStringAsync().Result;
            return JsonConvert.DeserializeObject<int[][]>(text);
        }
        
        /// <summary>
        /// 
        /// POST api/SuperDemo/int2d
        /// </summary>
        public async Task<bool> PostInt2DAsync(int[,] a)
        {
            var requestUri = new System.Uri(this.baseUri, "api/SuperDemo/int2d");
            var responseMessage = await client.PostAsJsonAsync(requestUri.ToString(), a);
            responseMessage.EnsureSuccessStatusCode();
            var text = await responseMessage.Content.ReadAsStringAsync();
            return System.Boolean.Parse(text);
        }
        
        /// <summary>
        /// 
        /// POST api/SuperDemo/int2d
        /// </summary>
        public bool PostInt2D(int[,] a)
        {
            var requestUri = new System.Uri(this.baseUri, "api/SuperDemo/int2d");
            var responseMessage = this.client.PostAsJsonAsync(requestUri.ToString(), a).Result;
            responseMessage.EnsureSuccessStatusCode();
            var text = responseMessage.Content.ReadAsStringAsync().Result;
            return System.Boolean.Parse(text);
        }
        
        /// <summary>
        /// 
        /// POST api/SuperDemo/int2djagged
        /// </summary>
        public async Task<bool> PostInt2DJaggedAsync(int[][] a)
        {
            var requestUri = new System.Uri(this.baseUri, "api/SuperDemo/int2djagged");
            var responseMessage = await client.PostAsJsonAsync(requestUri.ToString(), a);
            responseMessage.EnsureSuccessStatusCode();
            var text = await responseMessage.Content.ReadAsStringAsync();
            return System.Boolean.Parse(text);
        }
        
        /// <summary>
        /// 
        /// POST api/SuperDemo/int2djagged
        /// </summary>
        public bool PostInt2DJagged(int[][] a)
        {
            var requestUri = new System.Uri(this.baseUri, "api/SuperDemo/int2djagged");
            var responseMessage = this.client.PostAsJsonAsync(requestUri.ToString(), a).Result;
            responseMessage.EnsureSuccessStatusCode();
            var text = responseMessage.Content.ReadAsStringAsync().Result;
            return System.Boolean.Parse(text);
        }
        
        /// <summary>
        /// 
        /// POST api/SuperDemo/intArray
        /// </summary>
        public async Task<bool> PostIntArrayAsync(int[] a)
        {
            var requestUri = new System.Uri(this.baseUri, "api/SuperDemo/intArray");
            var responseMessage = await client.PostAsJsonAsync(requestUri.ToString(), a);
            responseMessage.EnsureSuccessStatusCode();
            var text = await responseMessage.Content.ReadAsStringAsync();
            return System.Boolean.Parse(text);
        }
        
        /// <summary>
        /// 
        /// POST api/SuperDemo/intArray
        /// </summary>
        public bool PostIntArray(int[] a)
        {
            var requestUri = new System.Uri(this.baseUri, "api/SuperDemo/intArray");
            var responseMessage = this.client.PostAsJsonAsync(requestUri.ToString(), a).Result;
            responseMessage.EnsureSuccessStatusCode();
            var text = responseMessage.Content.ReadAsStringAsync().Result;
            return System.Boolean.Parse(text);
        }
        
        /// <summary>
        /// 
        /// GET api/SuperDemo/intArray
        /// </summary>
        public async Task<int[]> GetIntArrayAsync()
        {
            var template = new System.UriTemplate("api/SuperDemo/intArray");
            var uriParameters = new System.Collections.Specialized.NameValueCollection();
            var requestUri = template.BindByName(this.baseUri, uriParameters);
            var responseMessage = await client.GetAsync(requestUri.ToString());
            responseMessage.EnsureSuccessStatusCode();
            var text = await responseMessage.Content.ReadAsStringAsync();
            return JsonConvert.DeserializeObject<int[]>(text);
        }
        
        /// <summary>
        /// 
        /// GET api/SuperDemo/intArray
        /// </summary>
        public int[] GetIntArray()
        {
            var template = new System.UriTemplate("api/SuperDemo/intArray");
            var uriParameters = new System.Collections.Specialized.NameValueCollection();
            var requestUri = template.BindByName(this.baseUri, uriParameters);
            var responseMessage = this.client.GetAsync(requestUri.ToString()).Result;
            responseMessage.EnsureSuccessStatusCode();
            var text = responseMessage.Content.ReadAsStringAsync().Result;
            return JsonConvert.DeserializeObject<int[]>(text);
        }
        
        /// <summary>
        /// 
        /// GET api/SuperDemo/AnonymousDynamic
        /// </summary>
        public async Task<Newtonsoft.Json.Linq.JObject> GetAnonymousDynamicAsync()
        {
            var template = new System.UriTemplate("api/SuperDemo/AnonymousDynamic");
            var uriParameters = new System.Collections.Specialized.NameValueCollection();
            var requestUri = template.BindByName(this.baseUri, uriParameters);
            var responseMessage = await client.GetAsync(requestUri.ToString());
            responseMessage.EnsureSuccessStatusCode();
            var text = await responseMessage.Content.ReadAsStringAsync();
            return JsonConvert.DeserializeObject<Newtonsoft.Json.Linq.JObject>(text);
        }
        
        /// <summary>
        /// 
        /// GET api/SuperDemo/AnonymousDynamic
        /// </summary>
        public Newtonsoft.Json.Linq.JObject GetAnonymousDynamic()
        {
            var template = new System.UriTemplate("api/SuperDemo/AnonymousDynamic");
            var uriParameters = new System.Collections.Specialized.NameValueCollection();
            var requestUri = template.BindByName(this.baseUri, uriParameters);
            var responseMessage = this.client.GetAsync(requestUri.ToString()).Result;
            responseMessage.EnsureSuccessStatusCode();
            var text = responseMessage.Content.ReadAsStringAsync().Result;
            return JsonConvert.DeserializeObject<Newtonsoft.Json.Linq.JObject>(text);
        }
        
        /// <summary>
        /// 
        /// GET api/SuperDemo/AnonymousObject
        /// </summary>
        public async Task<Newtonsoft.Json.Linq.JObject> GetAnonymousObjectAsync()
        {
            var template = new System.UriTemplate("api/SuperDemo/AnonymousObject");
            var uriParameters = new System.Collections.Specialized.NameValueCollection();
            var requestUri = template.BindByName(this.baseUri, uriParameters);
            var responseMessage = await client.GetAsync(requestUri.ToString());
            responseMessage.EnsureSuccessStatusCode();
            var text = await responseMessage.Content.ReadAsStringAsync();
            return JsonConvert.DeserializeObject<Newtonsoft.Json.Linq.JObject>(text);
        }
        
        /// <summary>
        /// 
        /// GET api/SuperDemo/AnonymousObject
        /// </summary>
        public Newtonsoft.Json.Linq.JObject GetAnonymousObject()
        {
            var template = new System.UriTemplate("api/SuperDemo/AnonymousObject");
            var uriParameters = new System.Collections.Specialized.NameValueCollection();
            var requestUri = template.BindByName(this.baseUri, uriParameters);
            var responseMessage = this.client.GetAsync(requestUri.ToString()).Result;
            responseMessage.EnsureSuccessStatusCode();
            var text = responseMessage.Content.ReadAsStringAsync().Result;
            return JsonConvert.DeserializeObject<Newtonsoft.Json.Linq.JObject>(text);
        }
        
        /// <summary>
        /// 
        /// POST api/SuperDemo/AnonymousObject
        /// </summary>
        public async Task<Newtonsoft.Json.Linq.JObject> PostAnonymousObjectAsync(Newtonsoft.Json.Linq.JObject obj)
        {
            var requestUri = new System.Uri(this.baseUri, "api/SuperDemo/AnonymousObject");
            var responseMessage = await client.PostAsJsonAsync(requestUri.ToString(), obj);
            responseMessage.EnsureSuccessStatusCode();
            var text = await responseMessage.Content.ReadAsStringAsync();
            return JsonConvert.DeserializeObject<Newtonsoft.Json.Linq.JObject>(text);
        }
        
        /// <summary>
        /// 
        /// POST api/SuperDemo/AnonymousObject
        /// </summary>
        public Newtonsoft.Json.Linq.JObject PostAnonymousObject(Newtonsoft.Json.Linq.JObject obj)
        {
            var requestUri = new System.Uri(this.baseUri, "api/SuperDemo/AnonymousObject");
            var responseMessage = this.client.PostAsJsonAsync(requestUri.ToString(), obj).Result;
            responseMessage.EnsureSuccessStatusCode();
            var text = responseMessage.Content.ReadAsStringAsync().Result;
            return JsonConvert.DeserializeObject<Newtonsoft.Json.Linq.JObject>(text);
        }
        
        /// <summary>
        /// 
        /// GET api/SuperDemo/StringStringDic
        /// </summary>
        public async Task<System.Collections.Generic.Dictionary<string, string>> GetDictionaryAsync()
        {
            var template = new System.UriTemplate("api/SuperDemo/StringStringDic");
            var uriParameters = new System.Collections.Specialized.NameValueCollection();
            var requestUri = template.BindByName(this.baseUri, uriParameters);
            var responseMessage = await client.GetAsync(requestUri.ToString());
            responseMessage.EnsureSuccessStatusCode();
            var text = await responseMessage.Content.ReadAsStringAsync();
            return JsonConvert.DeserializeObject<System.Collections.Generic.Dictionary<string, string>>(text);
        }
        
        /// <summary>
        /// 
        /// GET api/SuperDemo/StringStringDic
        /// </summary>
        public System.Collections.Generic.Dictionary<string, string> GetDictionary()
        {
            var template = new System.UriTemplate("api/SuperDemo/StringStringDic");
            var uriParameters = new System.Collections.Specialized.NameValueCollection();
            var requestUri = template.BindByName(this.baseUri, uriParameters);
            var responseMessage = this.client.GetAsync(requestUri.ToString()).Result;
            responseMessage.EnsureSuccessStatusCode();
            var text = responseMessage.Content.ReadAsStringAsync().Result;
            return JsonConvert.DeserializeObject<System.Collections.Generic.Dictionary<string, string>>(text);
        }
        
        /// <summary>
        /// 
        /// GET api/SuperDemo/StringPersonDic
        /// </summary>
        public async Task<System.Collections.Generic.Dictionary<string, DemoWebApi.DemoData.Client.Person>> GetDictionaryOfPeopleAsync()
        {
            var template = new System.UriTemplate("api/SuperDemo/StringPersonDic");
            var uriParameters = new System.Collections.Specialized.NameValueCollection();
            var requestUri = template.BindByName(this.baseUri, uriParameters);
            var responseMessage = await client.GetAsync(requestUri.ToString());
            responseMessage.EnsureSuccessStatusCode();
            var text = await responseMessage.Content.ReadAsStringAsync();
            return JsonConvert.DeserializeObject<System.Collections.Generic.Dictionary<string, DemoWebApi.DemoData.Client.Person>>(text);
        }
        
        /// <summary>
        /// 
        /// GET api/SuperDemo/StringPersonDic
        /// </summary>
        public System.Collections.Generic.Dictionary<string, DemoWebApi.DemoData.Client.Person> GetDictionaryOfPeople()
        {
            var template = new System.UriTemplate("api/SuperDemo/StringPersonDic");
            var uriParameters = new System.Collections.Specialized.NameValueCollection();
            var requestUri = template.BindByName(this.baseUri, uriParameters);
            var responseMessage = this.client.GetAsync(requestUri.ToString()).Result;
            responseMessage.EnsureSuccessStatusCode();
            var text = responseMessage.Content.ReadAsStringAsync().Result;
            return JsonConvert.DeserializeObject<System.Collections.Generic.Dictionary<string, DemoWebApi.DemoData.Client.Person>>(text);
        }
        
        /// <summary>
        /// 
        /// POST api/SuperDemo/StringPersonDic
        /// </summary>
        public async Task<int> PostDictionaryAsync(System.Collections.Generic.Dictionary<string, DemoWebApi.DemoData.Client.Person> dic)
        {
            var requestUri = new System.Uri(this.baseUri, "api/SuperDemo/StringPersonDic");
            var responseMessage = await client.PostAsJsonAsync(requestUri.ToString(), dic);
            responseMessage.EnsureSuccessStatusCode();
            var text = await responseMessage.Content.ReadAsStringAsync();
            return System.Int32.Parse(text);
        }
        
        /// <summary>
        /// 
        /// POST api/SuperDemo/StringPersonDic
        /// </summary>
        public int PostDictionary(System.Collections.Generic.Dictionary<string, DemoWebApi.DemoData.Client.Person> dic)
        {
            var requestUri = new System.Uri(this.baseUri, "api/SuperDemo/StringPersonDic");
            var responseMessage = this.client.PostAsJsonAsync(requestUri.ToString(), dic).Result;
            responseMessage.EnsureSuccessStatusCode();
            var text = responseMessage.Content.ReadAsStringAsync().Result;
            return System.Int32.Parse(text);
        }
        
        /// <summary>
        /// 
        /// GET api/SuperDemo/KeyValuePair
        /// </summary>
        public async Task<System.Collections.Generic.KeyValuePair<string, DemoWebApi.DemoData.Client.Person>> GetKeyhValuePairAsync()
        {
            var template = new System.UriTemplate("api/SuperDemo/KeyValuePair");
            var uriParameters = new System.Collections.Specialized.NameValueCollection();
            var requestUri = template.BindByName(this.baseUri, uriParameters);
            var responseMessage = await client.GetAsync(requestUri.ToString());
            responseMessage.EnsureSuccessStatusCode();
            var text = await responseMessage.Content.ReadAsStringAsync();
            return JsonConvert.DeserializeObject<System.Collections.Generic.KeyValuePair<string, DemoWebApi.DemoData.Client.Person>>(text);
        }
        
        /// <summary>
        /// 
        /// GET api/SuperDemo/KeyValuePair
        /// </summary>
        public System.Collections.Generic.KeyValuePair<string, DemoWebApi.DemoData.Client.Person> GetKeyhValuePair()
        {
            var template = new System.UriTemplate("api/SuperDemo/KeyValuePair");
            var uriParameters = new System.Collections.Specialized.NameValueCollection();
            var requestUri = template.BindByName(this.baseUri, uriParameters);
            var responseMessage = this.client.GetAsync(requestUri.ToString()).Result;
            responseMessage.EnsureSuccessStatusCode();
            var text = responseMessage.Content.ReadAsStringAsync().Result;
            return JsonConvert.DeserializeObject<System.Collections.Generic.KeyValuePair<string, DemoWebApi.DemoData.Client.Person>>(text);
        }
        
        /// <summary>
        /// 
        /// GET api/SuperDemo/ICollection
        /// </summary>
        public async Task<DemoWebApi.DemoData.Client.Person[]> GetICollectionAsync()
        {
            var template = new System.UriTemplate("api/SuperDemo/ICollection");
            var uriParameters = new System.Collections.Specialized.NameValueCollection();
            var requestUri = template.BindByName(this.baseUri, uriParameters);
            var responseMessage = await client.GetAsync(requestUri.ToString());
            responseMessage.EnsureSuccessStatusCode();
            var text = await responseMessage.Content.ReadAsStringAsync();
            return JsonConvert.DeserializeObject<DemoWebApi.DemoData.Client.Person[]>(text);
        }
        
        /// <summary>
        /// 
        /// GET api/SuperDemo/ICollection
        /// </summary>
        public DemoWebApi.DemoData.Client.Person[] GetICollection()
        {
            var template = new System.UriTemplate("api/SuperDemo/ICollection");
            var uriParameters = new System.Collections.Specialized.NameValueCollection();
            var requestUri = template.BindByName(this.baseUri, uriParameters);
            var responseMessage = this.client.GetAsync(requestUri.ToString()).Result;
            responseMessage.EnsureSuccessStatusCode();
            var text = responseMessage.Content.ReadAsStringAsync().Result;
            return JsonConvert.DeserializeObject<DemoWebApi.DemoData.Client.Person[]>(text);
        }
        
        /// <summary>
        /// 
        /// GET api/SuperDemo/IList
        /// </summary>
        public async Task<DemoWebApi.DemoData.Client.Person[]> GetIListAsync()
        {
            var template = new System.UriTemplate("api/SuperDemo/IList");
            var uriParameters = new System.Collections.Specialized.NameValueCollection();
            var requestUri = template.BindByName(this.baseUri, uriParameters);
            var responseMessage = await client.GetAsync(requestUri.ToString());
            responseMessage.EnsureSuccessStatusCode();
            var text = await responseMessage.Content.ReadAsStringAsync();
            return JsonConvert.DeserializeObject<DemoWebApi.DemoData.Client.Person[]>(text);
        }
        
        /// <summary>
        /// 
        /// GET api/SuperDemo/IList
        /// </summary>
        public DemoWebApi.DemoData.Client.Person[] GetIList()
        {
            var template = new System.UriTemplate("api/SuperDemo/IList");
            var uriParameters = new System.Collections.Specialized.NameValueCollection();
            var requestUri = template.BindByName(this.baseUri, uriParameters);
            var responseMessage = this.client.GetAsync(requestUri.ToString()).Result;
            responseMessage.EnsureSuccessStatusCode();
            var text = responseMessage.Content.ReadAsStringAsync().Result;
            return JsonConvert.DeserializeObject<DemoWebApi.DemoData.Client.Person[]>(text);
        }
        
        /// <summary>
        /// 
        /// GET api/SuperDemo/IReadOnlyList
        /// </summary>
        public async Task<DemoWebApi.DemoData.Client.Person[]> GetIReadOnlyListAsync()
        {
            var template = new System.UriTemplate("api/SuperDemo/IReadOnlyList");
            var uriParameters = new System.Collections.Specialized.NameValueCollection();
            var requestUri = template.BindByName(this.baseUri, uriParameters);
            var responseMessage = await client.GetAsync(requestUri.ToString());
            responseMessage.EnsureSuccessStatusCode();
            var text = await responseMessage.Content.ReadAsStringAsync();
            return JsonConvert.DeserializeObject<DemoWebApi.DemoData.Client.Person[]>(text);
        }
        
        /// <summary>
        /// 
        /// GET api/SuperDemo/IReadOnlyList
        /// </summary>
        public DemoWebApi.DemoData.Client.Person[] GetIReadOnlyList()
        {
            var template = new System.UriTemplate("api/SuperDemo/IReadOnlyList");
            var uriParameters = new System.Collections.Specialized.NameValueCollection();
            var requestUri = template.BindByName(this.baseUri, uriParameters);
            var responseMessage = this.client.GetAsync(requestUri.ToString()).Result;
            responseMessage.EnsureSuccessStatusCode();
            var text = responseMessage.Content.ReadAsStringAsync().Result;
            return JsonConvert.DeserializeObject<DemoWebApi.DemoData.Client.Person[]>(text);
        }
        
        /// <summary>
        /// 
        /// GET api/SuperDemo/IReadOnlyCollection
        /// </summary>
        public async Task<DemoWebApi.DemoData.Client.Person[]> GetIReadOnlyCollectionAsync()
        {
            var template = new System.UriTemplate("api/SuperDemo/IReadOnlyCollection");
            var uriParameters = new System.Collections.Specialized.NameValueCollection();
            var requestUri = template.BindByName(this.baseUri, uriParameters);
            var responseMessage = await client.GetAsync(requestUri.ToString());
            responseMessage.EnsureSuccessStatusCode();
            var text = await responseMessage.Content.ReadAsStringAsync();
            return JsonConvert.DeserializeObject<DemoWebApi.DemoData.Client.Person[]>(text);
        }
        
        /// <summary>
        /// 
        /// GET api/SuperDemo/IReadOnlyCollection
        /// </summary>
        public DemoWebApi.DemoData.Client.Person[] GetIReadOnlyCollection()
        {
            var template = new System.UriTemplate("api/SuperDemo/IReadOnlyCollection");
            var uriParameters = new System.Collections.Specialized.NameValueCollection();
            var requestUri = template.BindByName(this.baseUri, uriParameters);
            var responseMessage = this.client.GetAsync(requestUri.ToString()).Result;
            responseMessage.EnsureSuccessStatusCode();
            var text = responseMessage.Content.ReadAsStringAsync().Result;
            return JsonConvert.DeserializeObject<DemoWebApi.DemoData.Client.Person[]>(text);
        }
        
        /// <summary>
        /// 
        /// GET api/SuperDemo/List
        /// </summary>
        public async Task<DemoWebApi.DemoData.Client.Person[]> GetListAsync()
        {
            var template = new System.UriTemplate("api/SuperDemo/List");
            var uriParameters = new System.Collections.Specialized.NameValueCollection();
            var requestUri = template.BindByName(this.baseUri, uriParameters);
            var responseMessage = await client.GetAsync(requestUri.ToString());
            responseMessage.EnsureSuccessStatusCode();
            var text = await responseMessage.Content.ReadAsStringAsync();
            return JsonConvert.DeserializeObject<DemoWebApi.DemoData.Client.Person[]>(text);
        }
        
        /// <summary>
        /// 
        /// GET api/SuperDemo/List
        /// </summary>
        public DemoWebApi.DemoData.Client.Person[] GetList()
        {
            var template = new System.UriTemplate("api/SuperDemo/List");
            var uriParameters = new System.Collections.Specialized.NameValueCollection();
            var requestUri = template.BindByName(this.baseUri, uriParameters);
            var responseMessage = this.client.GetAsync(requestUri.ToString()).Result;
            responseMessage.EnsureSuccessStatusCode();
            var text = responseMessage.Content.ReadAsStringAsync().Result;
            return JsonConvert.DeserializeObject<DemoWebApi.DemoData.Client.Person[]>(text);
        }
        
        /// <summary>
        /// 
        /// GET api/SuperDemo/Collection
        /// </summary>
        public async Task<DemoWebApi.DemoData.Client.Person[]> GetCollectionAsync()
        {
            var template = new System.UriTemplate("api/SuperDemo/Collection");
            var uriParameters = new System.Collections.Specialized.NameValueCollection();
            var requestUri = template.BindByName(this.baseUri, uriParameters);
            var responseMessage = await client.GetAsync(requestUri.ToString());
            responseMessage.EnsureSuccessStatusCode();
            var text = await responseMessage.Content.ReadAsStringAsync();
            return JsonConvert.DeserializeObject<DemoWebApi.DemoData.Client.Person[]>(text);
        }
        
        /// <summary>
        /// 
        /// GET api/SuperDemo/Collection
        /// </summary>
        public DemoWebApi.DemoData.Client.Person[] GetCollection()
        {
            var template = new System.UriTemplate("api/SuperDemo/Collection");
            var uriParameters = new System.Collections.Specialized.NameValueCollection();
            var requestUri = template.BindByName(this.baseUri, uriParameters);
            var responseMessage = this.client.GetAsync(requestUri.ToString()).Result;
            responseMessage.EnsureSuccessStatusCode();
            var text = responseMessage.Content.ReadAsStringAsync().Result;
            return JsonConvert.DeserializeObject<DemoWebApi.DemoData.Client.Person[]>(text);
        }
        
        /// <summary>
        /// 
        /// POST api/SuperDemo/ICollection
        /// </summary>
        public async Task<int> PostICollectionAsync(DemoWebApi.DemoData.Client.Person[] list)
        {
            var requestUri = new System.Uri(this.baseUri, "api/SuperDemo/ICollection");
            var responseMessage = await client.PostAsJsonAsync(requestUri.ToString(), list);
            responseMessage.EnsureSuccessStatusCode();
            var text = await responseMessage.Content.ReadAsStringAsync();
            return System.Int32.Parse(text);
        }
        
        /// <summary>
        /// 
        /// POST api/SuperDemo/ICollection
        /// </summary>
        public int PostICollection(DemoWebApi.DemoData.Client.Person[] list)
        {
            var requestUri = new System.Uri(this.baseUri, "api/SuperDemo/ICollection");
            var responseMessage = this.client.PostAsJsonAsync(requestUri.ToString(), list).Result;
            responseMessage.EnsureSuccessStatusCode();
            var text = responseMessage.Content.ReadAsStringAsync().Result;
            return System.Int32.Parse(text);
        }
        
        /// <summary>
        /// 
        /// POST api/SuperDemo/IList
        /// </summary>
        public async Task<int> PostIListAsync(DemoWebApi.DemoData.Client.Person[] list)
        {
            var requestUri = new System.Uri(this.baseUri, "api/SuperDemo/IList");
            var responseMessage = await client.PostAsJsonAsync(requestUri.ToString(), list);
            responseMessage.EnsureSuccessStatusCode();
            var text = await responseMessage.Content.ReadAsStringAsync();
            return System.Int32.Parse(text);
        }
        
        /// <summary>
        /// 
        /// POST api/SuperDemo/IList
        /// </summary>
        public int PostIList(DemoWebApi.DemoData.Client.Person[] list)
        {
            var requestUri = new System.Uri(this.baseUri, "api/SuperDemo/IList");
            var responseMessage = this.client.PostAsJsonAsync(requestUri.ToString(), list).Result;
            responseMessage.EnsureSuccessStatusCode();
            var text = responseMessage.Content.ReadAsStringAsync().Result;
            return System.Int32.Parse(text);
        }
        
        /// <summary>
        /// 
        /// POST api/SuperDemo/IReadOnlyList
        /// </summary>
        public async Task<int> PostIReadOnlyListAsync(DemoWebApi.DemoData.Client.Person[] list)
        {
            var requestUri = new System.Uri(this.baseUri, "api/SuperDemo/IReadOnlyList");
            var responseMessage = await client.PostAsJsonAsync(requestUri.ToString(), list);
            responseMessage.EnsureSuccessStatusCode();
            var text = await responseMessage.Content.ReadAsStringAsync();
            return System.Int32.Parse(text);
        }
        
        /// <summary>
        /// 
        /// POST api/SuperDemo/IReadOnlyList
        /// </summary>
        public int PostIReadOnlyList(DemoWebApi.DemoData.Client.Person[] list)
        {
            var requestUri = new System.Uri(this.baseUri, "api/SuperDemo/IReadOnlyList");
            var responseMessage = this.client.PostAsJsonAsync(requestUri.ToString(), list).Result;
            responseMessage.EnsureSuccessStatusCode();
            var text = responseMessage.Content.ReadAsStringAsync().Result;
            return System.Int32.Parse(text);
        }
        
        /// <summary>
        /// 
        /// POST api/SuperDemo/IReadOnlyCollection
        /// </summary>
        public async Task<int> PostIReadOnlyCollectionAsync(DemoWebApi.DemoData.Client.Person[] list)
        {
            var requestUri = new System.Uri(this.baseUri, "api/SuperDemo/IReadOnlyCollection");
            var responseMessage = await client.PostAsJsonAsync(requestUri.ToString(), list);
            responseMessage.EnsureSuccessStatusCode();
            var text = await responseMessage.Content.ReadAsStringAsync();
            return System.Int32.Parse(text);
        }
        
        /// <summary>
        /// 
        /// POST api/SuperDemo/IReadOnlyCollection
        /// </summary>
        public int PostIReadOnlyCollection(DemoWebApi.DemoData.Client.Person[] list)
        {
            var requestUri = new System.Uri(this.baseUri, "api/SuperDemo/IReadOnlyCollection");
            var responseMessage = this.client.PostAsJsonAsync(requestUri.ToString(), list).Result;
            responseMessage.EnsureSuccessStatusCode();
            var text = responseMessage.Content.ReadAsStringAsync().Result;
            return System.Int32.Parse(text);
        }
        
        /// <summary>
        /// 
        /// POST api/SuperDemo/List
        /// </summary>
        public async Task<int> PostListAsync(DemoWebApi.DemoData.Client.Person[] list)
        {
            var requestUri = new System.Uri(this.baseUri, "api/SuperDemo/List");
            var responseMessage = await client.PostAsJsonAsync(requestUri.ToString(), list);
            responseMessage.EnsureSuccessStatusCode();
            var text = await responseMessage.Content.ReadAsStringAsync();
            return System.Int32.Parse(text);
        }
        
        /// <summary>
        /// 
        /// POST api/SuperDemo/List
        /// </summary>
        public int PostList(DemoWebApi.DemoData.Client.Person[] list)
        {
            var requestUri = new System.Uri(this.baseUri, "api/SuperDemo/List");
            var responseMessage = this.client.PostAsJsonAsync(requestUri.ToString(), list).Result;
            responseMessage.EnsureSuccessStatusCode();
            var text = responseMessage.Content.ReadAsStringAsync().Result;
            return System.Int32.Parse(text);
        }
        
        /// <summary>
        /// 
        /// POST api/SuperDemo/Collection
        /// </summary>
        public async Task<int> PostCollectionAsync(DemoWebApi.DemoData.Client.Person[] list)
        {
            var requestUri = new System.Uri(this.baseUri, "api/SuperDemo/Collection");
            var responseMessage = await client.PostAsJsonAsync(requestUri.ToString(), list);
            responseMessage.EnsureSuccessStatusCode();
            var text = await responseMessage.Content.ReadAsStringAsync();
            return System.Int32.Parse(text);
        }
        
        /// <summary>
        /// 
        /// POST api/SuperDemo/Collection
        /// </summary>
        public int PostCollection(DemoWebApi.DemoData.Client.Person[] list)
        {
            var requestUri = new System.Uri(this.baseUri, "api/SuperDemo/Collection");
            var responseMessage = this.client.PostAsJsonAsync(requestUri.ToString(), list).Result;
            responseMessage.EnsureSuccessStatusCode();
            var text = responseMessage.Content.ReadAsStringAsync().Result;
            return System.Int32.Parse(text);
        }
        
        /// <summary>
        /// 
        /// GET api/SuperDemo/Handy
        /// </summary>
        public async Task<DemoWebApi.Models.Client.Handy> GetHandyAsync(DemoWebApi.Models.Client.Handy handy)
        {
            var template = new System.UriTemplate("api/SuperDemo/Handy");
            var uriParameters = new System.Collections.Specialized.NameValueCollection();
            uriParameters.Add("handy", handy.ToString());
            var requestUri = template.BindByName(this.baseUri, uriParameters);
            var responseMessage = await client.GetAsync(requestUri.ToString());
            responseMessage.EnsureSuccessStatusCode();
            var text = await responseMessage.Content.ReadAsStringAsync();
            return JsonConvert.DeserializeObject<DemoWebApi.Models.Client.Handy>(text);
        }
        
        /// <summary>
        /// 
        /// GET api/SuperDemo/Handy
        /// </summary>
        public DemoWebApi.Models.Client.Handy GetHandy(DemoWebApi.Models.Client.Handy handy)
        {
            var template = new System.UriTemplate("api/SuperDemo/Handy");
            var uriParameters = new System.Collections.Specialized.NameValueCollection();
            uriParameters.Add("handy", handy.ToString());
            var requestUri = template.BindByName(this.baseUri, uriParameters);
            var responseMessage = this.client.GetAsync(requestUri.ToString()).Result;
            responseMessage.EnsureSuccessStatusCode();
            var text = responseMessage.Content.ReadAsStringAsync().Result;
            return JsonConvert.DeserializeObject<DemoWebApi.Models.Client.Handy>(text);
        }
    }
    
    public partial class Entities
    {
        
        private System.Net.Http.HttpClient client;
        
        private System.Uri baseUri;
        
        public Entities(System.Net.Http.HttpClient client, System.Uri baseUri)
        {
            if (client == null)
                throw new ArgumentNullException("client", "Null HttpClient.");

            if (baseUri == null)
                throw new ArgumentNullException("baseUri", "Null baseUri");

            this.client = client;
            this.baseUri = baseUri;
        }
        
        /// <summary>
        /// 
        /// PUT api/SuperDemo/link?id={id}&relationship={relationship}
        /// </summary>
        public async Task<bool> LinkPersonAsync(long id, string relationship, DemoWebApi.DemoData.Client.Person person)
        {
            var template = new System.UriTemplate("api/SuperDemo/link?id={id}&relationship={relationship}");
            var uriParameters = new System.Collections.Specialized.NameValueCollection();
            uriParameters.Add("id", id.ToString());
            uriParameters.Add("relationship", relationship);
            var requestUri = template.BindByName(this.baseUri, uriParameters);
            var responseMessage = await client.PutAsJsonAsync(requestUri.ToString(), person);
            responseMessage.EnsureSuccessStatusCode();
            var text = await responseMessage.Content.ReadAsStringAsync();
            return System.Boolean.Parse(text);
        }
        
        /// <summary>
        /// 
        /// PUT api/SuperDemo/link?id={id}&relationship={relationship}
        /// </summary>
        public bool LinkPerson(long id, string relationship, DemoWebApi.DemoData.Client.Person person)
        {
            var template = new System.UriTemplate("api/SuperDemo/link?id={id}&relationship={relationship}");
            var uriParameters = new System.Collections.Specialized.NameValueCollection();
            uriParameters.Add("id", id.ToString());
            uriParameters.Add("relationship", relationship);
            var requestUri = template.BindByName(this.baseUri, uriParameters);
            var responseMessage = this.client.PutAsJsonAsync(requestUri.ToString(), person).Result;
            responseMessage.EnsureSuccessStatusCode();
            var text = responseMessage.Content.ReadAsStringAsync().Result;
            return System.Boolean.Parse(text);
        }
        
        /// <summary>
        /// 
        /// GET api/SuperDemo/Company?id={id}
        /// </summary>
        public async Task<DemoWebApi.DemoData.Client.Company> GetCompanyAsync(long id)
        {
            var template = new System.UriTemplate("api/SuperDemo/Company?id={id}");
            var uriParameters = new System.Collections.Specialized.NameValueCollection();
            uriParameters.Add("id", id.ToString());
            var requestUri = template.BindByName(this.baseUri, uriParameters);
            var responseMessage = await client.GetAsync(requestUri.ToString());
            responseMessage.EnsureSuccessStatusCode();
            var text = await responseMessage.Content.ReadAsStringAsync();
            return JsonConvert.DeserializeObject<DemoWebApi.DemoData.Client.Company>(text);
        }
        
        /// <summary>
        /// 
        /// GET api/SuperDemo/Company?id={id}
        /// </summary>
        public DemoWebApi.DemoData.Client.Company GetCompany(long id)
        {
            var template = new System.UriTemplate("api/SuperDemo/Company?id={id}");
            var uriParameters = new System.Collections.Specialized.NameValueCollection();
            uriParameters.Add("id", id.ToString());
            var requestUri = template.BindByName(this.baseUri, uriParameters);
            var responseMessage = this.client.GetAsync(requestUri.ToString()).Result;
            responseMessage.EnsureSuccessStatusCode();
            var text = responseMessage.Content.ReadAsStringAsync().Result;
            return JsonConvert.DeserializeObject<DemoWebApi.DemoData.Client.Company>(text);
        }
        
        /// <summary>
        /// Get a person
        /// GET api/Entities/{id}
        /// </summary>
        /// <param name="id">unique id of that guy</param>
        /// <returns>person in db</returns>
        public async Task<DemoWebApi.DemoData.Client.Person> GetPersonAsync(long id)
        {
            var template = new System.UriTemplate("api/Entities/{id}");
            var uriParameters = new System.Collections.Specialized.NameValueCollection();
            uriParameters.Add("id", id.ToString());
            var requestUri = template.BindByName(this.baseUri, uriParameters);
            var responseMessage = await client.GetAsync(requestUri.ToString());
            responseMessage.EnsureSuccessStatusCode();
            var text = await responseMessage.Content.ReadAsStringAsync();
            return JsonConvert.DeserializeObject<DemoWebApi.DemoData.Client.Person>(text);
        }
        
        /// <summary>
        /// Get a person
        /// GET api/Entities/{id}
        /// </summary>
        /// <param name="id">unique id of that guy</param>
        /// <returns>person in db</returns>
        public DemoWebApi.DemoData.Client.Person GetPerson(long id)
        {
            var template = new System.UriTemplate("api/Entities/{id}");
            var uriParameters = new System.Collections.Specialized.NameValueCollection();
            uriParameters.Add("id", id.ToString());
            var requestUri = template.BindByName(this.baseUri, uriParameters);
            var responseMessage = this.client.GetAsync(requestUri.ToString()).Result;
            responseMessage.EnsureSuccessStatusCode();
            var text = responseMessage.Content.ReadAsStringAsync().Result;
            return JsonConvert.DeserializeObject<DemoWebApi.DemoData.Client.Person>(text);
        }
        
        /// <summary>
        /// 
        /// POST api/Entities
        /// </summary>
        public async Task<long> CreatePersonAsync(DemoWebApi.DemoData.Client.Person person)
        {
            var requestUri = new System.Uri(this.baseUri, "api/Entities");
            var responseMessage = await client.PostAsJsonAsync(requestUri.ToString(), person);
            responseMessage.EnsureSuccessStatusCode();
            var text = await responseMessage.Content.ReadAsStringAsync();
            return System.Int64.Parse(text);
        }
        
        /// <summary>
        /// 
        /// POST api/Entities
        /// </summary>
        public long CreatePerson(DemoWebApi.DemoData.Client.Person person)
        {
            var requestUri = new System.Uri(this.baseUri, "api/Entities");
            var responseMessage = this.client.PostAsJsonAsync(requestUri.ToString(), person).Result;
            responseMessage.EnsureSuccessStatusCode();
            var text = responseMessage.Content.ReadAsStringAsync().Result;
            return System.Int64.Parse(text);
        }
        
        /// <summary>
        /// 
        /// PUT api/Entities
        /// </summary>
        public async Task UpdatePersonAsync(DemoWebApi.DemoData.Client.Person person)
        {
            var requestUri = new System.Uri(this.baseUri, "api/Entities");
            var responseMessage = await client.PutAsJsonAsync(requestUri.ToString(), person);
            responseMessage.EnsureSuccessStatusCode();
        }
        
        /// <summary>
        /// 
        /// PUT api/Entities
        /// </summary>
        public void UpdatePerson(DemoWebApi.DemoData.Client.Person person)
        {
            var requestUri = new System.Uri(this.baseUri, "api/Entities");
            var responseMessage = this.client.PutAsJsonAsync(requestUri.ToString(), person).Result;
            responseMessage.EnsureSuccessStatusCode();
        }
        
        /// <summary>
        /// 
        /// DELETE api/Entities/{id}
        /// </summary>
        public async Task DeleteAsync(long id)
        {
            var template = new System.UriTemplate("api/Entities/{id}");
            var uriParameters = new System.Collections.Specialized.NameValueCollection();
            uriParameters.Add("id", id.ToString());
            var requestUri = template.BindByName(this.baseUri, uriParameters);
            var responseMessage = await client.DeleteAsync(requestUri.ToString());
            responseMessage.EnsureSuccessStatusCode();
        }
        
        /// <summary>
        /// 
        /// DELETE api/Entities/{id}
        /// </summary>
        public void Delete(long id)
        {
            var template = new System.UriTemplate("api/Entities/{id}");
            var uriParameters = new System.Collections.Specialized.NameValueCollection();
            uriParameters.Add("id", id.ToString());
            var requestUri = template.BindByName(this.baseUri, uriParameters);
            var responseMessage = this.client.DeleteAsync(requestUri.ToString()).Result;
            responseMessage.EnsureSuccessStatusCode();
        }
    }
    
    public partial class Tuple
    {
        
        private System.Net.Http.HttpClient client;
        
        private System.Uri baseUri;
        
        public Tuple(System.Net.Http.HttpClient client, System.Uri baseUri)
        {
            if (client == null)
                throw new ArgumentNullException("client", "Null HttpClient.");

            if (baseUri == null)
                throw new ArgumentNullException("baseUri", "Null baseUri");

            this.client = client;
            this.baseUri = baseUri;
        }
        
        /// <summary>
        /// 
        /// POST api/Tuple/PersonCompany1
        /// </summary>
        public async Task<DemoWebApi.DemoData.Client.Person> LinkPersonCompany1Async(System.Tuple<DemoWebApi.DemoData.Client.Person, DemoWebApi.DemoData.Client.Company> peopleAndCompany)
        {
            var requestUri = new System.Uri(this.baseUri, "api/Tuple/PersonCompany1");
            var responseMessage = await client.PostAsJsonAsync(requestUri.ToString(), peopleAndCompany);
            responseMessage.EnsureSuccessStatusCode();
            var text = await responseMessage.Content.ReadAsStringAsync();
            return JsonConvert.DeserializeObject<DemoWebApi.DemoData.Client.Person>(text);
        }
        
        /// <summary>
        /// 
        /// POST api/Tuple/PersonCompany1
        /// </summary>
        public DemoWebApi.DemoData.Client.Person LinkPersonCompany1(System.Tuple<DemoWebApi.DemoData.Client.Person, DemoWebApi.DemoData.Client.Company> peopleAndCompany)
        {
            var requestUri = new System.Uri(this.baseUri, "api/Tuple/PersonCompany1");
            var responseMessage = this.client.PostAsJsonAsync(requestUri.ToString(), peopleAndCompany).Result;
            responseMessage.EnsureSuccessStatusCode();
            var text = responseMessage.Content.ReadAsStringAsync().Result;
            return JsonConvert.DeserializeObject<DemoWebApi.DemoData.Client.Person>(text);
        }
        
        /// <summary>
        /// 
        /// POST api/Tuple/PeopleCompany2
        /// </summary>
        public async Task<DemoWebApi.DemoData.Client.Person> LinkPeopleCompany2Async(System.Tuple<DemoWebApi.DemoData.Client.Person, DemoWebApi.DemoData.Client.Company> peopleAndCompany)
        {
            var requestUri = new System.Uri(this.baseUri, "api/Tuple/PeopleCompany2");
            var responseMessage = await client.PostAsJsonAsync(requestUri.ToString(), peopleAndCompany);
            responseMessage.EnsureSuccessStatusCode();
            var text = await responseMessage.Content.ReadAsStringAsync();
            return JsonConvert.DeserializeObject<DemoWebApi.DemoData.Client.Person>(text);
        }
        
        /// <summary>
        /// 
        /// POST api/Tuple/PeopleCompany2
        /// </summary>
        public DemoWebApi.DemoData.Client.Person LinkPeopleCompany2(System.Tuple<DemoWebApi.DemoData.Client.Person, DemoWebApi.DemoData.Client.Company> peopleAndCompany)
        {
            var requestUri = new System.Uri(this.baseUri, "api/Tuple/PeopleCompany2");
            var responseMessage = this.client.PostAsJsonAsync(requestUri.ToString(), peopleAndCompany).Result;
            responseMessage.EnsureSuccessStatusCode();
            var text = responseMessage.Content.ReadAsStringAsync().Result;
            return JsonConvert.DeserializeObject<DemoWebApi.DemoData.Client.Person>(text);
        }
        
        /// <summary>
        /// 
        /// POST api/Tuple/PeopleCompany3
        /// </summary>
        public async Task<DemoWebApi.DemoData.Client.Person> LinkPeopleCompany3Async(System.Tuple<DemoWebApi.DemoData.Client.Person, DemoWebApi.DemoData.Client.Person, DemoWebApi.DemoData.Client.Company> peopleAndCompany)
        {
            var requestUri = new System.Uri(this.baseUri, "api/Tuple/PeopleCompany3");
            var responseMessage = await client.PostAsJsonAsync(requestUri.ToString(), peopleAndCompany);
            responseMessage.EnsureSuccessStatusCode();
            var text = await responseMessage.Content.ReadAsStringAsync();
            return JsonConvert.DeserializeObject<DemoWebApi.DemoData.Client.Person>(text);
        }
        
        /// <summary>
        /// 
        /// POST api/Tuple/PeopleCompany3
        /// </summary>
        public DemoWebApi.DemoData.Client.Person LinkPeopleCompany3(System.Tuple<DemoWebApi.DemoData.Client.Person, DemoWebApi.DemoData.Client.Person, DemoWebApi.DemoData.Client.Company> peopleAndCompany)
        {
            var requestUri = new System.Uri(this.baseUri, "api/Tuple/PeopleCompany3");
            var responseMessage = this.client.PostAsJsonAsync(requestUri.ToString(), peopleAndCompany).Result;
            responseMessage.EnsureSuccessStatusCode();
            var text = responseMessage.Content.ReadAsStringAsync().Result;
            return JsonConvert.DeserializeObject<DemoWebApi.DemoData.Client.Person>(text);
        }
        
        /// <summary>
        /// 
        /// POST api/Tuple/PeopleCompany4
        /// </summary>
        public async Task<DemoWebApi.DemoData.Client.Person> LinkPeopleCompany4Async(System.Tuple<DemoWebApi.DemoData.Client.Person, DemoWebApi.DemoData.Client.Person, DemoWebApi.DemoData.Client.Person, DemoWebApi.DemoData.Client.Company> peopleAndCompany)
        {
            var requestUri = new System.Uri(this.baseUri, "api/Tuple/PeopleCompany4");
            var responseMessage = await client.PostAsJsonAsync(requestUri.ToString(), peopleAndCompany);
            responseMessage.EnsureSuccessStatusCode();
            var text = await responseMessage.Content.ReadAsStringAsync();
            return JsonConvert.DeserializeObject<DemoWebApi.DemoData.Client.Person>(text);
        }
        
        /// <summary>
        /// 
        /// POST api/Tuple/PeopleCompany4
        /// </summary>
        public DemoWebApi.DemoData.Client.Person LinkPeopleCompany4(System.Tuple<DemoWebApi.DemoData.Client.Person, DemoWebApi.DemoData.Client.Person, DemoWebApi.DemoData.Client.Person, DemoWebApi.DemoData.Client.Company> peopleAndCompany)
        {
            var requestUri = new System.Uri(this.baseUri, "api/Tuple/PeopleCompany4");
            var responseMessage = this.client.PostAsJsonAsync(requestUri.ToString(), peopleAndCompany).Result;
            responseMessage.EnsureSuccessStatusCode();
            var text = responseMessage.Content.ReadAsStringAsync().Result;
            return JsonConvert.DeserializeObject<DemoWebApi.DemoData.Client.Person>(text);
        }
        
        /// <summary>
        /// 
        /// GET api/Tuple/PeopleCompany4
        /// </summary>
        public async Task<System.Tuple<DemoWebApi.DemoData.Client.Person, DemoWebApi.DemoData.Client.Person, DemoWebApi.DemoData.Client.Person, DemoWebApi.DemoData.Client.Company>> GetPeopleCompany4Async()
        {
            var template = new System.UriTemplate("api/Tuple/PeopleCompany4");
            var uriParameters = new System.Collections.Specialized.NameValueCollection();
            var requestUri = template.BindByName(this.baseUri, uriParameters);
            var responseMessage = await client.GetAsync(requestUri.ToString());
            responseMessage.EnsureSuccessStatusCode();
            var text = await responseMessage.Content.ReadAsStringAsync();
            return JsonConvert.DeserializeObject<System.Tuple<DemoWebApi.DemoData.Client.Person, DemoWebApi.DemoData.Client.Person, DemoWebApi.DemoData.Client.Person, DemoWebApi.DemoData.Client.Company>>(text);
        }
        
        /// <summary>
        /// 
        /// GET api/Tuple/PeopleCompany4
        /// </summary>
        public System.Tuple<DemoWebApi.DemoData.Client.Person, DemoWebApi.DemoData.Client.Person, DemoWebApi.DemoData.Client.Person, DemoWebApi.DemoData.Client.Company> GetPeopleCompany4()
        {
            var template = new System.UriTemplate("api/Tuple/PeopleCompany4");
            var uriParameters = new System.Collections.Specialized.NameValueCollection();
            var requestUri = template.BindByName(this.baseUri, uriParameters);
            var responseMessage = this.client.GetAsync(requestUri.ToString()).Result;
            responseMessage.EnsureSuccessStatusCode();
            var text = responseMessage.Content.ReadAsStringAsync().Result;
            return JsonConvert.DeserializeObject<System.Tuple<DemoWebApi.DemoData.Client.Person, DemoWebApi.DemoData.Client.Person, DemoWebApi.DemoData.Client.Person, DemoWebApi.DemoData.Client.Company>>(text);
        }
        
        /// <summary>
        /// 
        /// POST api/Tuple/PeopleCompany5
        /// </summary>
        public async Task<DemoWebApi.DemoData.Client.Person> LinkPeopleCompany5Async(System.Tuple<DemoWebApi.DemoData.Client.Person, DemoWebApi.DemoData.Client.Person, DemoWebApi.DemoData.Client.Person, DemoWebApi.DemoData.Client.Person, DemoWebApi.DemoData.Client.Company> peopleAndCompany)
        {
            var requestUri = new System.Uri(this.baseUri, "api/Tuple/PeopleCompany5");
            var responseMessage = await client.PostAsJsonAsync(requestUri.ToString(), peopleAndCompany);
            responseMessage.EnsureSuccessStatusCode();
            var text = await responseMessage.Content.ReadAsStringAsync();
            return JsonConvert.DeserializeObject<DemoWebApi.DemoData.Client.Person>(text);
        }
        
        /// <summary>
        /// 
        /// POST api/Tuple/PeopleCompany5
        /// </summary>
        public DemoWebApi.DemoData.Client.Person LinkPeopleCompany5(System.Tuple<DemoWebApi.DemoData.Client.Person, DemoWebApi.DemoData.Client.Person, DemoWebApi.DemoData.Client.Person, DemoWebApi.DemoData.Client.Person, DemoWebApi.DemoData.Client.Company> peopleAndCompany)
        {
            var requestUri = new System.Uri(this.baseUri, "api/Tuple/PeopleCompany5");
            var responseMessage = this.client.PostAsJsonAsync(requestUri.ToString(), peopleAndCompany).Result;
            responseMessage.EnsureSuccessStatusCode();
            var text = responseMessage.Content.ReadAsStringAsync().Result;
            return JsonConvert.DeserializeObject<DemoWebApi.DemoData.Client.Person>(text);
        }
        
        /// <summary>
        /// 
        /// GET api/Tuple/PeopleCompany5
        /// </summary>
        public async Task<System.Tuple<DemoWebApi.DemoData.Client.Person, DemoWebApi.DemoData.Client.Person, DemoWebApi.DemoData.Client.Person, DemoWebApi.DemoData.Client.Person, DemoWebApi.DemoData.Client.Company>> GetPeopleCompany5Async()
        {
            var template = new System.UriTemplate("api/Tuple/PeopleCompany5");
            var uriParameters = new System.Collections.Specialized.NameValueCollection();
            var requestUri = template.BindByName(this.baseUri, uriParameters);
            var responseMessage = await client.GetAsync(requestUri.ToString());
            responseMessage.EnsureSuccessStatusCode();
            var text = await responseMessage.Content.ReadAsStringAsync();
            return JsonConvert.DeserializeObject<System.Tuple<DemoWebApi.DemoData.Client.Person, DemoWebApi.DemoData.Client.Person, DemoWebApi.DemoData.Client.Person, DemoWebApi.DemoData.Client.Person, DemoWebApi.DemoData.Client.Company>>(text);
        }
        
        /// <summary>
        /// 
        /// GET api/Tuple/PeopleCompany5
        /// </summary>
        public System.Tuple<DemoWebApi.DemoData.Client.Person, DemoWebApi.DemoData.Client.Person, DemoWebApi.DemoData.Client.Person, DemoWebApi.DemoData.Client.Person, DemoWebApi.DemoData.Client.Company> GetPeopleCompany5()
        {
            var template = new System.UriTemplate("api/Tuple/PeopleCompany5");
            var uriParameters = new System.Collections.Specialized.NameValueCollection();
            var requestUri = template.BindByName(this.baseUri, uriParameters);
            var responseMessage = this.client.GetAsync(requestUri.ToString()).Result;
            responseMessage.EnsureSuccessStatusCode();
            var text = responseMessage.Content.ReadAsStringAsync().Result;
            return JsonConvert.DeserializeObject<System.Tuple<DemoWebApi.DemoData.Client.Person, DemoWebApi.DemoData.Client.Person, DemoWebApi.DemoData.Client.Person, DemoWebApi.DemoData.Client.Person, DemoWebApi.DemoData.Client.Company>>(text);
        }
        
        /// <summary>
        /// 
        /// POST api/Tuple/PeopleCompany6
        /// </summary>
        public async Task<DemoWebApi.DemoData.Client.Person> LinkPeopleCompany6Async(System.Tuple<DemoWebApi.DemoData.Client.Person, DemoWebApi.DemoData.Client.Person, DemoWebApi.DemoData.Client.Person, DemoWebApi.DemoData.Client.Person, DemoWebApi.DemoData.Client.Person, DemoWebApi.DemoData.Client.Company> peopleAndCompany)
        {
            var requestUri = new System.Uri(this.baseUri, "api/Tuple/PeopleCompany6");
            var responseMessage = await client.PostAsJsonAsync(requestUri.ToString(), peopleAndCompany);
            responseMessage.EnsureSuccessStatusCode();
            var text = await responseMessage.Content.ReadAsStringAsync();
            return JsonConvert.DeserializeObject<DemoWebApi.DemoData.Client.Person>(text);
        }
        
        /// <summary>
        /// 
        /// POST api/Tuple/PeopleCompany6
        /// </summary>
        public DemoWebApi.DemoData.Client.Person LinkPeopleCompany6(System.Tuple<DemoWebApi.DemoData.Client.Person, DemoWebApi.DemoData.Client.Person, DemoWebApi.DemoData.Client.Person, DemoWebApi.DemoData.Client.Person, DemoWebApi.DemoData.Client.Person, DemoWebApi.DemoData.Client.Company> peopleAndCompany)
        {
            var requestUri = new System.Uri(this.baseUri, "api/Tuple/PeopleCompany6");
            var responseMessage = this.client.PostAsJsonAsync(requestUri.ToString(), peopleAndCompany).Result;
            responseMessage.EnsureSuccessStatusCode();
            var text = responseMessage.Content.ReadAsStringAsync().Result;
            return JsonConvert.DeserializeObject<DemoWebApi.DemoData.Client.Person>(text);
        }
        
        /// <summary>
        /// 
        /// POST api/Tuple/PeopleCompany7
        /// </summary>
        public async Task<DemoWebApi.DemoData.Client.Person> LinkPeopleCompany7Async(System.Tuple<DemoWebApi.DemoData.Client.Person, DemoWebApi.DemoData.Client.Person, DemoWebApi.DemoData.Client.Person, DemoWebApi.DemoData.Client.Person, DemoWebApi.DemoData.Client.Person, DemoWebApi.DemoData.Client.Person> peopleAndCompany)
        {
            var requestUri = new System.Uri(this.baseUri, "api/Tuple/PeopleCompany7");
            var responseMessage = await client.PostAsJsonAsync(requestUri.ToString(), peopleAndCompany);
            responseMessage.EnsureSuccessStatusCode();
            var text = await responseMessage.Content.ReadAsStringAsync();
            return JsonConvert.DeserializeObject<DemoWebApi.DemoData.Client.Person>(text);
        }
        
        /// <summary>
        /// 
        /// POST api/Tuple/PeopleCompany7
        /// </summary>
        public DemoWebApi.DemoData.Client.Person LinkPeopleCompany7(System.Tuple<DemoWebApi.DemoData.Client.Person, DemoWebApi.DemoData.Client.Person, DemoWebApi.DemoData.Client.Person, DemoWebApi.DemoData.Client.Person, DemoWebApi.DemoData.Client.Person, DemoWebApi.DemoData.Client.Person> peopleAndCompany)
        {
            var requestUri = new System.Uri(this.baseUri, "api/Tuple/PeopleCompany7");
            var responseMessage = this.client.PostAsJsonAsync(requestUri.ToString(), peopleAndCompany).Result;
            responseMessage.EnsureSuccessStatusCode();
            var text = responseMessage.Content.ReadAsStringAsync().Result;
            return JsonConvert.DeserializeObject<DemoWebApi.DemoData.Client.Person>(text);
        }
        
        /// <summary>
        /// 
        /// POST api/Tuple/PeopleCompany8
        /// </summary>
        public async Task<DemoWebApi.DemoData.Client.Person> LinkPeopleCompany8Async(System.Tuple<DemoWebApi.DemoData.Client.Person, DemoWebApi.DemoData.Client.Person, DemoWebApi.DemoData.Client.Person, DemoWebApi.DemoData.Client.Person, DemoWebApi.DemoData.Client.Person, DemoWebApi.DemoData.Client.Person> peopleAndCompany)
        {
            var requestUri = new System.Uri(this.baseUri, "api/Tuple/PeopleCompany8");
            var responseMessage = await client.PostAsJsonAsync(requestUri.ToString(), peopleAndCompany);
            responseMessage.EnsureSuccessStatusCode();
            var text = await responseMessage.Content.ReadAsStringAsync();
            return JsonConvert.DeserializeObject<DemoWebApi.DemoData.Client.Person>(text);
        }
        
        /// <summary>
        /// 
        /// POST api/Tuple/PeopleCompany8
        /// </summary>
        public DemoWebApi.DemoData.Client.Person LinkPeopleCompany8(System.Tuple<DemoWebApi.DemoData.Client.Person, DemoWebApi.DemoData.Client.Person, DemoWebApi.DemoData.Client.Person, DemoWebApi.DemoData.Client.Person, DemoWebApi.DemoData.Client.Person, DemoWebApi.DemoData.Client.Person> peopleAndCompany)
        {
            var requestUri = new System.Uri(this.baseUri, "api/Tuple/PeopleCompany8");
            var responseMessage = this.client.PostAsJsonAsync(requestUri.ToString(), peopleAndCompany).Result;
            responseMessage.EnsureSuccessStatusCode();
            var text = responseMessage.Content.ReadAsStringAsync().Result;
            return JsonConvert.DeserializeObject<DemoWebApi.DemoData.Client.Person>(text);
        }
        
        /// <summary>
        /// 
        /// GET api/Tuple/Tuple1
        /// </summary>
        public async Task<System.Tuple<int>> GetTuple1Async()
        {
            var template = new System.UriTemplate("api/Tuple/Tuple1");
            var uriParameters = new System.Collections.Specialized.NameValueCollection();
            var requestUri = template.BindByName(this.baseUri, uriParameters);
            var responseMessage = await client.GetAsync(requestUri.ToString());
            responseMessage.EnsureSuccessStatusCode();
            var text = await responseMessage.Content.ReadAsStringAsync();
            return JsonConvert.DeserializeObject<System.Tuple<int>>(text);
        }
        
        /// <summary>
        /// 
        /// GET api/Tuple/Tuple1
        /// </summary>
        public System.Tuple<int> GetTuple1()
        {
            var template = new System.UriTemplate("api/Tuple/Tuple1");
            var uriParameters = new System.Collections.Specialized.NameValueCollection();
            var requestUri = template.BindByName(this.baseUri, uriParameters);
            var responseMessage = this.client.GetAsync(requestUri.ToString()).Result;
            responseMessage.EnsureSuccessStatusCode();
            var text = responseMessage.Content.ReadAsStringAsync().Result;
            return JsonConvert.DeserializeObject<System.Tuple<int>>(text);
        }
        
        /// <summary>
        /// 
        /// POST api/Tuple/Tuple1
        /// </summary>
        public async Task<int> PostTuple1Async(System.Tuple<int> tuple)
        {
            var requestUri = new System.Uri(this.baseUri, "api/Tuple/Tuple1");
            var responseMessage = await client.PostAsJsonAsync(requestUri.ToString(), tuple);
            responseMessage.EnsureSuccessStatusCode();
            var text = await responseMessage.Content.ReadAsStringAsync();
            return System.Int32.Parse(text);
        }
        
        /// <summary>
        /// 
        /// POST api/Tuple/Tuple1
        /// </summary>
        public int PostTuple1(System.Tuple<int> tuple)
        {
            var requestUri = new System.Uri(this.baseUri, "api/Tuple/Tuple1");
            var responseMessage = this.client.PostAsJsonAsync(requestUri.ToString(), tuple).Result;
            responseMessage.EnsureSuccessStatusCode();
            var text = responseMessage.Content.ReadAsStringAsync().Result;
            return System.Int32.Parse(text);
        }
        
        /// <summary>
        /// 
        /// GET api/Tuple/Tuple2
        /// </summary>
        public async Task<System.Tuple<string, int>> GetTuple2Async()
        {
            var template = new System.UriTemplate("api/Tuple/Tuple2");
            var uriParameters = new System.Collections.Specialized.NameValueCollection();
            var requestUri = template.BindByName(this.baseUri, uriParameters);
            var responseMessage = await client.GetAsync(requestUri.ToString());
            responseMessage.EnsureSuccessStatusCode();
            var text = await responseMessage.Content.ReadAsStringAsync();
            return JsonConvert.DeserializeObject<System.Tuple<string, int>>(text);
        }
        
        /// <summary>
        /// 
        /// GET api/Tuple/Tuple2
        /// </summary>
        public System.Tuple<string, int> GetTuple2()
        {
            var template = new System.UriTemplate("api/Tuple/Tuple2");
            var uriParameters = new System.Collections.Specialized.NameValueCollection();
            var requestUri = template.BindByName(this.baseUri, uriParameters);
            var responseMessage = this.client.GetAsync(requestUri.ToString()).Result;
            responseMessage.EnsureSuccessStatusCode();
            var text = responseMessage.Content.ReadAsStringAsync().Result;
            return JsonConvert.DeserializeObject<System.Tuple<string, int>>(text);
        }
        
        /// <summary>
        /// 
        /// POST api/Tuple/Tuple2
        /// </summary>
        public async Task<string> PostTuple2Async(System.Tuple<string, int> tuple)
        {
            var requestUri = new System.Uri(this.baseUri, "api/Tuple/Tuple2");
            var responseMessage = await client.PostAsJsonAsync(requestUri.ToString(), tuple);
            responseMessage.EnsureSuccessStatusCode();
            var text = await responseMessage.Content.ReadAsStringAsync();
            return JsonConvert.DeserializeObject<string>(text);
        }
        
        /// <summary>
        /// 
        /// POST api/Tuple/Tuple2
        /// </summary>
        public string PostTuple2(System.Tuple<string, int> tuple)
        {
            var requestUri = new System.Uri(this.baseUri, "api/Tuple/Tuple2");
            var responseMessage = this.client.PostAsJsonAsync(requestUri.ToString(), tuple).Result;
            responseMessage.EnsureSuccessStatusCode();
            var text = responseMessage.Content.ReadAsStringAsync().Result;
            return JsonConvert.DeserializeObject<string>(text);
        }
        
        /// <summary>
        /// 
        /// GET api/Tuple/Tuple3
        /// </summary>
        public async Task<System.Tuple<string, string, int>> GetTuple3Async()
        {
            var template = new System.UriTemplate("api/Tuple/Tuple3");
            var uriParameters = new System.Collections.Specialized.NameValueCollection();
            var requestUri = template.BindByName(this.baseUri, uriParameters);
            var responseMessage = await client.GetAsync(requestUri.ToString());
            responseMessage.EnsureSuccessStatusCode();
            var text = await responseMessage.Content.ReadAsStringAsync();
            return JsonConvert.DeserializeObject<System.Tuple<string, string, int>>(text);
        }
        
        /// <summary>
        /// 
        /// GET api/Tuple/Tuple3
        /// </summary>
        public System.Tuple<string, string, int> GetTuple3()
        {
            var template = new System.UriTemplate("api/Tuple/Tuple3");
            var uriParameters = new System.Collections.Specialized.NameValueCollection();
            var requestUri = template.BindByName(this.baseUri, uriParameters);
            var responseMessage = this.client.GetAsync(requestUri.ToString()).Result;
            responseMessage.EnsureSuccessStatusCode();
            var text = responseMessage.Content.ReadAsStringAsync().Result;
            return JsonConvert.DeserializeObject<System.Tuple<string, string, int>>(text);
        }
        
        /// <summary>
        /// 
        /// POST api/Tuple/Tuple3
        /// </summary>
        public async Task<string> PostTuple3Async(System.Tuple<string, string, int> tuple)
        {
            var requestUri = new System.Uri(this.baseUri, "api/Tuple/Tuple3");
            var responseMessage = await client.PostAsJsonAsync(requestUri.ToString(), tuple);
            responseMessage.EnsureSuccessStatusCode();
            var text = await responseMessage.Content.ReadAsStringAsync();
            return JsonConvert.DeserializeObject<string>(text);
        }
        
        /// <summary>
        /// 
        /// POST api/Tuple/Tuple3
        /// </summary>
        public string PostTuple3(System.Tuple<string, string, int> tuple)
        {
            var requestUri = new System.Uri(this.baseUri, "api/Tuple/Tuple3");
            var responseMessage = this.client.PostAsJsonAsync(requestUri.ToString(), tuple).Result;
            responseMessage.EnsureSuccessStatusCode();
            var text = responseMessage.Content.ReadAsStringAsync().Result;
            return JsonConvert.DeserializeObject<string>(text);
        }
        
        /// <summary>
        /// 
        /// GET api/Tuple/Tuple4
        /// </summary>
        public async Task<System.Tuple<string, string, string, int>> GetTuple4Async()
        {
            var template = new System.UriTemplate("api/Tuple/Tuple4");
            var uriParameters = new System.Collections.Specialized.NameValueCollection();
            var requestUri = template.BindByName(this.baseUri, uriParameters);
            var responseMessage = await client.GetAsync(requestUri.ToString());
            responseMessage.EnsureSuccessStatusCode();
            var text = await responseMessage.Content.ReadAsStringAsync();
            return JsonConvert.DeserializeObject<System.Tuple<string, string, string, int>>(text);
        }
        
        /// <summary>
        /// 
        /// GET api/Tuple/Tuple4
        /// </summary>
        public System.Tuple<string, string, string, int> GetTuple4()
        {
            var template = new System.UriTemplate("api/Tuple/Tuple4");
            var uriParameters = new System.Collections.Specialized.NameValueCollection();
            var requestUri = template.BindByName(this.baseUri, uriParameters);
            var responseMessage = this.client.GetAsync(requestUri.ToString()).Result;
            responseMessage.EnsureSuccessStatusCode();
            var text = responseMessage.Content.ReadAsStringAsync().Result;
            return JsonConvert.DeserializeObject<System.Tuple<string, string, string, int>>(text);
        }
        
        /// <summary>
        /// 
        /// POST api/Tuple/Tuple4
        /// </summary>
        public async Task<string> PostTuple4Async(System.Tuple<string, string, string, int> tuple)
        {
            var requestUri = new System.Uri(this.baseUri, "api/Tuple/Tuple4");
            var responseMessage = await client.PostAsJsonAsync(requestUri.ToString(), tuple);
            responseMessage.EnsureSuccessStatusCode();
            var text = await responseMessage.Content.ReadAsStringAsync();
            return JsonConvert.DeserializeObject<string>(text);
        }
        
        /// <summary>
        /// 
        /// POST api/Tuple/Tuple4
        /// </summary>
        public string PostTuple4(System.Tuple<string, string, string, int> tuple)
        {
            var requestUri = new System.Uri(this.baseUri, "api/Tuple/Tuple4");
            var responseMessage = this.client.PostAsJsonAsync(requestUri.ToString(), tuple).Result;
            responseMessage.EnsureSuccessStatusCode();
            var text = responseMessage.Content.ReadAsStringAsync().Result;
            return JsonConvert.DeserializeObject<string>(text);
        }
        
        /// <summary>
        /// 
        /// GET api/Tuple/Tuple5
        /// </summary>
        public async Task<System.Tuple<string, string, string, string, int>> GetTuple5Async()
        {
            var template = new System.UriTemplate("api/Tuple/Tuple5");
            var uriParameters = new System.Collections.Specialized.NameValueCollection();
            var requestUri = template.BindByName(this.baseUri, uriParameters);
            var responseMessage = await client.GetAsync(requestUri.ToString());
            responseMessage.EnsureSuccessStatusCode();
            var text = await responseMessage.Content.ReadAsStringAsync();
            return JsonConvert.DeserializeObject<System.Tuple<string, string, string, string, int>>(text);
        }
        
        /// <summary>
        /// 
        /// GET api/Tuple/Tuple5
        /// </summary>
        public System.Tuple<string, string, string, string, int> GetTuple5()
        {
            var template = new System.UriTemplate("api/Tuple/Tuple5");
            var uriParameters = new System.Collections.Specialized.NameValueCollection();
            var requestUri = template.BindByName(this.baseUri, uriParameters);
            var responseMessage = this.client.GetAsync(requestUri.ToString()).Result;
            responseMessage.EnsureSuccessStatusCode();
            var text = responseMessage.Content.ReadAsStringAsync().Result;
            return JsonConvert.DeserializeObject<System.Tuple<string, string, string, string, int>>(text);
        }
        
        /// <summary>
        /// 
        /// POST api/Tuple/Tuple5
        /// </summary>
        public async Task<string> PostTuple5Async(System.Tuple<string, string, string, string, int> tuple)
        {
            var requestUri = new System.Uri(this.baseUri, "api/Tuple/Tuple5");
            var responseMessage = await client.PostAsJsonAsync(requestUri.ToString(), tuple);
            responseMessage.EnsureSuccessStatusCode();
            var text = await responseMessage.Content.ReadAsStringAsync();
            return JsonConvert.DeserializeObject<string>(text);
        }
        
        /// <summary>
        /// 
        /// POST api/Tuple/Tuple5
        /// </summary>
        public string PostTuple5(System.Tuple<string, string, string, string, int> tuple)
        {
            var requestUri = new System.Uri(this.baseUri, "api/Tuple/Tuple5");
            var responseMessage = this.client.PostAsJsonAsync(requestUri.ToString(), tuple).Result;
            responseMessage.EnsureSuccessStatusCode();
            var text = responseMessage.Content.ReadAsStringAsync().Result;
            return JsonConvert.DeserializeObject<string>(text);
        }
        
        /// <summary>
        /// 
        /// GET api/Tuple/Tuple6
        /// </summary>
        public async Task<System.Tuple<string, string, string, string, string, int>> GetTuple6Async()
        {
            var template = new System.UriTemplate("api/Tuple/Tuple6");
            var uriParameters = new System.Collections.Specialized.NameValueCollection();
            var requestUri = template.BindByName(this.baseUri, uriParameters);
            var responseMessage = await client.GetAsync(requestUri.ToString());
            responseMessage.EnsureSuccessStatusCode();
            var text = await responseMessage.Content.ReadAsStringAsync();
            return JsonConvert.DeserializeObject<System.Tuple<string, string, string, string, string, int>>(text);
        }
        
        /// <summary>
        /// 
        /// GET api/Tuple/Tuple6
        /// </summary>
        public System.Tuple<string, string, string, string, string, int> GetTuple6()
        {
            var template = new System.UriTemplate("api/Tuple/Tuple6");
            var uriParameters = new System.Collections.Specialized.NameValueCollection();
            var requestUri = template.BindByName(this.baseUri, uriParameters);
            var responseMessage = this.client.GetAsync(requestUri.ToString()).Result;
            responseMessage.EnsureSuccessStatusCode();
            var text = responseMessage.Content.ReadAsStringAsync().Result;
            return JsonConvert.DeserializeObject<System.Tuple<string, string, string, string, string, int>>(text);
        }
        
        /// <summary>
        /// 
        /// POST api/Tuple/Tuple6
        /// </summary>
        public async Task<string> PostTuple6Async(System.Tuple<string, string, string, string, string, int> tuple)
        {
            var requestUri = new System.Uri(this.baseUri, "api/Tuple/Tuple6");
            var responseMessage = await client.PostAsJsonAsync(requestUri.ToString(), tuple);
            responseMessage.EnsureSuccessStatusCode();
            var text = await responseMessage.Content.ReadAsStringAsync();
            return JsonConvert.DeserializeObject<string>(text);
        }
        
        /// <summary>
        /// 
        /// POST api/Tuple/Tuple6
        /// </summary>
        public string PostTuple6(System.Tuple<string, string, string, string, string, int> tuple)
        {
            var requestUri = new System.Uri(this.baseUri, "api/Tuple/Tuple6");
            var responseMessage = this.client.PostAsJsonAsync(requestUri.ToString(), tuple).Result;
            responseMessage.EnsureSuccessStatusCode();
            var text = responseMessage.Content.ReadAsStringAsync().Result;
            return JsonConvert.DeserializeObject<string>(text);
        }
        
        /// <summary>
        /// 
        /// GET api/Tuple/Tuple7
        /// </summary>
        public async Task<System.Tuple<string, string, string, string, string, string>> GetTuple7Async()
        {
            var template = new System.UriTemplate("api/Tuple/Tuple7");
            var uriParameters = new System.Collections.Specialized.NameValueCollection();
            var requestUri = template.BindByName(this.baseUri, uriParameters);
            var responseMessage = await client.GetAsync(requestUri.ToString());
            responseMessage.EnsureSuccessStatusCode();
            var text = await responseMessage.Content.ReadAsStringAsync();
            return JsonConvert.DeserializeObject<System.Tuple<string, string, string, string, string, string>>(text);
        }
        
        /// <summary>
        /// 
        /// GET api/Tuple/Tuple7
        /// </summary>
        public System.Tuple<string, string, string, string, string, string> GetTuple7()
        {
            var template = new System.UriTemplate("api/Tuple/Tuple7");
            var uriParameters = new System.Collections.Specialized.NameValueCollection();
            var requestUri = template.BindByName(this.baseUri, uriParameters);
            var responseMessage = this.client.GetAsync(requestUri.ToString()).Result;
            responseMessage.EnsureSuccessStatusCode();
            var text = responseMessage.Content.ReadAsStringAsync().Result;
            return JsonConvert.DeserializeObject<System.Tuple<string, string, string, string, string, string>>(text);
        }
        
        /// <summary>
        /// 
        /// POST api/Tuple/Tuple7
        /// </summary>
        public async Task<string> PostTuple7Async(System.Tuple<string, string, string, string, string, string> tuple)
        {
            var requestUri = new System.Uri(this.baseUri, "api/Tuple/Tuple7");
            var responseMessage = await client.PostAsJsonAsync(requestUri.ToString(), tuple);
            responseMessage.EnsureSuccessStatusCode();
            var text = await responseMessage.Content.ReadAsStringAsync();
            return JsonConvert.DeserializeObject<string>(text);
        }
        
        /// <summary>
        /// 
        /// POST api/Tuple/Tuple7
        /// </summary>
        public string PostTuple7(System.Tuple<string, string, string, string, string, string> tuple)
        {
            var requestUri = new System.Uri(this.baseUri, "api/Tuple/Tuple7");
            var responseMessage = this.client.PostAsJsonAsync(requestUri.ToString(), tuple).Result;
            responseMessage.EnsureSuccessStatusCode();
            var text = responseMessage.Content.ReadAsStringAsync().Result;
            return JsonConvert.DeserializeObject<string>(text);
        }
        
        /// <summary>
        /// 
        /// GET api/Tuple/Tuple8
        /// </summary>
        public async Task<System.Tuple<string, string, string, string, string, string>> GetTuple8Async()
        {
            var template = new System.UriTemplate("api/Tuple/Tuple8");
            var uriParameters = new System.Collections.Specialized.NameValueCollection();
            var requestUri = template.BindByName(this.baseUri, uriParameters);
            var responseMessage = await client.GetAsync(requestUri.ToString());
            responseMessage.EnsureSuccessStatusCode();
            var text = await responseMessage.Content.ReadAsStringAsync();
            return JsonConvert.DeserializeObject<System.Tuple<string, string, string, string, string, string>>(text);
        }
        
        /// <summary>
        /// 
        /// GET api/Tuple/Tuple8
        /// </summary>
        public System.Tuple<string, string, string, string, string, string> GetTuple8()
        {
            var template = new System.UriTemplate("api/Tuple/Tuple8");
            var uriParameters = new System.Collections.Specialized.NameValueCollection();
            var requestUri = template.BindByName(this.baseUri, uriParameters);
            var responseMessage = this.client.GetAsync(requestUri.ToString()).Result;
            responseMessage.EnsureSuccessStatusCode();
            var text = responseMessage.Content.ReadAsStringAsync().Result;
            return JsonConvert.DeserializeObject<System.Tuple<string, string, string, string, string, string>>(text);
        }
        
        /// <summary>
        /// 
        /// POST api/Tuple/Tuple8
        /// </summary>
        public async Task<string> PostTuple8Async(System.Tuple<string, string, string, string, string, string> tuple)
        {
            var requestUri = new System.Uri(this.baseUri, "api/Tuple/Tuple8");
            var responseMessage = await client.PostAsJsonAsync(requestUri.ToString(), tuple);
            responseMessage.EnsureSuccessStatusCode();
            var text = await responseMessage.Content.ReadAsStringAsync();
            return JsonConvert.DeserializeObject<string>(text);
        }
        
        /// <summary>
        /// 
        /// POST api/Tuple/Tuple8
        /// </summary>
        public string PostTuple8(System.Tuple<string, string, string, string, string, string> tuple)
        {
            var requestUri = new System.Uri(this.baseUri, "api/Tuple/Tuple8");
            var responseMessage = this.client.PostAsJsonAsync(requestUri.ToString(), tuple).Result;
            responseMessage.EnsureSuccessStatusCode();
            var text = responseMessage.Content.ReadAsStringAsync().Result;
            return JsonConvert.DeserializeObject<string>(text);
        }
        
        /// <summary>
        /// 
        /// GET api/Tuple/TupleNested
        /// </summary>
        public async Task<System.Tuple<string, string, string, string, string, string>> GetTupleNestedAsync()
        {
            var template = new System.UriTemplate("api/Tuple/TupleNested");
            var uriParameters = new System.Collections.Specialized.NameValueCollection();
            var requestUri = template.BindByName(this.baseUri, uriParameters);
            var responseMessage = await client.GetAsync(requestUri.ToString());
            responseMessage.EnsureSuccessStatusCode();
            var text = await responseMessage.Content.ReadAsStringAsync();
            return JsonConvert.DeserializeObject<System.Tuple<string, string, string, string, string, string>>(text);
        }
        
        /// <summary>
        /// 
        /// GET api/Tuple/TupleNested
        /// </summary>
        public System.Tuple<string, string, string, string, string, string> GetTupleNested()
        {
            var template = new System.UriTemplate("api/Tuple/TupleNested");
            var uriParameters = new System.Collections.Specialized.NameValueCollection();
            var requestUri = template.BindByName(this.baseUri, uriParameters);
            var responseMessage = this.client.GetAsync(requestUri.ToString()).Result;
            responseMessage.EnsureSuccessStatusCode();
            var text = responseMessage.Content.ReadAsStringAsync().Result;
            return JsonConvert.DeserializeObject<System.Tuple<string, string, string, string, string, string>>(text);
        }
    }
    
    public partial class Values
    {
        
        private System.Net.Http.HttpClient client;
        
        private System.Uri baseUri;
        
        public Values(System.Net.Http.HttpClient client, System.Uri baseUri)
        {
            if (client == null)
                throw new ArgumentNullException("client", "Null HttpClient.");

            if (baseUri == null)
                throw new ArgumentNullException("baseUri", "Null baseUri");

            this.client = client;
            this.baseUri = baseUri;
        }
        
        /// <summary>
        /// 
        /// GET api/Values
        /// </summary>
        public async Task<string[]> GetAsync()
        {
            var template = new System.UriTemplate("api/Values");
            var uriParameters = new System.Collections.Specialized.NameValueCollection();
            var requestUri = template.BindByName(this.baseUri, uriParameters);
            var responseMessage = await client.GetAsync(requestUri.ToString());
            responseMessage.EnsureSuccessStatusCode();
            var text = await responseMessage.Content.ReadAsStringAsync();
            return JsonConvert.DeserializeObject<string[]>(text);
        }
        
        /// <summary>
        /// 
        /// GET api/Values
        /// </summary>
        public string[] Get()
        {
            var template = new System.UriTemplate("api/Values");
            var uriParameters = new System.Collections.Specialized.NameValueCollection();
            var requestUri = template.BindByName(this.baseUri, uriParameters);
            var responseMessage = this.client.GetAsync(requestUri.ToString()).Result;
            responseMessage.EnsureSuccessStatusCode();
            var text = responseMessage.Content.ReadAsStringAsync().Result;
            return JsonConvert.DeserializeObject<string[]>(text);
        }
        
        /// <summary>
        /// 
        /// GET api/Values/{id}?name={name}
        /// </summary>
        public async Task<string> GetAsync(int id, string name)
        {
            var template = new System.UriTemplate("api/Values/{id}?name={name}");
            var uriParameters = new System.Collections.Specialized.NameValueCollection();
            uriParameters.Add("id", id.ToString());
            uriParameters.Add("name", name);
            var requestUri = template.BindByName(this.baseUri, uriParameters);
            var responseMessage = await client.GetAsync(requestUri.ToString());
            responseMessage.EnsureSuccessStatusCode();
            var text = await responseMessage.Content.ReadAsStringAsync();
            return JsonConvert.DeserializeObject<string>(text);
        }
        
        /// <summary>
        /// 
        /// GET api/Values/{id}?name={name}
        /// </summary>
        public string Get(int id, string name)
        {
            var template = new System.UriTemplate("api/Values/{id}?name={name}");
            var uriParameters = new System.Collections.Specialized.NameValueCollection();
            uriParameters.Add("id", id.ToString());
            uriParameters.Add("name", name);
            var requestUri = template.BindByName(this.baseUri, uriParameters);
            var responseMessage = this.client.GetAsync(requestUri.ToString()).Result;
            responseMessage.EnsureSuccessStatusCode();
            var text = responseMessage.Content.ReadAsStringAsync().Result;
            return JsonConvert.DeserializeObject<string>(text);
        }
        
        /// <summary>
        /// 
        /// GET api/Values?name={name}
        /// </summary>
        public async Task<string> GetAsync(string name)
        {
            var template = new System.UriTemplate("api/Values?name={name}");
            var uriParameters = new System.Collections.Specialized.NameValueCollection();
            uriParameters.Add("name", name);
            var requestUri = template.BindByName(this.baseUri, uriParameters);
            var responseMessage = await client.GetAsync(requestUri.ToString());
            responseMessage.EnsureSuccessStatusCode();
            var text = await responseMessage.Content.ReadAsStringAsync();
            return JsonConvert.DeserializeObject<string>(text);
        }
        
        /// <summary>
        /// 
        /// GET api/Values?name={name}
        /// </summary>
        public string Get(string name)
        {
            var template = new System.UriTemplate("api/Values?name={name}");
            var uriParameters = new System.Collections.Specialized.NameValueCollection();
            uriParameters.Add("name", name);
            var requestUri = template.BindByName(this.baseUri, uriParameters);
            var responseMessage = this.client.GetAsync(requestUri.ToString()).Result;
            responseMessage.EnsureSuccessStatusCode();
            var text = responseMessage.Content.ReadAsStringAsync().Result;
            return JsonConvert.DeserializeObject<string>(text);
        }
        
        /// <summary>
        /// 
        /// POST api/Values
        /// </summary>
        public async Task<string> PostAsync(string value)
        {
            var requestUri = new System.Uri(this.baseUri, "api/Values");
            var responseMessage = await client.PostAsJsonAsync(requestUri.ToString(), value);
            responseMessage.EnsureSuccessStatusCode();
            var text = await responseMessage.Content.ReadAsStringAsync();
            return JsonConvert.DeserializeObject<string>(text);
        }
        
        /// <summary>
        /// 
        /// POST api/Values
        /// </summary>
        public string Post(string value)
        {
            var requestUri = new System.Uri(this.baseUri, "api/Values");
            var responseMessage = this.client.PostAsJsonAsync(requestUri.ToString(), value).Result;
            responseMessage.EnsureSuccessStatusCode();
            var text = responseMessage.Content.ReadAsStringAsync().Result;
            return JsonConvert.DeserializeObject<string>(text);
        }
        
        /// <summary>
        /// 
        /// PUT api/Values/{id}
        /// </summary>
        public async Task PutAsync(int id, string value)
        {
            var template = new System.UriTemplate("api/Values/{id}");
            var uriParameters = new System.Collections.Specialized.NameValueCollection();
            uriParameters.Add("id", id.ToString());
            var requestUri = template.BindByName(this.baseUri, uriParameters);
            var responseMessage = await client.PutAsJsonAsync(requestUri.ToString(), value);
            responseMessage.EnsureSuccessStatusCode();
        }
        
        /// <summary>
        /// 
        /// PUT api/Values/{id}
        /// </summary>
        public void Put(int id, string value)
        {
            var template = new System.UriTemplate("api/Values/{id}");
            var uriParameters = new System.Collections.Specialized.NameValueCollection();
            uriParameters.Add("id", id.ToString());
            var requestUri = template.BindByName(this.baseUri, uriParameters);
            var responseMessage = this.client.PutAsJsonAsync(requestUri.ToString(), value).Result;
            responseMessage.EnsureSuccessStatusCode();
        }
        
        /// <summary>
        /// 
        /// DELETE api/Values/{id}
        /// </summary>
        public async Task DeleteAsync(int id)
        {
            var template = new System.UriTemplate("api/Values/{id}");
            var uriParameters = new System.Collections.Specialized.NameValueCollection();
            uriParameters.Add("id", id.ToString());
            var requestUri = template.BindByName(this.baseUri, uriParameters);
            var responseMessage = await client.DeleteAsync(requestUri.ToString());
            responseMessage.EnsureSuccessStatusCode();
        }
        
        /// <summary>
        /// 
        /// DELETE api/Values/{id}
        /// </summary>
        public void Delete(int id)
        {
            var template = new System.UriTemplate("api/Values/{id}");
            var uriParameters = new System.Collections.Specialized.NameValueCollection();
            uriParameters.Add("id", id.ToString());
            var requestUri = template.BindByName(this.baseUri, uriParameters);
            var responseMessage = this.client.DeleteAsync(requestUri.ToString()).Result;
            responseMessage.EnsureSuccessStatusCode();
        }
    }
}
